# Use this to deploy Noq's OSS pre-build docker image to ECS
# ecs-cli configure --cluster noq-production --default-launch-type FARGATE --config-name noq-staging --region us-west-2
# ecs-cli up --cluster-config noq-production
#VPC created: vpc-0487cb3adaf4f597d
#Subnet created: subnet-06d9e5e28e2cdb6fd
#Subnet created: subnet-0286d61b579ee5347
# aws ec2 authorize-security-group-ingress --group-id sg-0cd43362e2544c7ea --protocol tcp --port 8081 --cidr 0.0.0.0/0 --region us-east-1
# aws ec2 describe-security-groups --filters Name=vpc-id,Values=vpc-0b362e0f6f68d1b79 --region us-west-2
# Logs: ecs-cli logs --task-id 058ac33836b6477ab8fb27ee71211a29 --follow --cluster-config consoleme
# 2. If necessary, log into the consoleme_oss_1 account and update the configuration at s3://consolemeoss/ecs.yaml
# 3. Run:`
#   ecs-cli compose -f docker-compose-ecs.yaml \
#  --cluster-config consoleme --ecs-params ecs-params.yml -p consoleme --task-role-arn arn:aws:iam::844240725092:role/ConsoleMeReadOnlyInstanceProfile \
#  --region us-east-1 service up --create-log-groups --timeout 10 --target-groups "targetGroupArn=arn:aws:elasticloadbalancing:us-east-1:844240725092:targetgroup/consoleme-fargate/ca6786a03594d813,containerPort=8081,containerName=consoleme-deploy"

# If you SSH into the container, the task environment variables can be read from this file: /proc/1/task/1/environ
version: "3"
services:
  noq-production-celery:
    image: "259868150464.dkr.ecr.us-west-2.amazonaws.com/cloudumi-celery:production"
    environment:
      - SETUPTOOLS_USE_DISTUTILS=stdlib
      - CONFIG_LOCATION=s3://noq-tenant-configuration.node.dev1.259868150464.us-west-2/noq-production-1/noq-production-1.yaml
    # Run commands to install Consoleme, run the service, and never exit in the event of failure (For dev debugging)
    command: >
      bash -c '
      mkdir ~/.ssh;
      echo "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQClHPc54DoYiOy/0IMoDte+aYKF5vSF6DK1miSUVfbkaUd7MiRIDLPvOyIBEOk9AfHnkah2ka6gyGl7pSkyrMLqcbfnHWb/0q3nWg/InqXl0c/aqgkZoaN4VJi4ejoBj7jnWFbS7EJLaPJlGIWh1HKxHbswjuxiEDImytojAKpwfgD6qK6J8hb6XZyiyS0nv61g8w+4H71WoxjArgTUxzdmAFubyU0SP7EG4GkESCcDzs/JhO74tNAY8cZbmp2XENvbWGXwgOUrfn2RoWMFZE/9a8k/hGkmrujzA1UPk+os8NcjR1oN+/kPUzn1N0xmS+UYUChYAIirnD2NMMppQfKJ" > ~/.ssh/authorized_keys;
      apt-get install -y openssh-server cron;
      mkdir -p /var/run/sshd;
      service ssh restart;
      echo "export $$(strings /proc/1/environ | grep AWS_CONTAINER_CREDENTIALS_RELATIVE_URI)" >> /root/.profile;
      pip install awscli;
      celery -A common.celery_tasks.celery_tasks worker -l DEBUG -B -E --concurrency=8'
    logging:
      driver: awslogs
      options:
        awslogs-group: noq-production
        awslogs-region: us-west-2
        awslogs-stream-prefix: celery
