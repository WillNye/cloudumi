version: "3"
# TODO: Set up for production environment security
# Never use this in a production environment.
services:
  cloudumi-redis:
    user: root
    container_name: cloudumi-redis
    ports:
      - "6379:6379"
    image: "bitnami/redis:6.2"
    environment:
      - REDIS_PASSWORD=s2dKdXxjHeCQwoYZ
      - REDIS_TLS_ENABLED=yes
      - REDIS_TLS_CERT_FILE=/tls/redis.crt
      - REDIS_TLS_KEY_FILE=/tls/redis.key
      - REDIS_TLS_CA_FILE=/tls/ca.crt
      - REDIS_TLS_AUTH_CLIENTS=no
      - REDIS_TLS_PORT=6379
    volumes:
      - ${PWD}/deploy/local/redis/tests/tls/:/tls

  cloudumi-dynamodb:
    image: "amazon/dynamodb-local"
    user: root
    container_name: cloudumi-dynamodb
    entrypoint: java
    command: "-jar DynamoDBLocal.jar -sharedDb -dbPath /data -port 8005"
    ports:
      - "8005:8005"
    volumes:
      - ./dynamodb-data:/data:delegated
  cloudumi-dynamodb_admin:
    container_name: cloudumi-dynamodb-admin
    image: aaronshaf/dynamodb-admin:latest
    environment:
      - DYNAMO_ENDPOINT=http://cloudumi-dynamodb:8005
    ports:
      - "8001:8001"

  cloudumi-pg:
    image: postgres:14
    environment:
      POSTGRES_DB: noq
      POSTGRES_PASSWORD: local_dev
    volumes:
      - ${PWD}/deploy/local/postgresql/data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
  cloudumi-pg-admin:
    image: adminer
    ports:
      - "8008:8080"

  # redis-cluster:
  #   image: noqdev/redis-cluster
  #   environment:
  #     INITIAL_PORT: 9000
  #     IP: 0.0.0.0
  #     DEFAULT_PASSWORD: s2dKdXxjHeCQwoYZ
  #     REDIS_TLS_CERT_FILE: /etc/redis/tls/redis.crt
  #     REDIS_TLS_KEY_FILE: /etc/redis/tls/redis.key
  #     REDIS_TLS_CA_FILE: /etc/redis/tls/ca.crt
  #   volumes:
  #     - ./local/redis/tests/tls/:/etc/redis/tls
  #      IP: ${REDIS_CLUSTER_IP}
  #      SENTINEL: ${REDIS_USE_SENTINEL}
  #      STANDALONE: ${REDIS_USE_STANDALONE}
  # hostname: redis-cluster
  # ports:
  #   - "9000-9005:9000-9005"

  # Portainer is only for dev
#  portainer:
#    image: portainer/portainer-ce:latest
#    volumes:
#      - /var/run/docker.sock:/var/run/docker.sock
#      - portainer_data:/data
#    ports:
#      - "9000:9000"
#      - "8000:8000"
#      - "9443:9443"
# TODO: Figure out metrics and tracing
#  prometheus:
#    image: prom/prometheus
#    volumes:
#      - ./cloudumi_metrics/prometheus/:/etc/prometheus/
#      - prometheus_data:/prometheus
#    command:
#      - '--config.file=/etc/prometheus/prometheus.yml'
#      - '--storage.tsdb.path=/prometheus'
#      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
#      - '--web.console.templates=/usr/share/prometheus/consoles'
#    ports:
#      - "9090:9090"
#    deploy:
#      labels:
#        - "traefik.http.routers.prometheus.rule=Host(`prometheus.localhost`)"
#        - "traefik.http.routers.prometheus.service=prometheus"
#        - "traefik.http.services.prometheus.loadbalancer.server.port=9090"
#      placement:
#        constraints:
#          - node.role==manager
#      restart_policy:
#        condition: on-failure
#
#  grafana:
#    image: grafana/grafana
#    depends_on:
#      - prometheus
#    volumes:
#      - grafana_data:/var/lib/grafana
#      - ./cloudumi_metrics/grafana/provisioning/:/etc/grafana/provisioning/
#    env_file:
#      - ./cloudumi_metrics/grafana/config.monitoring
#    ports:
#      - "9091:3000"
#    user: "104"
#    deploy:
#      labels:
#        - "traefik.http.routers.grafana.rule=Host(`grafana.localhost`)"
#        - "traefik.http.routers.grafana.service=grafana"
#        - "traefik.http.services.grafana.loadbalancer.server.port=3000"
#      placement:
#        constraints:
#          - node.role == manager
#      restart_policy:
#        condition: on-failure
#
#  jaeger:
#    image: openzipkin/zipkin:latest
#    ports:
#      - "9411:9411"

#volumes:
#  localstack-vol1:
#  localstack-vol2:
#  localstack-vol3:
#  prometheus_data: {}
#  grafana_data: {}
#  portainer_data:

networks:
  public:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 192.168.100.0/24
  cloudumi-redis:
    driver: bridge
  cloudumi-dynamodb:
    driver: bridge
  cloudumi-redis-data:
    driver: bridge
  cloudumi-localstack:
    driver: bridge
