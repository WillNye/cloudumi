{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"The Noq Platform \u00b6 What is it, and how does it work? \u00b6 The Noq platform is based on ConsoleMe , an open source project created and maintained by Noq's cofounder. Noq is a SaaS-based platform that enables cloud administrators and developers to manage AWS access and fine-grained permissions without requiring prior permissions knowledge or expertise. Noq provides the following features: Permissions Management and Request Framework An IAM Self-Service Wizard that lets users request IAM permissions in plain English, simplifying all AWS actions into CRUD operations that you can customize Generates cross-account resource policies automatically for supported resource types (Currently: IAM, S3, SQS, and SNS) Typeaheads on all known cloud resources, across your entire multi-account environment Automatically approves and applies low-risk permission requests, according to rules that you create Cloud administrators can create/clone IAM roles and natively manage IAM roles, users, inline/managed policies, S3 Buckets, SQS queues, and SNS topics across hundreds of accounts in a single interface. Coming Soon! View a minimized effective policy for a role, without needing to view all inline and managed policies Remove unused permissions from a role View and roll back any IAM resource to its previous state within the past 90 days, as it was recorded in AWS Config Request policy changes for multiple roles in a single request Role recommendations: Noq will help you break up your over-privileged roles to least-privileged roles based on a user or group of users Credential Management Broker temporary, 1 hour credentials to any role within your AWS environment Worried about credentials expiring during a long-lived operation? Don't be! Weep (The CLI utility for ConsoleMe) is compatible with Noq. Weep emulates the ECS credential provider and EC2 instance metadata service on a user's system. Force 2-factor step-up authentication to protect sensitive roles or accounts IP restrict all brokered credentials based on your VPN IP space, and/or to the user's IP address 1-Click access to most cloud resources across your environment Role tags define which users and/or groups can have credentials for a role","title":"Home"},{"location":"#the-noq-platform","text":"","title":"The Noq Platform"},{"location":"#what-is-it-and-how-does-it-work","text":"The Noq platform is based on ConsoleMe , an open source project created and maintained by Noq's cofounder. Noq is a SaaS-based platform that enables cloud administrators and developers to manage AWS access and fine-grained permissions without requiring prior permissions knowledge or expertise. Noq provides the following features: Permissions Management and Request Framework An IAM Self-Service Wizard that lets users request IAM permissions in plain English, simplifying all AWS actions into CRUD operations that you can customize Generates cross-account resource policies automatically for supported resource types (Currently: IAM, S3, SQS, and SNS) Typeaheads on all known cloud resources, across your entire multi-account environment Automatically approves and applies low-risk permission requests, according to rules that you create Cloud administrators can create/clone IAM roles and natively manage IAM roles, users, inline/managed policies, S3 Buckets, SQS queues, and SNS topics across hundreds of accounts in a single interface. Coming Soon! View a minimized effective policy for a role, without needing to view all inline and managed policies Remove unused permissions from a role View and roll back any IAM resource to its previous state within the past 90 days, as it was recorded in AWS Config Request policy changes for multiple roles in a single request Role recommendations: Noq will help you break up your over-privileged roles to least-privileged roles based on a user or group of users Credential Management Broker temporary, 1 hour credentials to any role within your AWS environment Worried about credentials expiring during a long-lived operation? Don't be! Weep (The CLI utility for ConsoleMe) is compatible with Noq. Weep emulates the ECS credential provider and EC2 instance metadata service on a user's system. Force 2-factor step-up authentication to protect sensitive roles or accounts IP restrict all brokered credentials based on your VPN IP space, and/or to the user's IP address 1-Click access to most cloud resources across your environment Role tags define which users and/or groups can have credentials for a role","title":"What is it, and how does it work?"},{"location":"iam/","text":"Central Account Role Permissions Noq will always assume in to your central account role in order to access your environment. This is Noq's entrypoint in to your environment. As a security precaution, Noq assigns a random ExternalID to your tenant on Noq. We will always pass this ExternalId when assuming a role. If the ExternalId does not match, the assume role connection will not be permitted. Noq also has the capability to broker credentials to authorized users or groups for all other roles within your environment. To allow this, please enable credential brokering in the Settings page, and specify tags that Noq can use to identify the authorized users and groups allowed to access each role. The Central Role requires the following permissions: Permission Resource Purpose sts:AssumeRole ** Assume all Noq spoke roles across the customer's accounts. Assume all roles for the purpose of credential brokering (Note: This only works if the target roles allow the Central Role to call sts:AssumeRole and sts:TagSession within their Trust Policy.) sts:TagSession ** Allow Noq to pass session tags when performing a role assumption. Spoke Role Account Permissions Noq's spoke roles are assumed by the Noq central role to cache information about your accounts and cloud resources, and to update identity and resource policies. One spoke role should exist on each of your accounts, including the account that your central role resides on. Noq performs the following steps to cache IAM resources across your account: Assume Central Role with unique ExternalID Assume Spoke Role on the target account Use Spoke Role credentials to call IAM APIs to determine resources Permission Resource Purpose config:BatchGet* ** Retrieve AWS Config details for your resources ; Will allow policy rollback config:List* ** Retrieve information about AWS resources to list in a single source of truth config:Select* ** Query AWS Config ec2:describeregions ** Retrieve active regions for your AWS environment iam:AddRoleToInstanceProfile ** Add a role to an instance profile, used when creating/cloning roles iam:AttachRolePolicy ** Attach managed policies to IAM roles iam:AttachUserPolicy ** Attach managed policies to IAM users iam:CreateInstanceProfile ** Create an instance profile (We do this when creating or cloning roles) iam:CreateRole ** Create or clone an IAM role iam:DeleteAccessKey ** Delete an IAM access key during IAM user deletion iam:DeleteInstanceProfile ** Delete instance profiles during role deletion iam:DeleteRole ** Allows Noq to delete roles iam:DeletePolicy ** Delete managed policies iam:DeletePolicyVersion ** Delete a managed policy version, used when updating managed policies iam:DeleteRolePermissionsBoundary ** Remove a permissions boundary from a role iam:DeleteRolePolicy ** Remove an inline policy from a role iam:DeleteUser ** Allows Noq to delete users iam:DeleteUserPermissionsBoundary ** Allows Noq to remove a user's permission boundary iam:DeleteUserPolicy ** Allow Noq to delete User inline policies iam:DeleteVirtualMFADevice ** Used by Noq when deleting IAM users iam:DetachRolePolicy ** Allow Noq to remove managed policies from IAM roles iam:DetachUserPolicy ** Allow Noq to remove managed policies from IAM users iam:GenerateCredentialReport ** Generate credential usage report iam:GenerateOrganizationsAccessReport ** Generates a report for service last accessed data for Organizations. iam:GenerateServiceLastAccessedDetails ** Use Access Advisor to determine unused services for IAM roles and users iam:GetAccessKeyLastUsed ** Determine when an IAM access key was last used iam:GetAccountAuthorizationDetails ** Retrieve context about all IAM resources on the account. iam:GetAccountSummary ** Retrieves account status and quota details iam:GetCredentialReport ** Determine status of IAM credentials on an account iam:GetGroup ** Get an IAM group iam:GetGroupPolicy ** Get the policy for an IAM group iam:GetInstanceProfile ** Get details about an instance profile iam:GetPolicy ** Retrieve information about a manged policy iam:GetPolicyVersion ** Retrieve a specific version of an IAM managed policy iam:GetRole ** Get a role (Used for policy editing and self-service) iam:GetRolePolicy ** Get a role's inline policy (Used for policy editing and self-service) iam:GetServiceLastAccessedDetails ** Used for removing unused service permissions iam:GetServiceLastAccessedDetailsWithEntities ** Used for removing unused service permissions iam:GetUser ** Retrieve an IAM user for policy editing and self-service iam:GetUserPolicy ** Retrieve an IAM user inline policy for policy editing and self-service iam:ListAccessKeys ** List IAM user access keys iam:ListAccountAliases ** List account aliases for determining account name iam:ListAttachedRolePolicies ** Used for policy editing / self-service iam:ListAttachedUserPolicies ** Used for policy editing / self-service iam:ListEntitiesForPolicy ** Used for policy editing / self-service iam:ListGroupPolicies ** Used for policy editing / self-service iam:ListGroups ** Used for policy editing / self-service iam:ListGroupsForUser ** Used for policy editing / self-service iam:ListInstanceProfileTags ** Used for policy editing / self-service iam:ListInstanceProfiles ** Used for policy editing / self-service iam:ListInstanceProfilesForRole ** Used for policy editing / self-service iam:ListPolicies ** Used to cache managed policy names iam:ListPolicyTags ** Used for policy editing / self-service iam:ListPolicyVersions ** Used for policy editing / self-service iam:ListRolePolicies ** Used for policy editing / self-service iam:ListRoleTags ** Used for policy editing / self-service iam:ListRoles ** Used for policy editing / self-service iam:ListUserPolicies ** Used for policy editing / self-service iam:ListUserTags ** Used for policy editing / self-service iam:ListUsers ** Used for policy editing / self-service iam:PutRolePermissionsBoundary ** Used for policy editing / self-service iam:PutRolePolicy ** Used for policy editing / self-service iam:PutUserPermissionsBoundary ** Used for policy editing / self-service iam:PutUserPolicy ** Used for policy editing / self-service iam:RemoveRoleFromInstanceProfile ** Used when deleting roles iam:RemoveUserFromGroup ** Used when deleting users iam:SetDefaultPolicyVersion ** Used when updating managed policies iam:SimulateCustomPolicy ** Used when determining if an action is allowed iam:SimulatePrincipalPolicy ** Used when determining if an action is allowed iam:TagInstanceProfile ** Used when creating a role iam:TagPolicy ** Used for policy editing / self-service iam:TagRole ** Used for policy editing / self-service iam:TagUser ** Used for policy editing / self-service iam:UntagInstanceProfile ** Used when deleting a role iam:UntagPolicy ** Used for policy editing / self-service iam:UntagRole ** Used for policy editing / self-service iam:UntagUser ** Used for policy editing / self-service iam:UpdateAssumeRolePolicy ** Used for policy editing / self-service iam:UpdateRole ** Used for policy editing / self-service iam:UpdateRoleDescription ** Used for policy editing / self-service iam:UpdateUser ** Used for policy editing / self-service organizations:ListPolicies ** Used for describing/listing organization accounts and SCPs organizations:DescrbePolicy ** Used for describing/listing organization accounts and SCPs organizations:DescribeAccount ** Used for describing/listing organization accounts and SCPs s3:GetBucketLocation ** Retrieve region of your S3 buckets s3:GetBucketPolicy ** Retrieve information about your S3 buckets ; Enable modifying buckets s3:GetBucketTagging ** Used for policy editing / self-service s3:ListAllMyBuckets ** Cache all bucket ARNs for typeahead and policy editing s3:ListBucket ** Used for policy editing / self-service s3:PutBucketPolicy ** Used for policy editing / self-service s3:PutBucketTagging ** Used for policy editing / self-service sns:GetTopicAttributes ** Retrieve information about your SNS topics ; Enable modifying topics sns:ListTagsForResource ** Used for policy editing / self-service sns:ListTopics ** Policy editing, and global view of all SNs topics sns:SetTopicAttributes ** Used for policy editing / self-service sns:TagResource ** Used for policy editing / self-service sns:UnTagResource ** Used for policy editing / self-service sqs:GetQueueAttributes ** Retrieve information about your SQS queues ; Enable modifying queues sqs:GetQueueUrl ** Used in SNS policy editor sqs:ListQueues ** Used to provide global view of all SQS queues sqs:ListQueueTags ** Used for policy editing / self-service sqs:SetQueueAttributes ** Used for policy editing / self-service sqs:TagQueue ** Used for policy editing / self-service sqs:UntagQueue ** Used for policy editing / self-service","title":"IAM Permissions"},{"location":"tasks/","text":"Noq runs jobs periodically in your environment to cache your roles and cloud resources. Below is a list of tasks we run, their schedule, and description: Task Schedule Description Cache IAM Resources Every 45 Minutes Refreshes Noq's cache of all of your IAM resources across all accounts Cache Resources Table Every 30 Minutes Refreshes the /policies table Cache S3 buckets Every 45 Minutes Refreshes Noq's cache of all of your S3 buckets across all accounts Cache SQS queues Every 45 Minutes Refreshes Noq's cache of all of your SQS queues across all accounts Cache SNS Topics Eery 45 Minutes Refreshes Noq's cache of all of your SNS topics across all accounts Cache Resources from AWS Config Every 1 Hour Refreshes Noq's cache of all various AWS resource types from AWS Config Cache Cloudtrail Errors Every 1 Hour Refreshes Noq's cache of all recently Cloudtrail errors Cache Cloud Accounts Every 1 Hour/On Demand Refreshes Noq's database of all cloud accounts in your environment Generate and cache Credential Authorization Mapping Every 5 Minutes Generates a mapping of usernames/groups to IAM roles they are authorized to retrieve credentials for Cache SCPs Every 1 Hour Refreshes Noq's database of all service control policies across all configured AWS orgnazations in your environment Cache Resource Templates Every 30 Minutes Refreshes Noq's database of all Terraform templates from configured repos Cache Self-Service Typeahead Every 30 Minutes Refreshes Noq's cache of all resource typeaheads across the environment","title":"Tasks"},{"location":"features/credential_management/alfred_integration/","text":"For ease of role login, you can integrate Noq with Alfred, Albert, or other productivity tools by setting up a custom search engine. In Alfred: Go to Web Search -> \"Add Custom Search\" Fill in the appropriate attributes seen below. Replace with your noq tenant URL prefix.","title":"Alfred Integration"},{"location":"features/credential_management/aws_cli_credentials/","text":"Weep offers a number of ways to manage CLI credentials from Noq. Check out the open-source Weep documentation for more details. Challenge Authentication \u00b6 Weep authenticates to the Noq backend through a standalone challenge authentication response. The challenge authentication flow is as follows: Client sends a GET request to the Noq tenant's challenge endpoint. The server generates and stores a temporary token for the authentication request. A token is scoped to the username sent in the request and expires after a couple of minutes. Noq tells the client where the user should authenticate it in their browser (challenge_url), and where to poll (polling_url). Client starts polling the unauthenticated polling_url every couple of seconds until the token expires after a couple of minutes. The user is redirected to the Challenge Validator endpoint, which will authenticate them. After they've been successfully authenticated, the Noq tenant's backend will mark the user's request as successful in its cache. After the user has authenticated, the client (which is polling the challenge_poller endpoint every couple of seconds) should receive a success status with the super secret encoded JWT that it can use to authenticate the user for credential requests to the Noq tenant.","title":"AWS CLI Credentials"},{"location":"features/credential_management/aws_cli_credentials/#challenge-authentication","text":"Weep authenticates to the Noq backend through a standalone challenge authentication response. The challenge authentication flow is as follows: Client sends a GET request to the Noq tenant's challenge endpoint. The server generates and stores a temporary token for the authentication request. A token is scoped to the username sent in the request and expires after a couple of minutes. Noq tells the client where the user should authenticate it in their browser (challenge_url), and where to poll (polling_url). Client starts polling the unauthenticated polling_url every couple of seconds until the token expires after a couple of minutes. The user is redirected to the Challenge Validator endpoint, which will authenticate them. After they've been successfully authenticated, the Noq tenant's backend will mark the user's request as successful in its cache. After the user has authenticated, the client (which is polling the challenge_poller endpoint every couple of seconds) should receive a success status with the super secret encoded JWT that it can use to authenticate the user for credential requests to the Noq tenant.","title":"Challenge Authentication"},{"location":"features/credential_management/aws_console_temporary_credentials/","text":"Overview \u00b6 Noq can broker temporary sessions to the AWS console. After a user authenticates, Noq determines their users and groups from the configured Identity Provider. This could be Okta, Azure AD, Google, or any other OIDC/SAML compatible Identity Provider. These attributes are used to determine which roles the user is authorized to access. Noq can be used in a few different ways to determine what roles a user is allowed to access: Tag the IAM role with the names of the users or groups allowed to access the role (See getting_started/5_enable_credentail_brokering.md for more details. Specify a manual mapping of group/users -> roles in the /config endpoint. Here's an example configuration: group_mapping: groupa@example.com: roles: - arn:aws:iam::123456789012:role/roleA - arn:aws:iam::123456789012:role/roleB userb@example.com: roles: - arn:aws:iam::123456789012:role/roleA (TBD) Specify a Lambda function to invoke, which should return a mapping of roles -> group/users. (Let us know if you want this feature added!) Role Selection \u00b6 Noq's index page shows a list of roles that the current user is allowed to access across all of the organization's accounts. This could be hundreds or thousands of roles for a given user. Recent Roles \u00b6 On the left side of the page, we store the 5 most recent roles a user has logged in to. This enables them to quickly select the role they want to use if they are commonly logging in to the same roles.","title":"Overview"},{"location":"features/credential_management/aws_console_temporary_credentials/#overview","text":"Noq can broker temporary sessions to the AWS console. After a user authenticates, Noq determines their users and groups from the configured Identity Provider. This could be Okta, Azure AD, Google, or any other OIDC/SAML compatible Identity Provider. These attributes are used to determine which roles the user is authorized to access. Noq can be used in a few different ways to determine what roles a user is allowed to access: Tag the IAM role with the names of the users or groups allowed to access the role (See getting_started/5_enable_credentail_brokering.md for more details. Specify a manual mapping of group/users -> roles in the /config endpoint. Here's an example configuration: group_mapping: groupa@example.com: roles: - arn:aws:iam::123456789012:role/roleA - arn:aws:iam::123456789012:role/roleB userb@example.com: roles: - arn:aws:iam::123456789012:role/roleA (TBD) Specify a Lambda function to invoke, which should return a mapping of roles -> group/users. (Let us know if you want this feature added!)","title":"Overview"},{"location":"features/credential_management/aws_console_temporary_credentials/#role-selection","text":"Noq's index page shows a list of roles that the current user is allowed to access across all of the organization's accounts. This could be hundreds or thousands of roles for a given user.","title":"Role Selection"},{"location":"features/credential_management/aws_console_temporary_credentials/#recent-roles","text":"On the left side of the page, we store the 5 most recent roles a user has logged in to. This enables them to quickly select the role they want to use if they are commonly logging in to the same roles.","title":"Recent Roles"},{"location":"features/credential_management/chrome_integration/","text":"For ease of role login, you can integrate Noq with Chrome, Firefox, or other browsers tools by setting up a custom search engine. In Chrome: Go to Settings -> Manage search engines and site search Under \"Site Search\", click \"Add\" Fill in the appropriate attributes seen below. Replace with your noq tenant URL prefix.","title":"Chrome Integration"},{"location":"features/credential_management/ip_restricted_credentials/","text":"Credentials brokered by Noq can be IP-restricted, so they would only work from the Organization's network for VPN environment. To configure IP-restricted credentials, visit Settings -> Restrict brokered credentials to a set of IP ranges . Specify the desired IP ranges on the table.","title":"IP Restrictions"},{"location":"features/permissions_management_and_request_framework/autogenerate_x_account_permissions/","text":"Noq supports cross-account permissions for IAM Assume Role, S3, SQS, and SNS today. To see this in action, add two accounts to Noq and run through the self-service wizard. Select a role on one account, and an SQS/SNS/S3 or IAM resource on the second account, and run through the self-service review flow. After submitting your request, a cross-account resource policy should have been generated and added to the request.","title":"Autogenerate Cross Account Requests"},{"location":"features/permissions_management_and_request_framework/automatically_approve_low_risk_requests/","text":"Automatically approve and apply low-risk permission requests Example 1: Automatically approve all requests made by the networking team that are related to VPC, VPC Endpoints, or IPv6 Example 2: Automatically approve all READ requests that any employee makes to a list of S3 buckets. Example 3: Automatically approve all requests for new IAM roles as long as they don\u2019t mutate IAM Instructions are TBD.","title":"Automatically Approve Low-Risk Requests"},{"location":"features/permissions_management_and_request_framework/customizable_policy_requests/","text":"Cloud administrators can customize policy requests before approving and applying them","title":"Customize Policy Requests Before Approving"},{"location":"features/permissions_management_and_request_framework/permissions_are_crud/","text":"Simplifies permissions into CRUD operations. Don\u2019t like our defaults? Customize them to your needs. Example: Don\u2019t want your users to have sensitive permissions, like s3:PutObjectAcl when they request S3 Write Access? That\u2019s easy with Noq.","title":"Customizable CRUD Mapping for Permissions"},{"location":"features/permissions_management_and_request_framework/self_service_permissions/","text":"The Self-Service Permissions Wizard walks your users through the process of requesting permissions https://www.youtube.com/watch?v=fXNRYcNyw0c&t=830s","title":"Self-Service Permissions"},{"location":"features/permissions_management_and_request_framework/temporary_policy_requests/","text":"Noq supports requesting temporary IAM policies during a Self-Service request with the granularity of one day. All generated policies within a request will be expired on the date specified for expiration.","title":"Temporary Policy Requests"},{"location":"features/permissions_management_and_request_framework/typeaheads_across_known_resources/","text":"Noq leverages data from AWS Config to provide typeaheads on all known resources, across your entire AWS environment","title":"Typeaheads across all known resources"},{"location":"features/planned/2fa_step_up/","text":"Noq can perform 2-factor step-up authentication when a user attempts to retrieve credentials to a sensitive AWS account or a sensitive role. This is a security feature that helps prevent unauthorized access to AWS resources. Noq uses the Duo API to push a 2-factor step-up challenge to your user.","title":"2-Factor Step-Up"},{"location":"features/planned/automatic_permissions_generation/","text":"Noq plans to leverage Cloudtrail data to automatically generate policies based on access denied errors seen in Cloudtrail. Noq will then notify the user about the generated policy and give them the ability to request the policy. Stage two of this approach involves using Weep on the user's laptop to intercept AWS calls and automatically request policies to rectify access denied errors with more accuracy than what Cloudtrail provides.","title":"Automatic Permissions Generation"},{"location":"features/planned/breakglass_role_access/","text":"Breakglass role access would allow an organization to specify a set of groups that are allowed to \"break-glass\" in to a role. Users will be able to filter for \"Break-Glass\" roles in Noq's Role Selection page. When performing break-glass, the organization can require validation through a Duo-push, or approval via custom code invoked via a Lambda function.","title":"Breakglass Role Access"},{"location":"features/planned/decentralized_request_management/","text":"Different owners and policy approvers can be specified for different accounts within your environment. The application admin in Noq will be able to approve all policy requests. Otherwise, account owners can be specified for each account. They will receive policy requests and be responsible for approving them.","title":"Decentralized Request Management"},{"location":"features/planned/multi_role_wizard_selection/","text":"Request policy changes across multiple roles with a single request","title":"Multi-Role Self-Service"},{"location":"features/planned/multi_tag_wizard_request/","text":"Noq will support creating, deleting, or updating tags across multiple resources","title":"Self-Service Wizard for Tagging"},{"location":"features/planned/unused_permissions_removal/","text":"Noq leverages Access Advisor and Cloudtrail Logs (via Athena) to determine which resources have used which permissions. Noq will provide a least-privilege policy, along with instructions for applying the policy to end-users and cloud administrators.","title":"Unused Permissions Removal"},{"location":"features/resource_management/clone_role/","text":"Clone a role \u00b6 To clone a role as an administrator, visit Resources > Create Role , select Clone from existing role and fill out the required parameters.","title":"Clone Role"},{"location":"features/resource_management/clone_role/#clone-a-role","text":"To clone a role as an administrator, visit Resources > Create Role , select Clone from existing role and fill out the required parameters.","title":"Clone a role"},{"location":"features/resource_management/create_role/","text":"Create a blank role \u00b6","title":"Create Role"},{"location":"features/resource_management/create_role/#create-a-blank-role","text":"","title":"Create a blank role"},{"location":"getting_started/","text":"This section will walk you through the process of configuring and customizing Noq for your environment.","title":"Index"},{"location":"getting_started/1_connect_hub_account/","text":"Connect your AWS Hub Account \u00b6 Noq uses a hub-and-spoke approach to connect to your AWS environment. Noq will cache cloud resources, make policy changes, and provide credential brokering features using this approach. Your hub role is Noq's entry point to your AWS environment. Noq assumes this role with a unique external ID. Each AWS account with Noq enabled should have a spoke role that the hub role can assume. To use Noq, choose an AWS account where Noq's hub role is deployed. This can be any account in your AWS environment. Then follow the steps outlined below. Procedure \u00b6 1. Log in to the AWS Console \u00b6 Log in to the AWS Console of the account where you would like to deploy Noq's hub role. Note If you are experimenting with Noq for the first time, we recommend creating a dedicated account for Noq. Once you are confident that you want to use Noq more broadly you can deploy to other accounts in your organization. 2. Log in to Noq \u00b6 In the same browser where you are logged in to the AWS console, open a separate tab and log in to Noq. 3. Navigate to the Noq settings page \u00b6 From the Noq main menu, select Advanced > Settings . 4. Click Connect Hub Account \u00b6 From the Noq Settings page, click Connect Hub Account . 5. Click Execute CloudFormation \u00b6 Click Execute CloudFormation . This will open a browser tab in the CloudFormation user interface with a defined stack for creating Noq hub and spoke roles in your AWS account. 6. Create the Noq CloudFormation Stack \u00b6 Scroll to the bottom of the CloudFormation page. Click Create Stack . This will create hub and spoke roles on your AWS account and then notify Noq when the tasks have completed. 7. Wait for the CloudFormation tasks to finish \u00b6 Noq will verify the connection to your AWS account, deploy the hub and spoke roles, and begin to cache AWS resources from your account by invoking the appropriate tasks . Note See the AWS documentation for a list of supported AWS resource types . To view cached resources, select Resources > All Cloud Resources from the Noq main menu. After about 10 minutes, you should see AWS resources in your Noq account.","title":"Connect Your AWS Hub Account"},{"location":"getting_started/1_connect_hub_account/#connect-your-aws-hub-account","text":"Noq uses a hub-and-spoke approach to connect to your AWS environment. Noq will cache cloud resources, make policy changes, and provide credential brokering features using this approach. Your hub role is Noq's entry point to your AWS environment. Noq assumes this role with a unique external ID. Each AWS account with Noq enabled should have a spoke role that the hub role can assume. To use Noq, choose an AWS account where Noq's hub role is deployed. This can be any account in your AWS environment. Then follow the steps outlined below.","title":"Connect your AWS Hub Account"},{"location":"getting_started/1_connect_hub_account/#procedure","text":"","title":"Procedure"},{"location":"getting_started/1_connect_hub_account/#1-log-in-to-the-aws-console","text":"Log in to the AWS Console of the account where you would like to deploy Noq's hub role. Note If you are experimenting with Noq for the first time, we recommend creating a dedicated account for Noq. Once you are confident that you want to use Noq more broadly you can deploy to other accounts in your organization.","title":"1. Log in to the AWS Console"},{"location":"getting_started/1_connect_hub_account/#2-log-in-to-noq","text":"In the same browser where you are logged in to the AWS console, open a separate tab and log in to Noq.","title":"2. Log in to Noq"},{"location":"getting_started/1_connect_hub_account/#3-navigate-to-the-noq-settings-page","text":"From the Noq main menu, select Advanced > Settings .","title":"3. Navigate to the Noq settings page"},{"location":"getting_started/1_connect_hub_account/#4-click-connect-hub-account","text":"From the Noq Settings page, click Connect Hub Account .","title":"4. Click Connect Hub Account"},{"location":"getting_started/1_connect_hub_account/#5-click-execute-cloudformation","text":"Click Execute CloudFormation . This will open a browser tab in the CloudFormation user interface with a defined stack for creating Noq hub and spoke roles in your AWS account.","title":"5. Click Execute CloudFormation"},{"location":"getting_started/1_connect_hub_account/#6-create-the-noq-cloudformation-stack","text":"Scroll to the bottom of the CloudFormation page. Click Create Stack . This will create hub and spoke roles on your AWS account and then notify Noq when the tasks have completed.","title":"6. Create the Noq CloudFormation Stack"},{"location":"getting_started/1_connect_hub_account/#7-wait-for-the-cloudformation-tasks-to-finish","text":"Noq will verify the connection to your AWS account, deploy the hub and spoke roles, and begin to cache AWS resources from your account by invoking the appropriate tasks . Note See the AWS documentation for a list of supported AWS resource types . To view cached resources, select Resources > All Cloud Resources from the Noq main menu. After about 10 minutes, you should see AWS resources in your Noq account.","title":"7. Wait for the CloudFormation tasks to finish"},{"location":"getting_started/3_connect_spoke_accounts/","text":"Connect additional AWS Accounts \u00b6 After playing with self-service, you might want to connect additional accounts to Noq. Your spoke accounts consist of every account that you want to manage through Noq. Noq will access your spoke accounts through your hub account role. To add a spoke account, please follow the steps or video gudance below: Log in to the AWS Console of an account that you'd like Noq to be able to access. Visit Advanced -> Settings Click Connect Spoke Role Click Execute CloudFormation Run the CloudFormation Stack on the account. This will create a Spoke Role on the account, then notify Noq when it has completed. Wait a few minutes. Noq will verify the connection, add the Spoke role to your account, and begin to cache resources on the account by invoking the appropriate tasks . After about 10 minutes, you should see cloud resources in your account.","title":"Connect Additional Spoke Accounts"},{"location":"getting_started/3_connect_spoke_accounts/#connect-additional-aws-accounts","text":"After playing with self-service, you might want to connect additional accounts to Noq. Your spoke accounts consist of every account that you want to manage through Noq. Noq will access your spoke accounts through your hub account role. To add a spoke account, please follow the steps or video gudance below: Log in to the AWS Console of an account that you'd like Noq to be able to access. Visit Advanced -> Settings Click Connect Spoke Role Click Execute CloudFormation Run the CloudFormation Stack on the account. This will create a Spoke Role on the account, then notify Noq when it has completed. Wait a few minutes. Noq will verify the connection, add the Spoke role to your account, and begin to cache resources on the account by invoking the appropriate tasks . After about 10 minutes, you should see cloud resources in your account.","title":"Connect additional AWS Accounts"},{"location":"getting_started/4_update_account_names/","text":"Updating AWS Account Names \u00b6 Updating AWS Account names is a manual operation if Noq is not configured for your AWS Organizations master account. In order to update your Account Names, please follow the guidance below: Visit Advanced -> Config Find the account_ids_to_name configuration key Update the value of the account IDs to the appropriate name Wait a while (30 minutes to 1 hour) for your resource cache to update with the new names.","title":"Update Account Names"},{"location":"getting_started/4_update_account_names/#updating-aws-account-names","text":"Updating AWS Account names is a manual operation if Noq is not configured for your AWS Organizations master account. In order to update your Account Names, please follow the guidance below: Visit Advanced -> Config Find the account_ids_to_name configuration key Update the value of the account IDs to the appropriate name Wait a while (30 minutes to 1 hour) for your resource cache to update with the new names.","title":"Updating AWS Account Names"},{"location":"getting_started/5_enable_credential_brokering/","text":"Configure Credential Brokering \u00b6 Noq can broker AWS credentials to authorized users within your organization. To enable this feature, follow the procedure below. Procedure \u00b6 1. Navigate to the Settings page \u00b6 Select Advanced > Settings from the main Noq menu. 2. Enable credential brokering \u00b6 On the Settings page, scroll down to the Role Access Authorization section and enable credential brokering using the toggle switch. 3. Select tags to identify users and groups authorized to assume a role \u00b6 In the Role Access Authorization section of the Settings page, identify all tags by which you will label users and groups that are authorized to retrieve credentials for a role. You may use the default tags or define your own tags by clicking the New button. As an example, consider the noq_authorized and noq_authorized_cli tag settings depicted in the figure below. Users and groups specified in the value of the noq_authorized tag of a given IAM role will see that role in the Noq Role Access page. They will be able to use Weep (Noq's CLI utility) to retrieve credentials for that role. In addition, users and groups specified in the value of the noq_authorized_cli_only tag will be able to retrieve role credentials via Weep, but will not see the role listed on the Noq Role Access page. Next Steps \u00b6 See Authorize Users to Assume Roles to enable credential brokering for specific users and groups in your organization.","title":"Configure Credential Brokering"},{"location":"getting_started/5_enable_credential_brokering/#configure-credential-brokering","text":"Noq can broker AWS credentials to authorized users within your organization. To enable this feature, follow the procedure below.","title":"Configure Credential Brokering"},{"location":"getting_started/5_enable_credential_brokering/#procedure","text":"","title":"Procedure"},{"location":"getting_started/5_enable_credential_brokering/#1-navigate-to-the-settings-page","text":"Select Advanced > Settings from the main Noq menu.","title":"1. Navigate to the Settings page"},{"location":"getting_started/5_enable_credential_brokering/#2-enable-credential-brokering","text":"On the Settings page, scroll down to the Role Access Authorization section and enable credential brokering using the toggle switch.","title":"2. Enable credential brokering"},{"location":"getting_started/5_enable_credential_brokering/#3-select-tags-to-identify-users-and-groups-authorized-to-assume-a-role","text":"In the Role Access Authorization section of the Settings page, identify all tags by which you will label users and groups that are authorized to retrieve credentials for a role. You may use the default tags or define your own tags by clicking the New button. As an example, consider the noq_authorized and noq_authorized_cli tag settings depicted in the figure below. Users and groups specified in the value of the noq_authorized tag of a given IAM role will see that role in the Noq Role Access page. They will be able to use Weep (Noq's CLI utility) to retrieve credentials for that role. In addition, users and groups specified in the value of the noq_authorized_cli_only tag will be able to retrieve role credentials via Weep, but will not see the role listed on the Noq Role Access page.","title":"3. Select tags to identify users and groups authorized to assume a role"},{"location":"getting_started/5_enable_credential_brokering/#next-steps","text":"See Authorize Users to Assume Roles to enable credential brokering for specific users and groups in your organization.","title":"Next Steps"},{"location":"getting_started/6_automatically_update_trust_policies/","text":"Configure Automatic Updates to Trust Policies \u00b6 Users may retrieve credentials for authorized roles through Noq. To retrieve credentials, Noq will assume your hub role with an external ID that is unique to your company. From your hub role, Noq will attempt to assume the role requested by the user. If successful, Noq will return the assumed credentials to the user. Noq might be unable to assume the role requested by the user because your hub role is not authorized to perform sts:AssumeRole or sts:TagSession in the target role's trust policy. If you prefer, Noq can attempt to automatically update the trust policy of a role when it initially receives an Access Denied error. With this feature enabled, you do not need to update all of your roles manually. Important If you are using an infrastructure as code (IaC) approach to templatize your roles, we recommend that you update your IaC templates to give your Noq Hub role the ability to perform these actions. To enable this option, follow the steps in the procedure below. Procedure \u00b6 1. Navigate to the Update Configuration page \u00b6 Select Advanced > Config from the main Noq menu. 2. Enable Noq to automatically update trust policies \u00b6 Set the configuration key for aws.automatically_update_role_trust_policies to true . When finished, your Noq configuration file should include an entry similar to the following. aws: automatically_update_role_trust_policies: true See the figure below for an example of an updated configuration file. Warning Before updating your configuration file, check whether a top-level aws configuration key already exists. If your configuration file already includes an aws key, add or update automatically_update_role_trust_policies: true under that key.","title":"Configure Automatic Updates to Trust Policies"},{"location":"getting_started/6_automatically_update_trust_policies/#configure-automatic-updates-to-trust-policies","text":"Users may retrieve credentials for authorized roles through Noq. To retrieve credentials, Noq will assume your hub role with an external ID that is unique to your company. From your hub role, Noq will attempt to assume the role requested by the user. If successful, Noq will return the assumed credentials to the user. Noq might be unable to assume the role requested by the user because your hub role is not authorized to perform sts:AssumeRole or sts:TagSession in the target role's trust policy. If you prefer, Noq can attempt to automatically update the trust policy of a role when it initially receives an Access Denied error. With this feature enabled, you do not need to update all of your roles manually. Important If you are using an infrastructure as code (IaC) approach to templatize your roles, we recommend that you update your IaC templates to give your Noq Hub role the ability to perform these actions. To enable this option, follow the steps in the procedure below.","title":"Configure Automatic Updates to Trust Policies"},{"location":"getting_started/6_automatically_update_trust_policies/#procedure","text":"","title":"Procedure"},{"location":"getting_started/6_automatically_update_trust_policies/#1-navigate-to-the-update-configuration-page","text":"Select Advanced > Config from the main Noq menu.","title":"1. Navigate to the Update Configuration page"},{"location":"getting_started/6_automatically_update_trust_policies/#2-enable-noq-to-automatically-update-trust-policies","text":"Set the configuration key for aws.automatically_update_role_trust_policies to true . When finished, your Noq configuration file should include an entry similar to the following. aws: automatically_update_role_trust_policies: true See the figure below for an example of an updated configuration file. Warning Before updating your configuration file, check whether a top-level aws configuration key already exists. If your configuration file already includes an aws key, add or update automatically_update_role_trust_policies: true under that key.","title":"2. Enable Noq to automatically update trust policies"},{"location":"getting_started/7_enable_ip_restrictions/","text":"Set up IP Restrictions \u00b6 Do you want all credentials brokered by Noq to be IP-restricted, such that they only work within your corporate VPN IP space? If so, this option is for you. To configure IP restrictions, follow the steps below: Visit Advanced -> Settings Enable Restrict brokered credentials to a set of IP ranges Click Add CIDR Type in a CIDR to use for credential restriction, and click Submit Repeat this process for additional CIDRs. All credentials brokered by Noq for end-users will be IP restricted while retaining the ability for AWS to use the credentials on your behalf (I.E. CloudFormation, and a few other bespoke use cases).","title":"Enable IP Restrictions"},{"location":"getting_started/7_enable_ip_restrictions/#set-up-ip-restrictions","text":"Do you want all credentials brokered by Noq to be IP-restricted, such that they only work within your corporate VPN IP space? If so, this option is for you. To configure IP restrictions, follow the steps below: Visit Advanced -> Settings Enable Restrict brokered credentials to a set of IP ranges Click Add CIDR Type in a CIDR to use for credential restriction, and click Submit Repeat this process for additional CIDRs. All credentials brokered by Noq for end-users will be IP restricted while retaining the ability for AWS to use the credentials on your behalf (I.E. CloudFormation, and a few other bespoke use cases).","title":"Set up IP Restrictions"},{"location":"getting_started/8_configure_weep/","text":"Enable CLI Credential Brokering \u00b6 Weep is an open source CLI utility. It offers convenient ways to work with temporary AWS credentials. For example, you may use Weep to emulate the ECS credential provider and the instance metadata service. You can also use Weep to provide an endpoint for sourcing credentials via the AWS CLI credential_process config setting. Weep enables you to work with multiple sets of temporary credentials in parallel. It also supports long-lived operations that outlast the expiration time of the credentials. Weep was originally developed as part of the open source ConsoleMe project. See the ConsoleMe documentation for more information on Weep Procedure \u00b6 To enable CLI credential brokering in Noq via Weep you must enable challenge authentication mode. Challenge authentication allows Weep to securely authenticate to your tenant on Noq. For details on the challenge authentication flow over HTTPS see AWS CLI Credentials . To enable challenge authentication, follow the steps below. 1. Navigate to the Update Configuration page \u00b6 Select Advanced > Config from the main Noq menu. 2. Update the Noq configuration file \u00b6 Set the configuration key for auth.challenge_url.enabled to true . When finished, your Noq configuration file should include an entry similar to the following. auth: challenge_url: enabled: true 3. Click Save Configuration \u00b6 Click the Save Configuration button to commit the changes. Next Steps \u00b6 See Configure CLI Credential Brokering for instructions on how to download and configure weep for use with your CLI.","title":"Enable CLI Credential Brokering"},{"location":"getting_started/8_configure_weep/#enable-cli-credential-brokering","text":"Weep is an open source CLI utility. It offers convenient ways to work with temporary AWS credentials. For example, you may use Weep to emulate the ECS credential provider and the instance metadata service. You can also use Weep to provide an endpoint for sourcing credentials via the AWS CLI credential_process config setting. Weep enables you to work with multiple sets of temporary credentials in parallel. It also supports long-lived operations that outlast the expiration time of the credentials. Weep was originally developed as part of the open source ConsoleMe project. See the ConsoleMe documentation for more information on Weep","title":"Enable CLI Credential Brokering"},{"location":"getting_started/8_configure_weep/#procedure","text":"To enable CLI credential brokering in Noq via Weep you must enable challenge authentication mode. Challenge authentication allows Weep to securely authenticate to your tenant on Noq. For details on the challenge authentication flow over HTTPS see AWS CLI Credentials . To enable challenge authentication, follow the steps below.","title":"Procedure"},{"location":"getting_started/8_configure_weep/#1-navigate-to-the-update-configuration-page","text":"Select Advanced > Config from the main Noq menu.","title":"1. Navigate to the Update Configuration page"},{"location":"getting_started/8_configure_weep/#2-update-the-noq-configuration-file","text":"Set the configuration key for auth.challenge_url.enabled to true . When finished, your Noq configuration file should include an entry similar to the following. auth: challenge_url: enabled: true","title":"2. Update the Noq configuration file"},{"location":"getting_started/8_configure_weep/#3-click-save-configuration","text":"Click the Save Configuration button to commit the changes.","title":"3. Click Save Configuration"},{"location":"getting_started/8_configure_weep/#next-steps","text":"See Configure CLI Credential Brokering for instructions on how to download and configure weep for use with your CLI.","title":"Next Steps"},{"location":"getting_started/9_connect_eventbridge/","text":"UNDER CONSTRUCTION \u00b6 Noq can integrate with AWS CloudTrail via Event Bridge. It can generate naive policies from CloudTrail Access Deny errors, and update IAM role cache based IAM create / update events. If you're running Noq in a multi-account environment in a single AWS Organization, we recommend that you create an Event Bridge rule in each region of each of your accounts that will forward your CloudTrail data to a single region in a single account. The account that you choose to send this data to should be locked down, and only accessible by your cloud administrators. The Event Bus on your central account (The one where all of these logs will go to) should have a resource-based policy allowing all accounts within your organization to send events to it. Here's what that might look like: The rule on each region of each of your accounts should look similar to the below: As previously mentioned, Noq only processes Access Deny and Role Update log messages. On your central account, we need two different rules. One for each scenario. This first Event Bridge rule will help Noq to process AccessDenied / UnauthorizedOperation errors from CloudTrail by sending them to an SNS topic. An SQS queue is subscribed to this topic, and Noq has the ability to read this SQS queue. Alternatively, the target for the event bridge rule could just be an SQS queue that Noq has access to. Setting this up is an exercise for the reader. The second Event Bridge rule is needed for Noq to cache new or updated roles, as well as role authorization changes through tag updates, much quicker. The target can be an SNS topic, or an SQS queue. After the rules are configured and you are seeing messages in your SQS queues, we need to modify Noq's configuration and restart Noq's celery scheduler / worker. Add the following configuration, replacing the queue ARNs as appropriate. celery: cache_cloudtrail_denies: enabled: true trigger_credential_mapping_refresh_from_role_changes: enabled: true event_bridge: detect_role_changes_and_update_cache: queue_arn: arn:aws:sqs:{region}:{account_id}:noq-cloudtrail-role-events # assume_role: null <--- Optional role to assume to access the queue detect_cloudtrail_denies_and_update_cache: queue_arn: arn:aws:sqs:{region}:{account_id}:noq-cloudtrail-access-deny-events # assume_role: null <--- Optional role to assume to access the queue You should begin to see role updates much quicker, and will also see access denied messaging for your IAM principals","title":"Configure AWS Event Bridge"},{"location":"getting_started/9_connect_eventbridge/#under-construction","text":"Noq can integrate with AWS CloudTrail via Event Bridge. It can generate naive policies from CloudTrail Access Deny errors, and update IAM role cache based IAM create / update events. If you're running Noq in a multi-account environment in a single AWS Organization, we recommend that you create an Event Bridge rule in each region of each of your accounts that will forward your CloudTrail data to a single region in a single account. The account that you choose to send this data to should be locked down, and only accessible by your cloud administrators. The Event Bus on your central account (The one where all of these logs will go to) should have a resource-based policy allowing all accounts within your organization to send events to it. Here's what that might look like: The rule on each region of each of your accounts should look similar to the below: As previously mentioned, Noq only processes Access Deny and Role Update log messages. On your central account, we need two different rules. One for each scenario. This first Event Bridge rule will help Noq to process AccessDenied / UnauthorizedOperation errors from CloudTrail by sending them to an SNS topic. An SQS queue is subscribed to this topic, and Noq has the ability to read this SQS queue. Alternatively, the target for the event bridge rule could just be an SQS queue that Noq has access to. Setting this up is an exercise for the reader. The second Event Bridge rule is needed for Noq to cache new or updated roles, as well as role authorization changes through tag updates, much quicker. The target can be an SNS topic, or an SQS queue. After the rules are configured and you are seeing messages in your SQS queues, we need to modify Noq's configuration and restart Noq's celery scheduler / worker. Add the following configuration, replacing the queue ARNs as appropriate. celery: cache_cloudtrail_denies: enabled: true trigger_credential_mapping_refresh_from_role_changes: enabled: true event_bridge: detect_role_changes_and_update_cache: queue_arn: arn:aws:sqs:{region}:{account_id}:noq-cloudtrail-role-events # assume_role: null <--- Optional role to assume to access the queue detect_cloudtrail_denies_and_update_cache: queue_arn: arn:aws:sqs:{region}:{account_id}:noq-cloudtrail-access-deny-events # assume_role: null <--- Optional role to assume to access the queue You should begin to see role updates much quicker, and will also see access denied messaging for your IAM principals","title":"UNDER CONSTRUCTION"},{"location":"getting_started/access_aws_console_with_assumed_roles/","text":"Access AWS Console with Assumed Roles \u00b6 Noq enables you to log in to the AWS using any roles you have been authorized to assume via Noq credential brokering. See Enable Credential Brokering for details on setting up credential brokering as an administrator. Procedure \u00b6 1. Navigate to the Access page in Noq \u00b6 Select Access from the main Noq menu. If there are roles you are authorized to assume, you will see a page similar to the one depicted in the figure below. If you don't see any roles listed on your Access page, this might mean you are not authorized to assume any roles via credential brokering in Noq. 2. Select the role you want to assume \u00b6 From the list of roles on the Access page, click the Sign-In button for the role you want to assume in order to log in to the AWS console. 3. Use the AWS console as needed \u00b6 When you click a Sign-in button to assume an AWS role, Noq will log you in to the AWS console using this role. Navigate the AWS console to locate the service you need and perform the desired actions.","title":"Access AWS Console with Assumed Roles"},{"location":"getting_started/access_aws_console_with_assumed_roles/#access-aws-console-with-assumed-roles","text":"Noq enables you to log in to the AWS using any roles you have been authorized to assume via Noq credential brokering. See Enable Credential Brokering for details on setting up credential brokering as an administrator.","title":"Access AWS Console with Assumed Roles"},{"location":"getting_started/access_aws_console_with_assumed_roles/#procedure","text":"","title":"Procedure"},{"location":"getting_started/access_aws_console_with_assumed_roles/#1-navigate-to-the-access-page-in-noq","text":"Select Access from the main Noq menu. If there are roles you are authorized to assume, you will see a page similar to the one depicted in the figure below. If you don't see any roles listed on your Access page, this might mean you are not authorized to assume any roles via credential brokering in Noq.","title":"1. Navigate to the Access page in Noq"},{"location":"getting_started/access_aws_console_with_assumed_roles/#2-select-the-role-you-want-to-assume","text":"From the list of roles on the Access page, click the Sign-In button for the role you want to assume in order to log in to the AWS console.","title":"2. Select the role you want to assume"},{"location":"getting_started/access_aws_console_with_assumed_roles/#3-use-the-aws-console-as-needed","text":"When you click a Sign-in button to assume an AWS role, Noq will log you in to the AWS console using this role. Navigate the AWS console to locate the service you need and perform the desired actions.","title":"3. Use the AWS console as needed"},{"location":"getting_started/configure_cli_credential_brokering/","text":"Configure CLI Credential Brokering \u00b6 Weep is an open source CLI utility. It offers convenient ways to work with temporary AWS credentials. For example, you may use Weep to emulate the ECS credential provider and the instance metadata service. You can also use Weep to provide an endpoint for sourcing credentials via the AWS CLI credential_process config setting. Weep enables you to work with multiple sets of temporary credentials in parallel. It also supports long-lived operations that outlast the expiration time of the credentials. Weep was originally developed as part of the open source ConsoleMe project. See the ConsoleMe documentation for more information on Weep Prerequisites \u00b6 In order to use Weep, CLI Credential Brokering must be enabled in Noq by a system administrator. Procedure \u00b6 To download and configure Weep, follow the steps below. 1. Navigate to the Noq Downloads page \u00b6 Click the Downloads link in the Noq navigation panel. 2. Download Weep for your operating system. \u00b6 On the Downloads page, scroll down to see the list of installers. Download the Weep installer for your operating system. 3. Copy the setup commands from the Downloads page \u00b6 The Downloads page includes setup commands specific to your Noq user. Copy the setup commands. You'll use them in the next step of this procedure. 4. Paste and run the setup commands \u00b6 Paste the setup commands into your command-line environment and run them. These commands will create a weep directory and configuration file. 5. Optional: Copy weep to your $PATH \u00b6 If you downloaded a Linux/Mac binary, copy Weep to your $PATH. cd ~/Downloads cp ./weep /usr/local/bin/weep 6. Authenticate your Weep client in Noq \u00b6 Run the following command to authenticate your weep client in Noq. weep list For example, if you run weep list in a bash shell, the Noq user interface will prompt you to approve the request by the Weep client to authenticate using your Noq user role. 7. Approve the credentials request \u00b6 Approve the authentication request from the Weep client by clicking the Approve Credential Request button in the Noq Web user interface. Upon approving the credentials request, you should see a response that lists the roles you are authorized to assume. Next Steps \u00b6 Run weep --help to explore the functionality Weep provides. See the ConsoleMe documentation for more information on Weep.","title":"Configure CLI Credential Brokering"},{"location":"getting_started/configure_cli_credential_brokering/#configure-cli-credential-brokering","text":"Weep is an open source CLI utility. It offers convenient ways to work with temporary AWS credentials. For example, you may use Weep to emulate the ECS credential provider and the instance metadata service. You can also use Weep to provide an endpoint for sourcing credentials via the AWS CLI credential_process config setting. Weep enables you to work with multiple sets of temporary credentials in parallel. It also supports long-lived operations that outlast the expiration time of the credentials. Weep was originally developed as part of the open source ConsoleMe project. See the ConsoleMe documentation for more information on Weep","title":"Configure CLI Credential Brokering"},{"location":"getting_started/configure_cli_credential_brokering/#prerequisites","text":"In order to use Weep, CLI Credential Brokering must be enabled in Noq by a system administrator.","title":"Prerequisites"},{"location":"getting_started/configure_cli_credential_brokering/#procedure","text":"To download and configure Weep, follow the steps below.","title":"Procedure"},{"location":"getting_started/configure_cli_credential_brokering/#1-navigate-to-the-noq-downloads-page","text":"Click the Downloads link in the Noq navigation panel.","title":"1. Navigate to the Noq Downloads page"},{"location":"getting_started/configure_cli_credential_brokering/#2-download-weep-for-your-operating-system","text":"On the Downloads page, scroll down to see the list of installers. Download the Weep installer for your operating system.","title":"2. Download Weep for your operating system."},{"location":"getting_started/configure_cli_credential_brokering/#3-copy-the-setup-commands-from-the-downloads-page","text":"The Downloads page includes setup commands specific to your Noq user. Copy the setup commands. You'll use them in the next step of this procedure.","title":"3. Copy the setup commands from the Downloads page"},{"location":"getting_started/configure_cli_credential_brokering/#4-paste-and-run-the-setup-commands","text":"Paste the setup commands into your command-line environment and run them. These commands will create a weep directory and configuration file.","title":"4. Paste and run the setup commands"},{"location":"getting_started/configure_cli_credential_brokering/#5-optional-copy-weep-to-your-path","text":"If you downloaded a Linux/Mac binary, copy Weep to your $PATH. cd ~/Downloads cp ./weep /usr/local/bin/weep","title":"5. Optional: Copy weep to your $PATH"},{"location":"getting_started/configure_cli_credential_brokering/#6-authenticate-your-weep-client-in-noq","text":"Run the following command to authenticate your weep client in Noq. weep list For example, if you run weep list in a bash shell, the Noq user interface will prompt you to approve the request by the Weep client to authenticate using your Noq user role.","title":"6. Authenticate your Weep client in Noq"},{"location":"getting_started/configure_cli_credential_brokering/#7-approve-the-credentials-request","text":"Approve the authentication request from the Weep client by clicking the Approve Credential Request button in the Noq Web user interface. Upon approving the credentials request, you should see a response that lists the roles you are authorized to assume.","title":"7. Approve the credentials request"},{"location":"getting_started/configure_cli_credential_brokering/#next-steps","text":"Run weep --help to explore the functionality Weep provides. See the ConsoleMe documentation for more information on Weep.","title":"Next Steps"},{"location":"getting_started/enable_users_to_assume_roles/","text":"Authorize Users to Assume Roles \u00b6 You may enable users and groups to assume AWS roles using Noq self-service controls. To do this, follow the steps in the procedure below to tag AWS roles with a user or group defined in your identify provider. You will use the Noq user interface to update the policy for a role with one or more new tags. After a role tag is updated, it might take 1-2 minutes for the role to be available to users for whom you have enabled access. Prerequites \u00b6 Before you can authorize users and groups to assume AWS roles, you must follow the steps in the Configure Credential Brokering procedure. Please ensure you have completed that procedure before continuing. Procedure \u00b6 1. Navigate to All Cloud Resources \u00b6 Select Resources > All Cloud Resources from the Noq main menu. You should then see a page similar to the following. 2. Optional: Filter resources to find the role you want to enable \u00b6 In the Resource search box, begin typing the name of the role you want to enable for one or more users. This will filter the list of resources to just those matching the string you enter. 3. Select the role you want to enable \u00b6 Select the role you want to enable from the list of resources. 4. Select tags from the Edit Policy view \u00b6 From the Edit Policy view, click the Tags tab. This will enable you to edit tags for the role. 5. Click the Create New Tag button \u00b6 6. Add a tag authorizing a user or group who can assume the role \u00b6 In Configure Credential Brokering you set up one or more keys to use in brokering roles to users and groups. Use one or more of those keys here to enable users to assume the role. Enter noq_authorized or another key you have configured for credential brokering as the key for the new tag. Enter the user or group name as the value for the new tag. Click the Add button. 7. Optional: Add tags for additional users or group who can assume the role \u00b6 Repeat step 6 for all users you want to authorize to assume the role. 8. Click Save to update the policy for the role \u00b6 9. Enter a justification and expiration \u00b6 Describe why you are authorizing these users and groups you've identified to assume the role. You may also enter an expiration date for credential brokering if desired. Next Steps \u00b6 After Noq propagates the policy changes, authorized users will see the role in the list of roles they can assume using Noq.","title":"Authorize Users to Assume Roles"},{"location":"getting_started/enable_users_to_assume_roles/#authorize-users-to-assume-roles","text":"You may enable users and groups to assume AWS roles using Noq self-service controls. To do this, follow the steps in the procedure below to tag AWS roles with a user or group defined in your identify provider. You will use the Noq user interface to update the policy for a role with one or more new tags. After a role tag is updated, it might take 1-2 minutes for the role to be available to users for whom you have enabled access.","title":"Authorize Users to Assume Roles"},{"location":"getting_started/enable_users_to_assume_roles/#prerequites","text":"Before you can authorize users and groups to assume AWS roles, you must follow the steps in the Configure Credential Brokering procedure. Please ensure you have completed that procedure before continuing.","title":"Prerequites"},{"location":"getting_started/enable_users_to_assume_roles/#procedure","text":"","title":"Procedure"},{"location":"getting_started/enable_users_to_assume_roles/#1-navigate-to-all-cloud-resources","text":"Select Resources > All Cloud Resources from the Noq main menu. You should then see a page similar to the following.","title":"1. Navigate to All Cloud Resources"},{"location":"getting_started/enable_users_to_assume_roles/#2-optional-filter-resources-to-find-the-role-you-want-to-enable","text":"In the Resource search box, begin typing the name of the role you want to enable for one or more users. This will filter the list of resources to just those matching the string you enter.","title":"2. Optional: Filter resources to find the role you want to enable"},{"location":"getting_started/enable_users_to_assume_roles/#3-select-the-role-you-want-to-enable","text":"Select the role you want to enable from the list of resources.","title":"3. Select the role you want to enable"},{"location":"getting_started/enable_users_to_assume_roles/#4-select-tags-from-the-edit-policy-view","text":"From the Edit Policy view, click the Tags tab. This will enable you to edit tags for the role.","title":"4. Select tags from the Edit Policy view"},{"location":"getting_started/enable_users_to_assume_roles/#5-click-the-create-new-tag-button","text":"","title":"5. Click the Create New Tag button"},{"location":"getting_started/enable_users_to_assume_roles/#6-add-a-tag-authorizing-a-user-or-group-who-can-assume-the-role","text":"In Configure Credential Brokering you set up one or more keys to use in brokering roles to users and groups. Use one or more of those keys here to enable users to assume the role. Enter noq_authorized or another key you have configured for credential brokering as the key for the new tag. Enter the user or group name as the value for the new tag. Click the Add button.","title":"6. Add a tag authorizing a user or group who can assume the role"},{"location":"getting_started/enable_users_to_assume_roles/#7-optional-add-tags-for-additional-users-or-group-who-can-assume-the-role","text":"Repeat step 6 for all users you want to authorize to assume the role.","title":"7. Optional: Add tags for additional users or group who can assume the role"},{"location":"getting_started/enable_users_to_assume_roles/#8-click-save-to-update-the-policy-for-the-role","text":"","title":"8. Click Save to update the policy for the role"},{"location":"getting_started/enable_users_to_assume_roles/#9-enter-a-justification-and-expiration","text":"Describe why you are authorizing these users and groups you've identified to assume the role. You may also enter an expiration date for credential brokering if desired.","title":"9. Enter a justification and expiration"},{"location":"getting_started/enable_users_to_assume_roles/#next-steps","text":"After Noq propagates the policy changes, authorized users will see the role in the list of roles they can assume using Noq.","title":"Next Steps"},{"location":"getting_started/self_serve_permissions/","text":"Self-Service Permissions \u00b6 You may request permissions to access AWS resources in Noq using the self-service permissions user interface. With this interface you specify the role you want to add permissions to, along with the resources you need to access and desired permissions. You may also specify an expiration date for the additonal permissions you request. Procedure \u00b6 1. Navigate to Self-Service Permissions \u00b6 Select Resources > Self-Service Permissions from the main Noq menu. 2. Select a role \u00b6 Identify the role to which you want to add permissions by typing the first few characters of the role identifier and then selecting the desired role from the typeahead dropdown that appears. Note If no roles appear in the typeahead dropdown as you type, Noq may not have finished caching resources from your account. 3. Optional: Add an expiration date to create temporary permissions \u00b6 You may make the added permissions temporary by selecting an expiration date. Note This setting is optional. 4. Click the Next button \u00b6 When you've finished with the Select Role screen, click the Next button to advance to the Modify Policy screen. 5. Select the resource type \u00b6 Select the resource type for which you'd like to add permissions. 6. Select the resource identifier \u00b6 Identify the resource for which you want to add permissions by typing the first few characters of the resource identifier and then selecting the resource from the typeahead dropdown that appears. 7. Add desired permissions \u00b6 Select the permissions you'd like to add from the dropdown. You may add multiple permissions from this dropdown. 8. Click the Add Permission button \u00b6 Click the Add Permission button to update the policy with the new permissions you've selected. 9. Optional: Edit the generated policy \u00b6 If desired, you may view and edit the generated policy by clicking on the Advanced Editor link. Edit the policy as desired to suit your permissions request. 10. Click the Next button \u00b6 When you've finished with the Modify Policy screen, click the Next button to advance to the Review and Submit screen. 11. Review your changes \u00b6 Review your policy changes in the editor. You may edit your changes directly in the editor or click the Go Back button to revise your changes. 12. Enter a justification and submit for review \u00b6 Enter a justification for the additional permissions you are requesting, then click the Submit for Review button. Next Steps \u00b6 Check the status of your request. You may view all your policy requests by selecting Resources > All Policy Requests from the main Noq menu. Click the request id to view the details and status of the request.","title":"Self-Service Permissions"},{"location":"getting_started/self_serve_permissions/#self-service-permissions","text":"You may request permissions to access AWS resources in Noq using the self-service permissions user interface. With this interface you specify the role you want to add permissions to, along with the resources you need to access and desired permissions. You may also specify an expiration date for the additonal permissions you request.","title":"Self-Service Permissions"},{"location":"getting_started/self_serve_permissions/#procedure","text":"","title":"Procedure"},{"location":"getting_started/self_serve_permissions/#1-navigate-to-self-service-permissions","text":"Select Resources > Self-Service Permissions from the main Noq menu.","title":"1. Navigate to Self-Service Permissions"},{"location":"getting_started/self_serve_permissions/#2-select-a-role","text":"Identify the role to which you want to add permissions by typing the first few characters of the role identifier and then selecting the desired role from the typeahead dropdown that appears. Note If no roles appear in the typeahead dropdown as you type, Noq may not have finished caching resources from your account.","title":"2. Select a role"},{"location":"getting_started/self_serve_permissions/#3-optional-add-an-expiration-date-to-create-temporary-permissions","text":"You may make the added permissions temporary by selecting an expiration date. Note This setting is optional.","title":"3. Optional: Add an expiration date to create temporary permissions"},{"location":"getting_started/self_serve_permissions/#4-click-the-next-button","text":"When you've finished with the Select Role screen, click the Next button to advance to the Modify Policy screen.","title":"4. Click the Next button"},{"location":"getting_started/self_serve_permissions/#5-select-the-resource-type","text":"Select the resource type for which you'd like to add permissions.","title":"5. Select the resource type"},{"location":"getting_started/self_serve_permissions/#6-select-the-resource-identifier","text":"Identify the resource for which you want to add permissions by typing the first few characters of the resource identifier and then selecting the resource from the typeahead dropdown that appears.","title":"6. Select the resource identifier"},{"location":"getting_started/self_serve_permissions/#7-add-desired-permissions","text":"Select the permissions you'd like to add from the dropdown. You may add multiple permissions from this dropdown.","title":"7. Add desired permissions"},{"location":"getting_started/self_serve_permissions/#8-click-the-add-permission-button","text":"Click the Add Permission button to update the policy with the new permissions you've selected.","title":"8. Click the Add Permission button"},{"location":"getting_started/self_serve_permissions/#9-optional-edit-the-generated-policy","text":"If desired, you may view and edit the generated policy by clicking on the Advanced Editor link. Edit the policy as desired to suit your permissions request.","title":"9. Optional: Edit the generated policy"},{"location":"getting_started/self_serve_permissions/#10-click-the-next-button","text":"When you've finished with the Modify Policy screen, click the Next button to advance to the Review and Submit screen.","title":"10. Click the Next button"},{"location":"getting_started/self_serve_permissions/#11-review-your-changes","text":"Review your policy changes in the editor. You may edit your changes directly in the editor or click the Go Back button to revise your changes.","title":"11. Review your changes"},{"location":"getting_started/self_serve_permissions/#12-enter-a-justification-and-submit-for-review","text":"Enter a justification for the additional permissions you are requesting, then click the Submit for Review button.","title":"12. Enter a justification and submit for review"},{"location":"getting_started/self_serve_permissions/#next-steps","text":"Check the status of your request. You may view all your policy requests by selecting Resources > All Policy Requests from the main Noq menu. Click the request id to view the details and status of the request.","title":"Next Steps"},{"location":"swagger/swagger/","text":"const ui = SwaggerUIBundle({ url: 'https://noq-docs-public.s3.us-west-2.amazonaws.com/swagger/swagger.yaml', dom_id: '#swagger-ui', })","title":"Swagger Documentation"}]}