{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"The Noq Platform \u00b6 What is it, and how does it work? \u00b6 The Noq platform is based on ConsoleMe , an open source project created and maintained by Noq's cofounder. Noq is a SaaS-based platform that enables cloud administrators and developers to manage AWS access and fine-grained permissions without requiring prior permissions knowledge or expertise. Noq provides the following features: Permissions Management and Request Framework An IAM Self-Service Wizard that lets users request IAM permissions in plain English, simplifying all AWS actions into CRUD operations that you can customize Generates cross-account resource policies automatically for supported resource types (Currently: IAM, S3, SQS, and SNS) Typeaheads on all known cloud resources, across your entire multi-account environment Automatically approves and applies low-risk permission requests, according to rules that you create Cloud administrators can create/clone IAM roles and natively manage IAM roles, users, inline/managed policies, S3 Buckets, SQS queues, and SNS topics across hundreds of accounts in a single interface. Coming Soon! View a minimized effective policy for a role, without needing to view all inline and managed policies Remove unused permissions from a role View and roll back any IAM resource to its previous state within the past 90 days, as it was recorded in AWS Config Request policy changes for multiple roles in a single request Role recommendations: Noq will help you break up your over-privileged roles to least-privileged roles based on a user or group of users Credential Management Broker temporary, 1 hour credentials to any role within your AWS environment Worried about credentials expiring during a long-lived operation? Don't be! Weep (The CLI utility for ConsoleMe) is compatible with Noq. Weep emulates the ECS credential provider and EC2 instance metadata service on a user's system. Force 2-factor step-up authentication to protect sensitive roles or accounts IP restrict all brokered credentials based on your VPN IP space, and/or to the user's IP address 1-Click access to most cloud resources across your environment Role tags define which users and/or groups can have credentials for a role","title":"Home"},{"location":"#the-noq-platform","text":"","title":"The Noq Platform"},{"location":"#what-is-it-and-how-does-it-work","text":"The Noq platform is based on ConsoleMe , an open source project created and maintained by Noq's cofounder. Noq is a SaaS-based platform that enables cloud administrators and developers to manage AWS access and fine-grained permissions without requiring prior permissions knowledge or expertise. Noq provides the following features: Permissions Management and Request Framework An IAM Self-Service Wizard that lets users request IAM permissions in plain English, simplifying all AWS actions into CRUD operations that you can customize Generates cross-account resource policies automatically for supported resource types (Currently: IAM, S3, SQS, and SNS) Typeaheads on all known cloud resources, across your entire multi-account environment Automatically approves and applies low-risk permission requests, according to rules that you create Cloud administrators can create/clone IAM roles and natively manage IAM roles, users, inline/managed policies, S3 Buckets, SQS queues, and SNS topics across hundreds of accounts in a single interface. Coming Soon! View a minimized effective policy for a role, without needing to view all inline and managed policies Remove unused permissions from a role View and roll back any IAM resource to its previous state within the past 90 days, as it was recorded in AWS Config Request policy changes for multiple roles in a single request Role recommendations: Noq will help you break up your over-privileged roles to least-privileged roles based on a user or group of users Credential Management Broker temporary, 1 hour credentials to any role within your AWS environment Worried about credentials expiring during a long-lived operation? Don't be! Weep (The CLI utility for ConsoleMe) is compatible with Noq. Weep emulates the ECS credential provider and EC2 instance metadata service on a user's system. Force 2-factor step-up authentication to protect sensitive roles or accounts IP restrict all brokered credentials based on your VPN IP space, and/or to the user's IP address 1-Click access to most cloud resources across your environment Role tags define which users and/or groups can have credentials for a role","title":"What is it, and how does it work?"},{"location":"iam/","text":"Central Account Role Permissions Noq will always assume in to your central account role in order to access your environment. This is Noq's entrypoint in to your environment. As a security precaution, Noq assigns a random ExternalID to your tenant on Noq. We will always pass this ExternalId when assuming a role. If the ExternalId does not match, the assume role connection will not be permitted. Noq also has the capability to broker credentials to authorized users or groups for all other roles within your environment. To allow this, please enable credential brokering in the Settings page, and specify tags that Noq can use to identify the authorized users and groups allowed to access each role. The Central Role requires the following permissions: Permission Resource Purpose sts:AssumeRole ** Assume all Noq spoke roles across the customer's accounts. Assume all roles for the purpose of credential brokering (Note: This only works if the target roles allow the Central Role to call sts:AssumeRole and sts:TagSession within their Trust Policy.) sts:TagSession ** Allow Noq to pass session tags when performing a role assumption. Spoke Role Account Permissions Noq's spoke roles are assumed by the Noq central role to cache information about your accounts and cloud resources, and to update identity and resource policies. One spoke role should exist on each of your accounts, including the account that your central role resides on. Noq performs the following steps to cache IAM resources across your account: Assume Central Role with unique ExternalID Assume Spoke Role on the target account Use Spoke Role credentials to call IAM APIs to determine resources Permission Resource Purpose config:BatchGet* ** Retrieve AWS Config details for your resources ; Will allow policy rollback config:List* ** Retrieve information about AWS resources to list in a single source of truth config:Select* ** Query AWS Config ec2:describeregions ** Retrieve active regions for your AWS environment iam:AddRoleToInstanceProfile ** Add a role to an instance profile, used when creating/cloning roles iam:AttachRolePolicy ** Attach managed policies to IAM roles iam:AttachUserPolicy ** Attach managed policies to IAM users iam:CreateInstanceProfile ** Create an instance profile (We do this when creating or cloning roles) iam:CreateRole ** Create or clone an IAM role iam:DeleteAccessKey ** Delete an IAM access key during IAM user deletion iam:DeleteInstanceProfile ** Delete instance profiles during role deletion iam:DeleteRole ** Allows Noq to delete roles iam:DeletePolicy ** Delete managed policies iam:DeletePolicyVersion ** Delete a managed policy version, used when updating managed policies iam:DeleteRolePermissionsBoundary ** Remove a permissions boundary from a role iam:DeleteRolePolicy ** Remove an inline policy from a role iam:DeleteUser ** Allows Noq to delete users iam:DeleteUserPermissionsBoundary ** Allows Noq to remove a user's permission boundary iam:DeleteUserPolicy ** Allow Noq to delete User inline policies iam:DeleteVirtualMFADevice ** Used by Noq when deleting IAM users iam:DetachRolePolicy ** Allow Noq to remove managed policies from IAM roles iam:DetachUserPolicy ** Allow Noq to remove managed policies from IAM users iam:GenerateCredentialReport ** Generate credential usage report iam:GenerateOrganizationsAccessReport ** Generates a report for service last accessed data for Organizations. iam:GenerateServiceLastAccessedDetails ** Use Access Advisor to determine unused services for IAM roles and users iam:GetAccessKeyLastUsed ** Determine when an IAM access key was last used iam:GetAccountAuthorizationDetails ** Retrieve context about all IAM resources on the account. iam:GetAccountSummary ** Retrieves account status and quota details iam:GetCredentialReport ** Determine status of IAM credentials on an account iam:GetGroup ** Get an IAM group iam:GetGroupPolicy ** Get the policy for an IAM group iam:GetInstanceProfile ** Get details about an instance profile iam:GetPolicy ** Retrieve information about a manged policy iam:GetPolicyVersion ** Retrieve a specific version of an IAM managed policy iam:GetRole ** Get a role (Used for policy editing and self-service) iam:GetRolePolicy ** Get a role's inline policy (Used for policy editing and self-service) iam:GetServiceLastAccessedDetails ** Used for removing unused service permissions iam:GetServiceLastAccessedDetailsWithEntities ** Used for removing unused service permissions iam:GetUser ** Retrieve an IAM user for policy editing and self-service iam:GetUserPolicy ** Retrieve an IAM user inline policy for policy editing and self-service iam:ListAccessKeys ** List IAM user access keys iam:ListAccountAliases ** List account aliases for determining account name iam:ListAttachedRolePolicies ** Used for policy editing / self-service iam:ListAttachedUserPolicies ** Used for policy editing / self-service iam:ListEntitiesForPolicy ** Used for policy editing / self-service iam:ListGroupPolicies ** Used for policy editing / self-service iam:ListGroups ** Used for policy editing / self-service iam:ListGroupsForUser ** Used for policy editing / self-service iam:ListInstanceProfileTags ** Used for policy editing / self-service iam:ListInstanceProfiles ** Used for policy editing / self-service iam:ListInstanceProfilesForRole ** Used for policy editing / self-service iam:ListPolicies ** Used to cache managed policy names iam:ListPolicyTags ** Used for policy editing / self-service iam:ListPolicyVersions ** Used for policy editing / self-service iam:ListRolePolicies ** Used for policy editing / self-service iam:ListRoleTags ** Used for policy editing / self-service iam:ListRoles ** Used for policy editing / self-service iam:ListUserPolicies ** Used for policy editing / self-service iam:ListUserTags ** Used for policy editing / self-service iam:ListUsers ** Used for policy editing / self-service iam:PutRolePermissionsBoundary ** Used for policy editing / self-service iam:PutRolePolicy ** Used for policy editing / self-service iam:PutUserPermissionsBoundary ** Used for policy editing / self-service iam:PutUserPolicy ** Used for policy editing / self-service iam:RemoveRoleFromInstanceProfile ** Used when deleting roles iam:RemoveUserFromGroup ** Used when deleting users iam:SetDefaultPolicyVersion ** Used when updating managed policies iam:SimulateCustomPolicy ** Used when determining if an action is allowed iam:SimulatePrincipalPolicy ** Used when determining if an action is allowed iam:TagInstanceProfile ** Used when creating a role iam:TagPolicy ** Used for policy editing / self-service iam:TagRole ** Used for policy editing / self-service iam:TagUser ** Used for policy editing / self-service iam:UntagInstanceProfile ** Used when deleting a role iam:UntagPolicy ** Used for policy editing / self-service iam:UntagRole ** Used for policy editing / self-service iam:UntagUser ** Used for policy editing / self-service iam:UpdateAssumeRolePolicy ** Used for policy editing / self-service iam:UpdateRole ** Used for policy editing / self-service iam:UpdateRoleDescription ** Used for policy editing / self-service iam:UpdateUser ** Used for policy editing / self-service organizations:ListPolicies ** Used for describing/listing organization accounts and SCPs organizations:DescrbePolicy ** Used for describing/listing organization accounts and SCPs organizations:DescribeAccount ** Used for describing/listing organization accounts and SCPs s3:GetBucketLocation ** Retrieve region of your S3 buckets s3:GetBucketPolicy ** Retrieve information about your S3 buckets ; Enable modifying buckets s3:GetBucketTagging ** Used for policy editing / self-service s3:ListAllMyBuckets ** Cache all bucket ARNs for typeahead and policy editing s3:ListBucket ** Used for policy editing / self-service s3:PutBucketPolicy ** Used for policy editing / self-service s3:PutBucketTagging ** Used for policy editing / self-service sns:GetTopicAttributes ** Retrieve information about your SNS topics ; Enable modifying topics sns:ListTagsForResource ** Used for policy editing / self-service sns:ListTopics ** Policy editing, and global view of all SNs topics sns:SetTopicAttributes ** Used for policy editing / self-service sns:TagResource ** Used for policy editing / self-service sns:UnTagResource ** Used for policy editing / self-service sqs:GetQueueAttributes ** Retrieve information about your SQS queues ; Enable modifying queues sqs:GetQueueUrl ** Used in SNS policy editor sqs:ListQueues ** Used to provide global view of all SQS queues sqs:ListQueueTags ** Used for policy editing / self-service sqs:SetQueueAttributes ** Used for policy editing / self-service sqs:TagQueue ** Used for policy editing / self-service sqs:UntagQueue ** Used for policy editing / self-service","title":"IAM Permissions"},{"location":"tasks/","text":"Noq runs jobs periodically in your environment to cache your roles and cloud resources. Below is a list of tasks we run, their schedule, and description: Task Schedule Description Cache IAM Resources Every 45 Minutes Refreshes Noq's cache of all of your IAM resources across all accounts Cache Resources Table Every 30 Minutes Refreshes the /policies table Cache S3 buckets Every 45 Minutes Refreshes Noq's cache of all of your S3 buckets across all accounts Cache SQS queues Every 45 Minutes Refreshes Noq's cache of all of your SQS queues across all accounts Cache SNS Topics Eery 45 Minutes Refreshes Noq's cache of all of your SNS topics across all accounts Cache Resources from AWS Config Every 1 Hour Refreshes Noq's cache of all various AWS resource types from AWS Config Cache Cloudtrail Errors Every 1 Hour Refreshes Noq's cache of all recently Cloudtrail errors Cache Cloud Accounts Every 1 Hour/On Demand Refreshes Noq's database of all cloud accounts in your environment Generate and cache Credential Authorization Mapping Every 5 Minutes Generates a mapping of usernames/groups to IAM roles they are authorized to retrieve credentials for Cache SCPs Every 1 Hour Refreshes Noq's database of all service control policies across all configured AWS orgnazations in your environment Cache Resource Templates Every 30 Minutes Refreshes Noq's database of all Terraform templates from configured repos Cache Self-Service Typeahead Every 30 Minutes Refreshes Noq's cache of all resource typeaheads across the environment","title":"Tasks"},{"location":"features/credential_management/alfred_integration/","text":"For ease of role login, you can integrate Noq with Alfred, Albert, or other productivity tools by setting up a custom search engine. In Alfred: Go to Web Search -> \"Add Custom Search\" Fill in the appropriate attributes seen below. Replace with your noq tenant URL prefix.","title":"Alfred Integration"},{"location":"features/credential_management/aws_cli_credentials/","text":"Weep offers a number of ways to manage CLI credentials from Noq. Check out the open-source Weep documentation for more details. Challenge Authentication \u00b6 Weep authenticates to the Noq backend through a standalone challenge authentication response. The challenge authentication flow is as follows: Client sends a GET request to the Noq tenant's challenge endpoint. The server generates and stores a temporary token for the authentication request. A token is scoped to the username sent in the request and expires after a couple of minutes. Noq tells the client where the user should authenticate it in their browser (challenge_url), and where to poll (polling_url). Client starts polling the unauthenticated polling_url every couple of seconds until the token expires after a couple of minutes. The user is redirected to the Challenge Validator endpoint, which will authenticate them. After they've been successfully authenticated, the Noq tenant's backend will mark the user's request as successful in its cache. After the user has authenticated, the client (which is polling the challenge_poller endpoint every couple of seconds) should receive a success status with the super secret encoded JWT that it can use to authenticate the user for credential requests to the Noq tenant.","title":"AWS CLI Credentials"},{"location":"features/credential_management/aws_cli_credentials/#challenge-authentication","text":"Weep authenticates to the Noq backend through a standalone challenge authentication response. The challenge authentication flow is as follows: Client sends a GET request to the Noq tenant's challenge endpoint. The server generates and stores a temporary token for the authentication request. A token is scoped to the username sent in the request and expires after a couple of minutes. Noq tells the client where the user should authenticate it in their browser (challenge_url), and where to poll (polling_url). Client starts polling the unauthenticated polling_url every couple of seconds until the token expires after a couple of minutes. The user is redirected to the Challenge Validator endpoint, which will authenticate them. After they've been successfully authenticated, the Noq tenant's backend will mark the user's request as successful in its cache. After the user has authenticated, the client (which is polling the challenge_poller endpoint every couple of seconds) should receive a success status with the super secret encoded JWT that it can use to authenticate the user for credential requests to the Noq tenant.","title":"Challenge Authentication"},{"location":"features/credential_management/aws_console_temporary_credentials/","text":"Overview \u00b6 Noq can broker temporary sessions to the AWS console. After a user authenticates, Noq determines their users and groups from the configured Identity Provider. This could be Okta, Azure AD, Google, or any other OIDC/SAML compatible Identity Provider. These attributes are used to determine which roles the user is authorized to access. Noq can be used in a few different ways to determine what roles a user is allowed to access: Tag the IAM role with the names of the users or groups allowed to access the role (See getting_started/5_enable_credentail_brokering.md for more details. Specify a manual mapping of group/users -> roles in the /config endpoint. Here's an example configuration: group_mapping: groupa@example.com: roles: - arn:aws:iam::123456789012:role/roleA - arn:aws:iam::123456789012:role/roleB userb@example.com: roles: - arn:aws:iam::123456789012:role/roleA (TBD) Specify a Lambda function to invoke, which should return a mapping of roles -> group/users. (Let us know if you want this feature added!) Role Selection \u00b6 Noq's index page shows a list of roles that the current user is allowed to access across all of the organization's accounts. This could be hundreds or thousands of roles for a given user. Recent Roles \u00b6 On the left side of the page, we store the 5 most recent roles a user has logged in to. This enables them to quickly select the role they want to use if they are commonly logging in to the same roles.","title":"Overview"},{"location":"features/credential_management/aws_console_temporary_credentials/#overview","text":"Noq can broker temporary sessions to the AWS console. After a user authenticates, Noq determines their users and groups from the configured Identity Provider. This could be Okta, Azure AD, Google, or any other OIDC/SAML compatible Identity Provider. These attributes are used to determine which roles the user is authorized to access. Noq can be used in a few different ways to determine what roles a user is allowed to access: Tag the IAM role with the names of the users or groups allowed to access the role (See getting_started/5_enable_credentail_brokering.md for more details. Specify a manual mapping of group/users -> roles in the /config endpoint. Here's an example configuration: group_mapping: groupa@example.com: roles: - arn:aws:iam::123456789012:role/roleA - arn:aws:iam::123456789012:role/roleB userb@example.com: roles: - arn:aws:iam::123456789012:role/roleA (TBD) Specify a Lambda function to invoke, which should return a mapping of roles -> group/users. (Let us know if you want this feature added!)","title":"Overview"},{"location":"features/credential_management/aws_console_temporary_credentials/#role-selection","text":"Noq's index page shows a list of roles that the current user is allowed to access across all of the organization's accounts. This could be hundreds or thousands of roles for a given user.","title":"Role Selection"},{"location":"features/credential_management/aws_console_temporary_credentials/#recent-roles","text":"On the left side of the page, we store the 5 most recent roles a user has logged in to. This enables them to quickly select the role they want to use if they are commonly logging in to the same roles.","title":"Recent Roles"},{"location":"features/credential_management/chrome_integration/","text":"For ease of role login, you can integrate Noq with Chrome, Firefox, or other browsers tools by setting up a custom search engine. In Chrome: Go to Settings -> Manage search engines and site search Under \"Site Search\", click \"Add\" Fill in the appropriate attributes seen below. Replace with your noq tenant URL prefix.","title":"Chrome Integration"},{"location":"features/credential_management/ip_restricted_credentials/","text":"Credentials brokered by Noq can be IP-restricted, so they would only work from the Organization's network for VPN environment. To configure IP-restricted credentials, visit Settings -> Restrict brokered credentials to a set of IP ranges . Specify the desired IP ranges on the table.","title":"IP Restrictions"},{"location":"features/credential_management/transitive_session_tags/","text":"Noq can be configured to pass the user's username as the value of a transitive session tag when brokering credentials. To enable this configuration, select Advanced , followed by Config from the main Noq menu. Then set aws.transitive_session_tags.enabled to true . Brokered credentials must have the sts:TagSession permission for this functionality to work. If a user assume subsequent roles, this transitive session tag will be passed as well. It can be used to identify the user's identity in \"AssumeRole\" Cloudtrail events, and it can also be used for attribute-based access control. The default tag name is noq_transitive_session_tag_user , and the tag value is the user's username. Here's an example sts:AssumeRole Cloudtrail message that includes the transitive session tag: { \"eventVersion\" : \"1.08\" , \"userIdentity\" : { \"type\" : \"AssumedRole\" , \"principalId\" : \"AROA3BTKA24XXFB123456:user@noq.dev\" , \"arn\" : \"arn:aws:sts::123456789012:assumed-role/test_role/user@noq.dev\" , \"accountId\" : \"123456789012\" , \"accessKeyId\" : \"ASIA3BTKA24XZ4123456\" , \"sessionContext\" : { \"sessionIssuer\" : { \"type\" : \"Role\" , \"principalId\" : \"AROA3BTKA24XXFB123456\" , \"arn\" : \"arn:aws:iam::123456789012:role/test_role\" , \"accountId\" : \"123456789012\" , \"userName\" : \"test_role\" } , \"webIdFederationData\" : {} , \"attributes\" : { \"creationDate\" : \"2022-05-10T15:41:39Z\" , \"mfaAuthenticated\" : \"false\" } } } , \"eventTime\" : \"2022-05-10T15:43:22Z\" , \"eventSource\" : \"sts.amazonaws.com\" , \"eventName\" : \"AssumeRole\" , \"awsRegion\" : \"us-west-2\" , \"sourceIPAddress\" : \"1.2.3.4\" , \"userAgent\" : \"aws-cli\" , \"requestParameters\" : { \"incomingTransitiveTags\" : { \"noq_transitive_session_tag_user\" : \"user@noq.dev\" } , \"roleArn\" : \"arn:aws:iam::123456789012:role/test_role_2\" , \"roleSessionName\" : \"testing\" } , \"responseElements\" : { \"packedPolicySize\" : 7 , \"credentials\" : { \"accessKeyId\" : \"ASIA3BTKA24X7T123456\" , \"expiration\" : \"May 10, 2022 4:43:22 PM\" , \"sessionToken\" : \"SESSIONTOKEN\" } , \"assumedRoleUser\" : { \"assumedRoleId\" : \"AROA3BTKA24X43A123456:testing\" , \"arn\" : \"arn:aws:sts::123456789012:assumed-role/test_role_2/testing\" } } , \"requestID\" : \"ebc312e1-a027-4bec-bd06-08be274b9385\" , \"eventID\" : \"6aac91c3-7c26-4477-8dc0-8c412f4b4587\" , \"readOnly\" : true , \"resources\" : [ { \"accountId\": \"123456789012\", \"type\": \"AWS::IAM::Role\", \"ARN\": \"arn:aws:iam::123456789012:role/test_role_2\" } ] , \"eventType\" : \"AwsApiCall\" , \"managementEvent\" : true , \"recipientAccountId\" : \"123456789012\" , \"eventCategory\" : \"Management\" , \"tlsDetails\" : { \"tlsVersion\" : \"TLSv1.2\" , \"cipherSuite\" : \"ECDHE-RSA-AES128-GCM-SHA256\" , \"clientProvidedHostHeader\" : \"sts.us-west-2.amazonaws.com\" } }","title":"Transitive Session Tags"},{"location":"features/permissions_management_and_request_framework/autogenerate_x_account_permissions/","text":"Noq supports cross-account permissions for IAM Assume Role, S3, SQS, and SNS today. To see this in action, add two accounts to Noq and run through the self-service wizard. Select a role on one account, and an SQS/SNS/S3 or IAM resource on the second account, and run through the self-service review flow. After submitting your request, a cross-account resource policy should have been generated and added to the request.","title":"Autogenerate Cross Account Requests"},{"location":"features/permissions_management_and_request_framework/automatically_approve_low_risk_requests/","text":"Automatically approve and apply low-risk permission requests Example 1: Automatically approve all requests made by the networking team that are related to VPC, VPC Endpoints, or IPv6 Example 2: Automatically approve all READ requests that any employee makes to a list of S3 buckets. Example 3: Automatically approve all requests for new IAM roles as long as they don\u2019t mutate IAM Instructions are TBD.","title":"Automatically Approve Low-Risk Requests"},{"location":"features/permissions_management_and_request_framework/customizable_policy_requests/","text":"Cloud administrators can customize policy requests before approving and applying them","title":"Customize Policy Requests Before Approving"},{"location":"features/permissions_management_and_request_framework/decentralized_request_management/","text":"Decentralize Policy Request Administration to AWS Account Owners \u00b6 Noq enables you to decentralize the administration of policy requests to different AWS account owners within your organization. The account owners will only be able to approve, update, or cancel changes that affect the accounts they own. This functionality is enabled on a per-account basis. It doesn't need to be configured for all accounts. Your Noq administrators will still be able to approve or reject all policy requests. Procedure \u00b6 1. Edit AWS Settings \u00b6 Select Advanced , followed by Settings from the main Noq menu. 2. Click Edit for a Spoke Account \u00b6 Click Edit for the account you wish to delegate account ownership and policy request administration for. 3. Configure Account Ownership and Delegation \u00b6 Enable policy delegation by following these steps: Check Delegate Policy Request Administration to Owner Add the group or user you want to delegate policy request administration to Click the Add button Click the Submit button to save the changes 4. Verify Delegation \u00b6 Verify that the group or user you added is able to administer policy request changes that affect resources on accounts owned by them.","title":"Decentralized Request Management"},{"location":"features/permissions_management_and_request_framework/decentralized_request_management/#decentralize-policy-request-administration-to-aws-account-owners","text":"Noq enables you to decentralize the administration of policy requests to different AWS account owners within your organization. The account owners will only be able to approve, update, or cancel changes that affect the accounts they own. This functionality is enabled on a per-account basis. It doesn't need to be configured for all accounts. Your Noq administrators will still be able to approve or reject all policy requests.","title":"Decentralize Policy Request Administration to AWS Account Owners"},{"location":"features/permissions_management_and_request_framework/decentralized_request_management/#procedure","text":"","title":"Procedure"},{"location":"features/permissions_management_and_request_framework/decentralized_request_management/#1-edit-aws-settings","text":"Select Advanced , followed by Settings from the main Noq menu.","title":"1. Edit AWS Settings"},{"location":"features/permissions_management_and_request_framework/decentralized_request_management/#2-click-edit-for-a-spoke-account","text":"Click Edit for the account you wish to delegate account ownership and policy request administration for.","title":"2. Click Edit for a Spoke Account"},{"location":"features/permissions_management_and_request_framework/decentralized_request_management/#3-configure-account-ownership-and-delegation","text":"Enable policy delegation by following these steps: Check Delegate Policy Request Administration to Owner Add the group or user you want to delegate policy request administration to Click the Add button Click the Submit button to save the changes","title":"3. Configure Account Ownership and Delegation"},{"location":"features/permissions_management_and_request_framework/decentralized_request_management/#4-verify-delegation","text":"Verify that the group or user you added is able to administer policy request changes that affect resources on accounts owned by them.","title":"4. Verify Delegation"},{"location":"features/permissions_management_and_request_framework/permissions_are_crud/","text":"Simplifies permissions into CRUD operations. Don\u2019t like our defaults? Customize them to your needs. Example: Don\u2019t want your users to have sensitive permissions, like s3:PutObjectAcl when they request S3 Write Access? That\u2019s easy with Noq.","title":"Customizable CRUD Mapping for Permissions"},{"location":"features/permissions_management_and_request_framework/restrict_viewers_of_account_resources/","text":"Restrict Viewers of Account Resources \u00b6 Noq enables you to restrict the users and groups able to view resources on a per-account basis. If this option isn't enabled for an account, all users will be able to see the account's resources. Regardless of what is configured here, Noq administrators and account owners will still be able to view an account's resources. the administration of policy requests to different AWS account owners within your organization. The account owners will only be Procedure \u00b6 1. Edit AWS Settings \u00b6 Select Advanced , followed by Settings from the main Noq menu. 2. Click Edit for a Spoke Account \u00b6 Click Edit for the account you wish to restrict viewing of resources for. 3. Configure Account Viewers \u00b6 Restrict Account Resource Viewers by following these steps: Check Restrict Viewers of Account Resources Add the group or user you want to restrict viewership for Click the Add button Click the Submit button to save the changes 4. Verify Restriction \u00b6 Verify that the groups or users you added are able to view resources for the account. Verify that users that are not administrators in Noq and not owners of the account are not able to view resources for the account.","title":"Restrict Viewers of Account Resources"},{"location":"features/permissions_management_and_request_framework/restrict_viewers_of_account_resources/#restrict-viewers-of-account-resources","text":"Noq enables you to restrict the users and groups able to view resources on a per-account basis. If this option isn't enabled for an account, all users will be able to see the account's resources. Regardless of what is configured here, Noq administrators and account owners will still be able to view an account's resources. the administration of policy requests to different AWS account owners within your organization. The account owners will only be","title":"Restrict Viewers of Account Resources"},{"location":"features/permissions_management_and_request_framework/restrict_viewers_of_account_resources/#procedure","text":"","title":"Procedure"},{"location":"features/permissions_management_and_request_framework/restrict_viewers_of_account_resources/#1-edit-aws-settings","text":"Select Advanced , followed by Settings from the main Noq menu.","title":"1. Edit AWS Settings"},{"location":"features/permissions_management_and_request_framework/restrict_viewers_of_account_resources/#2-click-edit-for-a-spoke-account","text":"Click Edit for the account you wish to restrict viewing of resources for.","title":"2. Click Edit for a Spoke Account"},{"location":"features/permissions_management_and_request_framework/restrict_viewers_of_account_resources/#3-configure-account-viewers","text":"Restrict Account Resource Viewers by following these steps: Check Restrict Viewers of Account Resources Add the group or user you want to restrict viewership for Click the Add button Click the Submit button to save the changes","title":"3. Configure Account Viewers"},{"location":"features/permissions_management_and_request_framework/restrict_viewers_of_account_resources/#4-verify-restriction","text":"Verify that the groups or users you added are able to view resources for the account. Verify that users that are not administrators in Noq and not owners of the account are not able to view resources for the account.","title":"4. Verify Restriction"},{"location":"features/permissions_management_and_request_framework/self_service_permissions/","text":"The Self-Service Permissions Wizard walks your users through the process of requesting permissions https://www.youtube.com/watch?v=fXNRYcNyw0c&t=830s","title":"Self-Service Permissions"},{"location":"features/permissions_management_and_request_framework/temporary_policy_requests/","text":"Noq supports requesting temporary IAM policies during a Self-Service request with the granularity of one day. All generated policies within a request will be expired on the date specified for expiration.","title":"Temporary Policy Requests"},{"location":"features/permissions_management_and_request_framework/typeaheads_across_known_resources/","text":"Noq leverages data from AWS Config to provide typeaheads on all known resources, across your entire AWS environment","title":"Typeaheads across all known resources"},{"location":"features/planned/2fa_step_up/","text":"Noq can perform 2-factor step-up authentication when a user attempts to retrieve credentials to a sensitive AWS account or a sensitive role. This is a security feature that helps prevent unauthorized access to AWS resources. Noq uses the Duo API to push a 2-factor step-up challenge to your user.","title":"2-Factor Step-Up"},{"location":"features/planned/automatic_permissions_generation/","text":"Noq plans to leverage Cloudtrail data to automatically generate policies based on access denied errors seen in Cloudtrail. Noq will then notify the user about the generated policy and give them the ability to request the policy. Stage two of this approach involves using Weep on the user's laptop to intercept AWS calls and automatically request policies to rectify access denied errors with more accuracy than what Cloudtrail provides.","title":"Automatic Permissions Generation"},{"location":"features/planned/breakglass_role_access/","text":"Breakglass role access would allow an organization to specify a set of groups that are allowed to \"break-glass\" in to a role. Users will be able to filter for \"Break-Glass\" roles in Noq's Role Selection page. When performing break-glass, the organization can require validation through a Duo-push, or approval via custom code invoked via a Lambda function.","title":"Breakglass Role Access"},{"location":"features/planned/multi_role_wizard_selection/","text":"Request policy changes across multiple roles with a single request","title":"Multi-Role Self-Service"},{"location":"features/planned/multi_tag_wizard_request/","text":"Noq will support creating, deleting, or updating tags across multiple resources","title":"Self-Service Wizard for Tagging"},{"location":"features/planned/unused_permissions_removal/","text":"Noq leverages Access Advisor and Cloudtrail Logs (via Athena) to determine which resources have used which permissions. Noq will provide a least-privilege policy, along with instructions for applying the policy to end-users and cloud administrators.","title":"Unused Permissions Removal"},{"location":"features/resource_management/clone_role/","text":"Clone a role \u00b6 To clone a role as an administrator, visit Resources > Create Role , select Clone from existing role and fill out the required parameters.","title":"Clone Role"},{"location":"features/resource_management/clone_role/#clone-a-role","text":"To clone a role as an administrator, visit Resources > Create Role , select Clone from existing role and fill out the required parameters.","title":"Clone a role"},{"location":"features/resource_management/create_role/","text":"Create a blank role \u00b6","title":"Create Role"},{"location":"features/resource_management/create_role/#create-a-blank-role","text":"","title":"Create a blank role"},{"location":"getting_started/","text":"This section will walk you through the process of configuring and customizing Noq for your environment.","title":"Index"},{"location":"getting_started/1_connect_hub_account/","text":"Connect your AWS Hub Account \u00b6 Noq uses a hub-and-spoke approach to connect to your AWS environment. Noq will cache cloud resources, make policy changes, and provide credential brokering features using this approach. Your hub role is Noq's entry point to your AWS environment. Noq assumes this role with a unique external ID. Each AWS account with Noq enabled should have a spoke role that the hub role can assume. To use Noq, choose an AWS account where Noq's hub role is deployed. This can be any account in your AWS environment. Then follow the steps outlined below. Procedure \u00b6 1. Log in to the AWS Console \u00b6 Log in to the AWS Console of the account where you would like to deploy Noq's hub role. Note If you are experimenting with Noq for the first time, we recommend creating a dedicated account for Noq. Once you are confident that you want to use Noq more broadly you can deploy to other accounts in your organization. 2. Log in to Noq \u00b6 In the same browser where you are logged in to the AWS console, open a separate tab and log in to Noq. 3. Navigate to the Noq settings page \u00b6 From the Noq main menu, select Advanced > Settings . 4. Click Connect Hub Account \u00b6 From the Noq Settings page, click Connect Hub Account . 5. Click Execute CloudFormation \u00b6 Click Execute CloudFormation . This will open a browser tab in the CloudFormation user interface with a defined stack for creating Noq hub and spoke roles in your AWS account. 6. Create the Noq CloudFormation Stack \u00b6 Scroll to the bottom of the CloudFormation page. Click Create Stack . This will create hub and spoke roles on your AWS account and then notify Noq when the tasks have completed. 7. Wait for the CloudFormation tasks to finish \u00b6 Noq will verify the connection to your AWS account, deploy the hub and spoke roles, and begin to cache AWS resources from your account by invoking the appropriate tasks . Note See the AWS documentation for a list of supported AWS resource types . To view cached resources, select Resources > All Cloud Resources from the Noq main menu. After about 10 minutes, you should see AWS resources in your Noq account.","title":"Connect Your AWS Hub Account"},{"location":"getting_started/1_connect_hub_account/#connect-your-aws-hub-account","text":"Noq uses a hub-and-spoke approach to connect to your AWS environment. Noq will cache cloud resources, make policy changes, and provide credential brokering features using this approach. Your hub role is Noq's entry point to your AWS environment. Noq assumes this role with a unique external ID. Each AWS account with Noq enabled should have a spoke role that the hub role can assume. To use Noq, choose an AWS account where Noq's hub role is deployed. This can be any account in your AWS environment. Then follow the steps outlined below.","title":"Connect your AWS Hub Account"},{"location":"getting_started/1_connect_hub_account/#procedure","text":"","title":"Procedure"},{"location":"getting_started/1_connect_hub_account/#1-log-in-to-the-aws-console","text":"Log in to the AWS Console of the account where you would like to deploy Noq's hub role. Note If you are experimenting with Noq for the first time, we recommend creating a dedicated account for Noq. Once you are confident that you want to use Noq more broadly you can deploy to other accounts in your organization.","title":"1. Log in to the AWS Console"},{"location":"getting_started/1_connect_hub_account/#2-log-in-to-noq","text":"In the same browser where you are logged in to the AWS console, open a separate tab and log in to Noq.","title":"2. Log in to Noq"},{"location":"getting_started/1_connect_hub_account/#3-navigate-to-the-noq-settings-page","text":"From the Noq main menu, select Advanced > Settings .","title":"3. Navigate to the Noq settings page"},{"location":"getting_started/1_connect_hub_account/#4-click-connect-hub-account","text":"From the Noq Settings page, click Connect Hub Account .","title":"4. Click Connect Hub Account"},{"location":"getting_started/1_connect_hub_account/#5-click-execute-cloudformation","text":"Click Execute CloudFormation . This will open a browser tab in the CloudFormation user interface with a defined stack for creating Noq hub and spoke roles in your AWS account.","title":"5. Click Execute CloudFormation"},{"location":"getting_started/1_connect_hub_account/#6-create-the-noq-cloudformation-stack","text":"Scroll to the bottom of the CloudFormation page. Click Create Stack . This will create hub and spoke roles on your AWS account and then notify Noq when the tasks have completed.","title":"6. Create the Noq CloudFormation Stack"},{"location":"getting_started/1_connect_hub_account/#7-wait-for-the-cloudformation-tasks-to-finish","text":"Noq will verify the connection to your AWS account, deploy the hub and spoke roles, and begin to cache AWS resources from your account by invoking the appropriate tasks . Note See the AWS documentation for a list of supported AWS resource types . To view cached resources, select Resources > All Cloud Resources from the Noq main menu. After about 10 minutes, you should see AWS resources in your Noq account.","title":"7. Wait for the CloudFormation tasks to finish"},{"location":"getting_started/3_connect_spoke_accounts/","text":"Connect additional AWS Accounts \u00b6 After playing with self-service, you might want to connect additional accounts to Noq. Your spoke accounts consist of every account that you want to manage through Noq. Noq will access your spoke accounts through your hub account role. To add a spoke account, please follow the steps or video gudance below: Log in to the AWS Console of an account that you'd like Noq to be able to access. Visit Advanced -> Settings Click Connect Spoke Role Click Execute CloudFormation Run the CloudFormation Stack on the account. This will create a Spoke Role on the account, then notify Noq when it has completed. Wait a few minutes. Noq will verify the connection, add the Spoke role to your account, and begin to cache resources on the account by invoking the appropriate tasks . After about 10 minutes, you should see cloud resources in your account.","title":"Connect Additional Spoke Accounts"},{"location":"getting_started/3_connect_spoke_accounts/#connect-additional-aws-accounts","text":"After playing with self-service, you might want to connect additional accounts to Noq. Your spoke accounts consist of every account that you want to manage through Noq. Noq will access your spoke accounts through your hub account role. To add a spoke account, please follow the steps or video gudance below: Log in to the AWS Console of an account that you'd like Noq to be able to access. Visit Advanced -> Settings Click Connect Spoke Role Click Execute CloudFormation Run the CloudFormation Stack on the account. This will create a Spoke Role on the account, then notify Noq when it has completed. Wait a few minutes. Noq will verify the connection, add the Spoke role to your account, and begin to cache resources on the account by invoking the appropriate tasks . After about 10 minutes, you should see cloud resources in your account.","title":"Connect additional AWS Accounts"},{"location":"getting_started/4_update_account_names/","text":"Updating AWS Account Names \u00b6 Updating AWS Account names is a manual operation if Noq is not configured for your AWS Organizations master account. In order to update your Account Names, please follow the guidance below: Visit Advanced -> Config Find the account_ids_to_name configuration key Update the value of the account IDs to the appropriate name Wait a while (30 minutes to 1 hour) for your resource cache to update with the new names.","title":"Update Account Names"},{"location":"getting_started/4_update_account_names/#updating-aws-account-names","text":"Updating AWS Account names is a manual operation if Noq is not configured for your AWS Organizations master account. In order to update your Account Names, please follow the guidance below: Visit Advanced -> Config Find the account_ids_to_name configuration key Update the value of the account IDs to the appropriate name Wait a while (30 minutes to 1 hour) for your resource cache to update with the new names.","title":"Updating AWS Account Names"},{"location":"getting_started/5_enable_credential_brokering/","text":"Enable Credential Brokering \u00b6 Noq can broker AWS credentials to authorized users within your organization. To enable this feature, follow the procedure below. Procedure \u00b6 1. Navigate to the Settings page \u00b6 Select Advanced > Settings from the main Noq menu. 2. Enable credential brokering \u00b6 On the Settings page, scroll down to the Role Access Authorization section and enable credential brokering using the toggle switch. 3. Select tags to identify users and groups authorized to assume a role \u00b6 In the Role Access Authorization section of the Settings page, identify all tags by which you will label users and groups that are authorized to retrieve credentials for a role. You may use the default tags or define your own tags by clicking the New button. As an example, consider the noq_authorized and noq_authorized_cli tag settings depicted in the figure below. Users and groups specified in the value of the noq_authorized tag of a given IAM role will see that role in the Noq Role Access page. They will be able to use Weep (Noq's CLI utility) to retrieve credentials for that role. In addition, users and groups specified in the value of the noq_authorized_cli_only tag will be able to retrieve role credentials via Weep, but will not see the role listed on the Noq Role Access page. Next Steps \u00b6 See Authorize Users to Assume Roles to enable credential brokering for specific users and groups in your organization.","title":"Enable Credential Brokering"},{"location":"getting_started/5_enable_credential_brokering/#enable-credential-brokering","text":"Noq can broker AWS credentials to authorized users within your organization. To enable this feature, follow the procedure below.","title":"Enable Credential Brokering"},{"location":"getting_started/5_enable_credential_brokering/#procedure","text":"","title":"Procedure"},{"location":"getting_started/5_enable_credential_brokering/#1-navigate-to-the-settings-page","text":"Select Advanced > Settings from the main Noq menu.","title":"1. Navigate to the Settings page"},{"location":"getting_started/5_enable_credential_brokering/#2-enable-credential-brokering","text":"On the Settings page, scroll down to the Role Access Authorization section and enable credential brokering using the toggle switch.","title":"2. Enable credential brokering"},{"location":"getting_started/5_enable_credential_brokering/#3-select-tags-to-identify-users-and-groups-authorized-to-assume-a-role","text":"In the Role Access Authorization section of the Settings page, identify all tags by which you will label users and groups that are authorized to retrieve credentials for a role. You may use the default tags or define your own tags by clicking the New button. As an example, consider the noq_authorized and noq_authorized_cli tag settings depicted in the figure below. Users and groups specified in the value of the noq_authorized tag of a given IAM role will see that role in the Noq Role Access page. They will be able to use Weep (Noq's CLI utility) to retrieve credentials for that role. In addition, users and groups specified in the value of the noq_authorized_cli_only tag will be able to retrieve role credentials via Weep, but will not see the role listed on the Noq Role Access page.","title":"3. Select tags to identify users and groups authorized to assume a role"},{"location":"getting_started/5_enable_credential_brokering/#next-steps","text":"See Authorize Users to Assume Roles to enable credential brokering for specific users and groups in your organization.","title":"Next Steps"},{"location":"getting_started/6_automatically_update_trust_policies/","text":"Configure Automatic Updates to Trust Policies \u00b6 Users may retrieve credentials for authorized roles through Noq. To retrieve credentials, Noq will assume your hub role with an external ID that is unique to your company. From your hub role, Noq will attempt to assume the role requested by the user. If successful, Noq will return the assumed credentials to the user. Noq might be unable to assume the role requested by the user because your hub role is not authorized to perform sts:AssumeRole or sts:TagSession in the target role's trust policy. If you prefer, Noq can attempt to automatically update the trust policy of a role when it initially receives an Access Denied error. With this feature enabled, you do not need to update all of your roles manually. Important If you are using an infrastructure as code (IaC) approach to templatize your roles, we recommend that you update your IaC templates to give your Noq Hub role the ability to perform these actions. To enable this option, follow the steps in the procedure below. Procedure \u00b6 1. Navigate to the Update Configuration page \u00b6 Select Advanced > Config from the main Noq menu. 2. Enable Noq to automatically update trust policies \u00b6 Set the configuration key for aws.automatically_update_role_trust_policies to true . When finished, your Noq configuration file should include an entry similar to the following. aws: automatically_update_role_trust_policies: true See the figure below for an example of an updated configuration file. Warning Before updating your configuration file, check whether a top-level aws configuration key already exists. If your configuration file already includes an aws key, add or update automatically_update_role_trust_policies: true under that key.","title":"Configure Automatic Updates to Trust Policies"},{"location":"getting_started/6_automatically_update_trust_policies/#configure-automatic-updates-to-trust-policies","text":"Users may retrieve credentials for authorized roles through Noq. To retrieve credentials, Noq will assume your hub role with an external ID that is unique to your company. From your hub role, Noq will attempt to assume the role requested by the user. If successful, Noq will return the assumed credentials to the user. Noq might be unable to assume the role requested by the user because your hub role is not authorized to perform sts:AssumeRole or sts:TagSession in the target role's trust policy. If you prefer, Noq can attempt to automatically update the trust policy of a role when it initially receives an Access Denied error. With this feature enabled, you do not need to update all of your roles manually. Important If you are using an infrastructure as code (IaC) approach to templatize your roles, we recommend that you update your IaC templates to give your Noq Hub role the ability to perform these actions. To enable this option, follow the steps in the procedure below.","title":"Configure Automatic Updates to Trust Policies"},{"location":"getting_started/6_automatically_update_trust_policies/#procedure","text":"","title":"Procedure"},{"location":"getting_started/6_automatically_update_trust_policies/#1-navigate-to-the-update-configuration-page","text":"Select Advanced > Config from the main Noq menu.","title":"1. Navigate to the Update Configuration page"},{"location":"getting_started/6_automatically_update_trust_policies/#2-enable-noq-to-automatically-update-trust-policies","text":"Set the configuration key for aws.automatically_update_role_trust_policies to true . When finished, your Noq configuration file should include an entry similar to the following. aws: automatically_update_role_trust_policies: true See the figure below for an example of an updated configuration file. Warning Before updating your configuration file, check whether a top-level aws configuration key already exists. If your configuration file already includes an aws key, add or update automatically_update_role_trust_policies: true under that key.","title":"2. Enable Noq to automatically update trust policies"},{"location":"getting_started/7_enable_ip_restrictions/","text":"Set up IP Restrictions \u00b6 Do you want all credentials brokered by Noq to be IP-restricted, such that they only work within your corporate VPN IP space? If so, this option is for you. To configure IP restrictions, follow the steps below: Visit Advanced -> Settings Enable Restrict brokered credentials to a set of IP ranges Click Add CIDR Type in a CIDR to use for credential restriction, and click Submit Repeat this process for additional CIDRs. All credentials brokered by Noq for end-users will be IP restricted while retaining the ability for AWS to use the credentials on your behalf (I.E. CloudFormation, and a few other bespoke use cases).","title":"Enable IP Restrictions"},{"location":"getting_started/7_enable_ip_restrictions/#set-up-ip-restrictions","text":"Do you want all credentials brokered by Noq to be IP-restricted, such that they only work within your corporate VPN IP space? If so, this option is for you. To configure IP restrictions, follow the steps below: Visit Advanced -> Settings Enable Restrict brokered credentials to a set of IP ranges Click Add CIDR Type in a CIDR to use for credential restriction, and click Submit Repeat this process for additional CIDRs. All credentials brokered by Noq for end-users will be IP restricted while retaining the ability for AWS to use the credentials on your behalf (I.E. CloudFormation, and a few other bespoke use cases).","title":"Set up IP Restrictions"},{"location":"getting_started/8_configure_weep/","text":"Enable the Weep CLI Utility \u00b6 Weep is an open source CLI utility. It offers convenient ways to work with temporary AWS credentials. For example, you may use Weep to emulate the ECS credential provider and the instance metadata service. You can also use Weep to provide an endpoint for sourcing credentials via the AWS CLI credential_process config setting. Weep enables you to work with multiple sets of temporary credentials in parallel. It also supports long-lived operations that outlast the expiration time of the credentials. Weep was originally developed as part of the open source ConsoleMe project. See the ConsoleMe documentation for more information on Weep Procedure \u00b6 To enable CLI credential brokering in Noq via Weep you must enable challenge authentication mode. Challenge authentication allows Weep to securely authenticate to your tenant on Noq. For details on the challenge authentication flow over HTTPS see AWS CLI Credentials . To enable challenge authentication, follow the steps below. 1. Navigate to the Update Configuration page \u00b6 Select Advanced > Config from the main Noq menu. 2. Update the Noq configuration file \u00b6 Set the configuration key for auth.challenge_url.enabled to true . When finished, your Noq configuration file should include an entry similar to the following. auth: challenge_url: enabled: true 3. Click Save Configuration \u00b6 Click the Save Configuration button to commit the changes. Next Steps \u00b6 See Configure CLI Credential Brokering for instructions on how to download and configure weep for use with your CLI.","title":"Enable the Weep CLI Utility"},{"location":"getting_started/8_configure_weep/#enable-the-weep-cli-utility","text":"Weep is an open source CLI utility. It offers convenient ways to work with temporary AWS credentials. For example, you may use Weep to emulate the ECS credential provider and the instance metadata service. You can also use Weep to provide an endpoint for sourcing credentials via the AWS CLI credential_process config setting. Weep enables you to work with multiple sets of temporary credentials in parallel. It also supports long-lived operations that outlast the expiration time of the credentials. Weep was originally developed as part of the open source ConsoleMe project. See the ConsoleMe documentation for more information on Weep","title":"Enable the Weep CLI Utility"},{"location":"getting_started/8_configure_weep/#procedure","text":"To enable CLI credential brokering in Noq via Weep you must enable challenge authentication mode. Challenge authentication allows Weep to securely authenticate to your tenant on Noq. For details on the challenge authentication flow over HTTPS see AWS CLI Credentials . To enable challenge authentication, follow the steps below.","title":"Procedure"},{"location":"getting_started/8_configure_weep/#1-navigate-to-the-update-configuration-page","text":"Select Advanced > Config from the main Noq menu.","title":"1. Navigate to the Update Configuration page"},{"location":"getting_started/8_configure_weep/#2-update-the-noq-configuration-file","text":"Set the configuration key for auth.challenge_url.enabled to true . When finished, your Noq configuration file should include an entry similar to the following. auth: challenge_url: enabled: true","title":"2. Update the Noq configuration file"},{"location":"getting_started/8_configure_weep/#3-click-save-configuration","text":"Click the Save Configuration button to commit the changes.","title":"3. Click Save Configuration"},{"location":"getting_started/8_configure_weep/#next-steps","text":"See Configure CLI Credential Brokering for instructions on how to download and configure weep for use with your CLI.","title":"Next Steps"},{"location":"getting_started/9_connect_eventbridge/","text":"UNDER CONSTRUCTION \u00b6 Noq can integrate with AWS CloudTrail via Event Bridge. It can generate naive policies from CloudTrail Access Deny errors, and update IAM role cache based IAM create / update events. If you're running Noq in a multi-account environment in a single AWS Organization, we recommend that you create an Event Bridge rule in each region of each of your accounts that will forward your CloudTrail data to a single region in a single account. The account that you choose to send this data to should be locked down, and only accessible by your cloud administrators. The Event Bus on your central account (The one where all of these logs will go to) should have a resource-based policy allowing all accounts within your organization to send events to it. Here's what that might look like: The rule on each region of each of your accounts should look similar to the below: As previously mentioned, Noq only processes Access Deny and Role Update log messages. On your central account, we need two different rules. One for each scenario. This first Event Bridge rule will help Noq to process AccessDenied / UnauthorizedOperation errors from CloudTrail by sending them to an SNS topic. An SQS queue is subscribed to this topic, and Noq has the ability to read this SQS queue. Alternatively, the target for the event bridge rule could just be an SQS queue that Noq has access to. Setting this up is an exercise for the reader. The second Event Bridge rule is needed for Noq to cache new or updated roles, as well as role authorization changes through tag updates, much quicker. The target can be an SNS topic, or an SQS queue. After the rules are configured and you are seeing messages in your SQS queues, we need to modify Noq's configuration and restart Noq's celery scheduler / worker. Add the following configuration, replacing the queue ARNs as appropriate. celery: cache_cloudtrail_denies: enabled: true trigger_credential_mapping_refresh_from_role_changes: enabled: true event_bridge: detect_role_changes_and_update_cache: queue_arn: arn:aws:sqs:{region}:{account_id}:noq-cloudtrail-role-events # assume_role: null <--- Optional role to assume to access the queue detect_cloudtrail_denies_and_update_cache: queue_arn: arn:aws:sqs:{region}:{account_id}:noq-cloudtrail-access-deny-events # assume_role: null <--- Optional role to assume to access the queue You should begin to see role updates much quicker, and will also see access denied messaging for your IAM principals","title":"Configure AWS Event Bridge"},{"location":"getting_started/9_connect_eventbridge/#under-construction","text":"Noq can integrate with AWS CloudTrail via Event Bridge. It can generate naive policies from CloudTrail Access Deny errors, and update IAM role cache based IAM create / update events. If you're running Noq in a multi-account environment in a single AWS Organization, we recommend that you create an Event Bridge rule in each region of each of your accounts that will forward your CloudTrail data to a single region in a single account. The account that you choose to send this data to should be locked down, and only accessible by your cloud administrators. The Event Bus on your central account (The one where all of these logs will go to) should have a resource-based policy allowing all accounts within your organization to send events to it. Here's what that might look like: The rule on each region of each of your accounts should look similar to the below: As previously mentioned, Noq only processes Access Deny and Role Update log messages. On your central account, we need two different rules. One for each scenario. This first Event Bridge rule will help Noq to process AccessDenied / UnauthorizedOperation errors from CloudTrail by sending them to an SNS topic. An SQS queue is subscribed to this topic, and Noq has the ability to read this SQS queue. Alternatively, the target for the event bridge rule could just be an SQS queue that Noq has access to. Setting this up is an exercise for the reader. The second Event Bridge rule is needed for Noq to cache new or updated roles, as well as role authorization changes through tag updates, much quicker. The target can be an SNS topic, or an SQS queue. After the rules are configured and you are seeing messages in your SQS queues, we need to modify Noq's configuration and restart Noq's celery scheduler / worker. Add the following configuration, replacing the queue ARNs as appropriate. celery: cache_cloudtrail_denies: enabled: true trigger_credential_mapping_refresh_from_role_changes: enabled: true event_bridge: detect_role_changes_and_update_cache: queue_arn: arn:aws:sqs:{region}:{account_id}:noq-cloudtrail-role-events # assume_role: null <--- Optional role to assume to access the queue detect_cloudtrail_denies_and_update_cache: queue_arn: arn:aws:sqs:{region}:{account_id}:noq-cloudtrail-access-deny-events # assume_role: null <--- Optional role to assume to access the queue You should begin to see role updates much quicker, and will also see access denied messaging for your IAM principals","title":"UNDER CONSTRUCTION"},{"location":"getting_started/access_aws_console_with_assumed_roles/","text":"Access AWS Console with Assumed Roles \u00b6 Noq enables you to log in to the AWS using any roles you have been authorized to assume via Noq credential brokering. See Enable Credential Brokering for details on setting up credential brokering as an administrator. Procedure \u00b6 1. Navigate to the Access page in Noq \u00b6 Select Access from the main Noq menu. If there are roles you are authorized to assume, you will see a page similar to the one depicted in the figure below. If you don't see any roles listed on your Access page, this might mean you are not authorized to assume any roles via credential brokering in Noq. 2. Select the role you want to assume \u00b6 From the list of roles on the Access page, click the Sign-In button for the role you want to assume in order to log in to the AWS console. 3. Use the AWS console as needed \u00b6 When you click a Sign-in button to assume an AWS role, Noq will log you in to the AWS console using this role. Navigate the AWS console to locate the service you need and perform the desired actions.","title":"Access the AWS Console with Assumed Roles"},{"location":"getting_started/access_aws_console_with_assumed_roles/#access-aws-console-with-assumed-roles","text":"Noq enables you to log in to the AWS using any roles you have been authorized to assume via Noq credential brokering. See Enable Credential Brokering for details on setting up credential brokering as an administrator.","title":"Access AWS Console with Assumed Roles"},{"location":"getting_started/access_aws_console_with_assumed_roles/#procedure","text":"","title":"Procedure"},{"location":"getting_started/access_aws_console_with_assumed_roles/#1-navigate-to-the-access-page-in-noq","text":"Select Access from the main Noq menu. If there are roles you are authorized to assume, you will see a page similar to the one depicted in the figure below. If you don't see any roles listed on your Access page, this might mean you are not authorized to assume any roles via credential brokering in Noq.","title":"1. Navigate to the Access page in Noq"},{"location":"getting_started/access_aws_console_with_assumed_roles/#2-select-the-role-you-want-to-assume","text":"From the list of roles on the Access page, click the Sign-In button for the role you want to assume in order to log in to the AWS console.","title":"2. Select the role you want to assume"},{"location":"getting_started/access_aws_console_with_assumed_roles/#3-use-the-aws-console-as-needed","text":"When you click a Sign-in button to assume an AWS role, Noq will log you in to the AWS console using this role. Navigate the AWS console to locate the service you need and perform the desired actions.","title":"3. Use the AWS console as needed"},{"location":"getting_started/download_and_configure_weep/","text":"Set up the Weep CLI Utility \u00b6 Weep is a CLI utility that makes it easy to use credentials from Noq for local development. Weep gets AWS credentials from Noq and serves them to your AWS CLI or SDKs. Weep caches credentials and, in many cases, can refresh credentials automatically. See Weep CLI Overview for a summary of features and different ways to serve AWS credentials locally using Weep. To download and configure Weep for local use, follow the procedure below. Prerequisites \u00b6 In order to use Weep, CLI Credential Brokering must be enabled in Noq by a system administrator. Procedure \u00b6 To download and configure Weep, follow the steps below. 1. Navigate to the Noq Downloads page \u00b6 Click the Downloads link in the Noq navigation panel. 2. Download Weep for your operating system. \u00b6 On the Downloads page, scroll down to see the list of installers. Download the Weep installer for your operating system. 3. Copy the setup commands from the Downloads page \u00b6 The Downloads page includes setup commands specific to your Noq user. Copy the setup commands. You'll use them in the next step of this procedure. 4. Paste and run the setup commands \u00b6 Paste the setup commands into your command-line environment and run them. These commands will create a weep directory and configuration file. 5. Optional: Copy weep to your $PATH \u00b6 If you downloaded a Linux/Mac binary, copy Weep to your $PATH. cd ~/Downloads cp ./weep /usr/local/bin/weep 6. Authenticate your Weep client in Noq \u00b6 Run the following command to authenticate your weep client in Noq. weep list For example, if you run weep list in a bash shell, the Noq user interface will prompt you to approve the request by the Weep client to authenticate using your Noq user role. 7. Approve the credentials request \u00b6 Approve the authentication request from the Weep client by clicking the Approve Credential Request button in the Noq Web user interface. Upon approving the credentials request, you should see a response that lists the roles you are authorized to assume. Next Steps \u00b6 Run weep --help to explore the functionality Weep provides. See the ConsoleMe documentation for more information on Weep.","title":"Set up the Weep CLI Utility"},{"location":"getting_started/download_and_configure_weep/#set-up-the-weep-cli-utility","text":"Weep is a CLI utility that makes it easy to use credentials from Noq for local development. Weep gets AWS credentials from Noq and serves them to your AWS CLI or SDKs. Weep caches credentials and, in many cases, can refresh credentials automatically. See Weep CLI Overview for a summary of features and different ways to serve AWS credentials locally using Weep. To download and configure Weep for local use, follow the procedure below.","title":"Set up the Weep CLI Utility"},{"location":"getting_started/download_and_configure_weep/#prerequisites","text":"In order to use Weep, CLI Credential Brokering must be enabled in Noq by a system administrator.","title":"Prerequisites"},{"location":"getting_started/download_and_configure_weep/#procedure","text":"To download and configure Weep, follow the steps below.","title":"Procedure"},{"location":"getting_started/download_and_configure_weep/#1-navigate-to-the-noq-downloads-page","text":"Click the Downloads link in the Noq navigation panel.","title":"1. Navigate to the Noq Downloads page"},{"location":"getting_started/download_and_configure_weep/#2-download-weep-for-your-operating-system","text":"On the Downloads page, scroll down to see the list of installers. Download the Weep installer for your operating system.","title":"2. Download Weep for your operating system."},{"location":"getting_started/download_and_configure_weep/#3-copy-the-setup-commands-from-the-downloads-page","text":"The Downloads page includes setup commands specific to your Noq user. Copy the setup commands. You'll use them in the next step of this procedure.","title":"3. Copy the setup commands from the Downloads page"},{"location":"getting_started/download_and_configure_weep/#4-paste-and-run-the-setup-commands","text":"Paste the setup commands into your command-line environment and run them. These commands will create a weep directory and configuration file.","title":"4. Paste and run the setup commands"},{"location":"getting_started/download_and_configure_weep/#5-optional-copy-weep-to-your-path","text":"If you downloaded a Linux/Mac binary, copy Weep to your $PATH. cd ~/Downloads cp ./weep /usr/local/bin/weep","title":"5. Optional: Copy weep to your $PATH"},{"location":"getting_started/download_and_configure_weep/#6-authenticate-your-weep-client-in-noq","text":"Run the following command to authenticate your weep client in Noq. weep list For example, if you run weep list in a bash shell, the Noq user interface will prompt you to approve the request by the Weep client to authenticate using your Noq user role.","title":"6. Authenticate your Weep client in Noq"},{"location":"getting_started/download_and_configure_weep/#7-approve-the-credentials-request","text":"Approve the authentication request from the Weep client by clicking the Approve Credential Request button in the Noq Web user interface. Upon approving the credentials request, you should see a response that lists the roles you are authorized to assume.","title":"7. Approve the credentials request"},{"location":"getting_started/download_and_configure_weep/#next-steps","text":"Run weep --help to explore the functionality Weep provides. See the ConsoleMe documentation for more information on Weep.","title":"Next Steps"},{"location":"getting_started/enable_users_to_assume_roles/","text":"Configure Credential Brokering \u00b6 You may enable users and groups to assume AWS roles using Noq self-service controls. To do this, follow the steps in the procedure below to tag AWS roles with a user or group defined in your identify provider. You will use the Noq user interface to update the policy for a role with one or more new tags. After a role tag is updated, it might take 1-2 minutes for the role to be available to users for whom you have enabled access. Prerequites \u00b6 Before you can authorize users and groups to assume AWS roles, you must follow the steps in the Configure Credential Brokering procedure. Please ensure you have completed that procedure before continuing. Procedure \u00b6 1. Navigate to All Cloud Resources \u00b6 Select Resources > All Cloud Resources from the Noq main menu. You should then see a page similar to the following. 2. Optional: Filter resources to find the role you want to enable \u00b6 In the Resource search box, begin typing the name of the role you want to enable for one or more users. This will filter the list of resources to just those matching the string you enter. 3. Select the role you want to enable \u00b6 Select the role you want to enable from the list of resources. 4. Select tags from the Edit Policy view \u00b6 From the Edit Policy view, click the Tags tab. This will enable you to edit tags for the role. 5. Click the Create New Tag button \u00b6 6. Add a tag authorizing a user or group who can assume the role \u00b6 In Configure Credential Brokering you set up one or more keys to use in brokering roles to users and groups. Use one or more of those keys here to enable users to assume the role. Enter noq_authorized or another key you have configured for credential brokering as the key for the new tag. Enter the user or group name as the value for the new tag. Click the Add button. 7. Optional: Add tags for additional users or group who can assume the role \u00b6 Repeat step 6 for all users you want to authorize to assume the role. 8. Click Save to update the policy for the role \u00b6 9. Enter a justification and expiration \u00b6 Describe why you are authorizing these users and groups you've identified to assume the role. You may also enter an expiration date for credential brokering if desired. Next Steps \u00b6 After Noq propagates the policy changes, authorized users will see the role in the list of roles they can assume using Noq.","title":"Configure Credential Brokering"},{"location":"getting_started/enable_users_to_assume_roles/#configure-credential-brokering","text":"You may enable users and groups to assume AWS roles using Noq self-service controls. To do this, follow the steps in the procedure below to tag AWS roles with a user or group defined in your identify provider. You will use the Noq user interface to update the policy for a role with one or more new tags. After a role tag is updated, it might take 1-2 minutes for the role to be available to users for whom you have enabled access.","title":"Configure Credential Brokering"},{"location":"getting_started/enable_users_to_assume_roles/#prerequites","text":"Before you can authorize users and groups to assume AWS roles, you must follow the steps in the Configure Credential Brokering procedure. Please ensure you have completed that procedure before continuing.","title":"Prerequites"},{"location":"getting_started/enable_users_to_assume_roles/#procedure","text":"","title":"Procedure"},{"location":"getting_started/enable_users_to_assume_roles/#1-navigate-to-all-cloud-resources","text":"Select Resources > All Cloud Resources from the Noq main menu. You should then see a page similar to the following.","title":"1. Navigate to All Cloud Resources"},{"location":"getting_started/enable_users_to_assume_roles/#2-optional-filter-resources-to-find-the-role-you-want-to-enable","text":"In the Resource search box, begin typing the name of the role you want to enable for one or more users. This will filter the list of resources to just those matching the string you enter.","title":"2. Optional: Filter resources to find the role you want to enable"},{"location":"getting_started/enable_users_to_assume_roles/#3-select-the-role-you-want-to-enable","text":"Select the role you want to enable from the list of resources.","title":"3. Select the role you want to enable"},{"location":"getting_started/enable_users_to_assume_roles/#4-select-tags-from-the-edit-policy-view","text":"From the Edit Policy view, click the Tags tab. This will enable you to edit tags for the role.","title":"4. Select tags from the Edit Policy view"},{"location":"getting_started/enable_users_to_assume_roles/#5-click-the-create-new-tag-button","text":"","title":"5. Click the Create New Tag button"},{"location":"getting_started/enable_users_to_assume_roles/#6-add-a-tag-authorizing-a-user-or-group-who-can-assume-the-role","text":"In Configure Credential Brokering you set up one or more keys to use in brokering roles to users and groups. Use one or more of those keys here to enable users to assume the role. Enter noq_authorized or another key you have configured for credential brokering as the key for the new tag. Enter the user or group name as the value for the new tag. Click the Add button.","title":"6. Add a tag authorizing a user or group who can assume the role"},{"location":"getting_started/enable_users_to_assume_roles/#7-optional-add-tags-for-additional-users-or-group-who-can-assume-the-role","text":"Repeat step 6 for all users you want to authorize to assume the role.","title":"7. Optional: Add tags for additional users or group who can assume the role"},{"location":"getting_started/enable_users_to_assume_roles/#8-click-save-to-update-the-policy-for-the-role","text":"","title":"8. Click Save to update the policy for the role"},{"location":"getting_started/enable_users_to_assume_roles/#9-enter-a-justification-and-expiration","text":"Describe why you are authorizing these users and groups you've identified to assume the role. You may also enter an expiration date for credential brokering if desired.","title":"9. Enter a justification and expiration"},{"location":"getting_started/enable_users_to_assume_roles/#next-steps","text":"After Noq propagates the policy changes, authorized users will see the role in the list of roles they can assume using Noq.","title":"Next Steps"},{"location":"getting_started/noq_administration/","text":"Noq Administration \u00b6 Noq is a Software as a Service (SaaS) platform and set of client-side tools that enable cloud administrators developers to manage AWS access and fine-grained permissions more easily and quickly and without the need for deep expertise with AWS Identity and Access Management (IAM). Noq automates much of the policy creation work for cloud administrators and significantly reduces over-provisioning permissions. In addition, Noq reduces the burden of supporting permissions requests from engineers by brokering credentials based on self-serve permissions policies and other features. To get started with Noq administration, see the following user guides. Connect your AWS Hub Account Update Account Names Enable Credential Brokering Configure Credential Brokering Enable the Weep CLI Utility You may also want to review the following administration guides to enable additional Noq functionality. Configure Automatic Updates to Trust Policies Connect Additional Spoke Accounts Enable IP Restrictions Configure AWS Event Bridge","title":"Noq Administration"},{"location":"getting_started/noq_administration/#noq-administration","text":"Noq is a Software as a Service (SaaS) platform and set of client-side tools that enable cloud administrators developers to manage AWS access and fine-grained permissions more easily and quickly and without the need for deep expertise with AWS Identity and Access Management (IAM). Noq automates much of the policy creation work for cloud administrators and significantly reduces over-provisioning permissions. In addition, Noq reduces the burden of supporting permissions requests from engineers by brokering credentials based on self-serve permissions policies and other features. To get started with Noq administration, see the following user guides. Connect your AWS Hub Account Update Account Names Enable Credential Brokering Configure Credential Brokering Enable the Weep CLI Utility You may also want to review the following administration guides to enable additional Noq functionality. Configure Automatic Updates to Trust Policies Connect Additional Spoke Accounts Enable IP Restrictions Configure AWS Event Bridge","title":"Noq Administration"},{"location":"getting_started/noq_usage/","text":"Noq Usage \u00b6 As a Noq user, you have access to Noq's credential brokering services for all roles you may assume. You may also use the Weep CLI utility. Weep makes it easy to use credentials from Noq for local development. Weep gets AWS credentials from Noq and serves them to your AWS CLI or SDKs. Weep caches credentials and, in many cases, can refresh credentials automatically. To learn more about credential brokering in Noq see the following user guides. Access the AWS Console with Assumed Roles Request Self-Serve Permissions To get started with Weep, see the following resources. Getting Started with the Weep CLI Utility Set up the Weep CLI Utility","title":"Noq Usage"},{"location":"getting_started/noq_usage/#noq-usage","text":"As a Noq user, you have access to Noq's credential brokering services for all roles you may assume. You may also use the Weep CLI utility. Weep makes it easy to use credentials from Noq for local development. Weep gets AWS credentials from Noq and serves them to your AWS CLI or SDKs. Weep caches credentials and, in many cases, can refresh credentials automatically. To learn more about credential brokering in Noq see the following user guides. Access the AWS Console with Assumed Roles Request Self-Serve Permissions To get started with Weep, see the following resources. Getting Started with the Weep CLI Utility Set up the Weep CLI Utility","title":"Noq Usage"},{"location":"getting_started/self_serve_permissions/","text":"Request Self-Serve Permissions \u00b6 You may request permissions to access AWS resources in Noq using the self-service permissions user interface. With this interface you specify the role you want to add permissions to, along with the resources you need to access and desired permissions. You may also specify an expiration date for the additonal permissions you request. Procedure \u00b6 1. Navigate to Self-Service Permissions \u00b6 Select Resources > Self-Service Permissions from the main Noq menu. 2. Select a role \u00b6 Identify the role to which you want to add permissions by typing the first few characters of the role identifier and then selecting the desired role from the typeahead dropdown that appears. Note If no roles appear in the typeahead dropdown as you type, Noq may not have finished caching resources from your account. 3. Optional: Add an expiration date to create temporary permissions \u00b6 You may make the added permissions temporary by selecting an expiration date. Note This setting is optional. 4. Click the Next button \u00b6 When you've finished with the Select Role screen, click the Next button to advance to the Modify Policy screen. 5. Select the resource type \u00b6 Select the resource type for which you'd like to add permissions. 6. Select the resource identifier \u00b6 Identify the resource for which you want to add permissions by typing the first few characters of the resource identifier and then selecting the resource from the typeahead dropdown that appears. 7. Add desired permissions \u00b6 Select the permissions you'd like to add from the dropdown. You may add multiple permissions from this dropdown. 8. Click the Add Permission button \u00b6 Click the Add Permission button to update the policy with the new permissions you've selected. 9. Optional: Edit the generated policy \u00b6 If desired, you may view and edit the generated policy by clicking on the Advanced Editor link. Edit the policy as desired to suit your permissions request. 10. Click the Next button \u00b6 When you've finished with the Modify Policy screen, click the Next button to advance to the Review and Submit screen. 11. Review your changes \u00b6 Review your policy changes in the editor. You may edit your changes directly in the editor or click the Go Back button to revise your changes. 12. Enter a justification and submit for review \u00b6 Enter a justification for the additional permissions you are requesting, then click the Submit for Review button. Next Steps \u00b6 Check the status of your request. You may view all your policy requests by selecting Resources > All Policy Requests from the main Noq menu. Click the request id to view the details and status of the request.","title":"Request Self-Serve Permissions"},{"location":"getting_started/self_serve_permissions/#request-self-serve-permissions","text":"You may request permissions to access AWS resources in Noq using the self-service permissions user interface. With this interface you specify the role you want to add permissions to, along with the resources you need to access and desired permissions. You may also specify an expiration date for the additonal permissions you request.","title":"Request Self-Serve Permissions"},{"location":"getting_started/self_serve_permissions/#procedure","text":"","title":"Procedure"},{"location":"getting_started/self_serve_permissions/#1-navigate-to-self-service-permissions","text":"Select Resources > Self-Service Permissions from the main Noq menu.","title":"1. Navigate to Self-Service Permissions"},{"location":"getting_started/self_serve_permissions/#2-select-a-role","text":"Identify the role to which you want to add permissions by typing the first few characters of the role identifier and then selecting the desired role from the typeahead dropdown that appears. Note If no roles appear in the typeahead dropdown as you type, Noq may not have finished caching resources from your account.","title":"2. Select a role"},{"location":"getting_started/self_serve_permissions/#3-optional-add-an-expiration-date-to-create-temporary-permissions","text":"You may make the added permissions temporary by selecting an expiration date. Note This setting is optional.","title":"3. Optional: Add an expiration date to create temporary permissions"},{"location":"getting_started/self_serve_permissions/#4-click-the-next-button","text":"When you've finished with the Select Role screen, click the Next button to advance to the Modify Policy screen.","title":"4. Click the Next button"},{"location":"getting_started/self_serve_permissions/#5-select-the-resource-type","text":"Select the resource type for which you'd like to add permissions.","title":"5. Select the resource type"},{"location":"getting_started/self_serve_permissions/#6-select-the-resource-identifier","text":"Identify the resource for which you want to add permissions by typing the first few characters of the resource identifier and then selecting the resource from the typeahead dropdown that appears.","title":"6. Select the resource identifier"},{"location":"getting_started/self_serve_permissions/#7-add-desired-permissions","text":"Select the permissions you'd like to add from the dropdown. You may add multiple permissions from this dropdown.","title":"7. Add desired permissions"},{"location":"getting_started/self_serve_permissions/#8-click-the-add-permission-button","text":"Click the Add Permission button to update the policy with the new permissions you've selected.","title":"8. Click the Add Permission button"},{"location":"getting_started/self_serve_permissions/#9-optional-edit-the-generated-policy","text":"If desired, you may view and edit the generated policy by clicking on the Advanced Editor link. Edit the policy as desired to suit your permissions request.","title":"9. Optional: Edit the generated policy"},{"location":"getting_started/self_serve_permissions/#10-click-the-next-button","text":"When you've finished with the Modify Policy screen, click the Next button to advance to the Review and Submit screen.","title":"10. Click the Next button"},{"location":"getting_started/self_serve_permissions/#11-review-your-changes","text":"Review your policy changes in the editor. You may edit your changes directly in the editor or click the Go Back button to revise your changes.","title":"11. Review your changes"},{"location":"getting_started/self_serve_permissions/#12-enter-a-justification-and-submit-for-review","text":"Enter a justification for the additional permissions you are requesting, then click the Submit for Review button.","title":"12. Enter a justification and submit for review"},{"location":"getting_started/self_serve_permissions/#next-steps","text":"Check the status of your request. You may view all your policy requests by selecting Resources > All Policy Requests from the main Noq menu. Click the request id to view the details and status of the request.","title":"Next Steps"},{"location":"getting_started/weep_cli_overview/","text":"Weep CLI Overview \u00b6 Weep is a CLI utility that makes it easy to use credentials from Noq for local development. Weep gets AWS credentials from Noq and serves them to your AWS CLI or SDKs. Weep caches credentials and, in many cases, can refresh credentials automatically. Weep offers five methods to serve credentials: Emulate the ECS credential provider Emulate the EC2 instance metadata service Set Weep as the AWS CLI credential_process Export credentials to environment variables Write credentials to your AWS credentials file You may also perform role chaining with Weep using most of the above methods. Installation \u00b6 To install and configure Weep, follow the user guide to Set up the Weep CLI Utility . Usage \u00b6 Weep is a CLI tool that manages AWS access via ConsoleMe for local development. Usage: weep [command] Available Commands: credential_process Retrieve credentials on the fly via the AWS SDK export Retrieve credentials to be exported as environment variables file Retrieve credentials and save them to a credentials file help Help about any command imds Run a local Instance Metadata Service (IMDS) endpoint that serves credentials list List available roles serve Run a local ECS Credential Provider endpoint that serves and caches credentials for roles on demand setup Print setup information version Print version information Flags: -A, --assume-role strings one or more roles to assume after retrieving credentials -c, --config string config file (default is $HOME/.weep.yaml) -h, --help help for weep --log-file string log file path (default \"tmp/weep.log\") --log-format string log format (json or tty) --log-level string log level (debug, info, warn) -n, --no-ip remove IP restrictions Use \"weep [command] --help\" for more information about a command.","title":"Weep CLI Utility"},{"location":"getting_started/weep_cli_overview/#weep-cli-overview","text":"Weep is a CLI utility that makes it easy to use credentials from Noq for local development. Weep gets AWS credentials from Noq and serves them to your AWS CLI or SDKs. Weep caches credentials and, in many cases, can refresh credentials automatically. Weep offers five methods to serve credentials: Emulate the ECS credential provider Emulate the EC2 instance metadata service Set Weep as the AWS CLI credential_process Export credentials to environment variables Write credentials to your AWS credentials file You may also perform role chaining with Weep using most of the above methods.","title":"Weep CLI Overview"},{"location":"getting_started/weep_cli_overview/#installation","text":"To install and configure Weep, follow the user guide to Set up the Weep CLI Utility .","title":"Installation"},{"location":"getting_started/weep_cli_overview/#usage","text":"Weep is a CLI tool that manages AWS access via ConsoleMe for local development. Usage: weep [command] Available Commands: credential_process Retrieve credentials on the fly via the AWS SDK export Retrieve credentials to be exported as environment variables file Retrieve credentials and save them to a credentials file help Help about any command imds Run a local Instance Metadata Service (IMDS) endpoint that serves credentials list List available roles serve Run a local ECS Credential Provider endpoint that serves and caches credentials for roles on demand setup Print setup information version Print version information Flags: -A, --assume-role strings one or more roles to assume after retrieving credentials -c, --config string config file (default is $HOME/.weep.yaml) -h, --help help for weep --log-file string log file path (default \"tmp/weep.log\") --log-format string log format (json or tty) --log-level string log level (debug, info, warn) -n, --no-ip remove IP restrictions Use \"weep [command] --help\" for more information about a command.","title":"Usage"},{"location":"swagger/swagger/","text":"const ui = SwaggerUIBundle({ url: 'https://noq-docs-public.s3.us-west-2.amazonaws.com/swagger/swagger.yaml', dom_id: '#swagger-ui', })","title":"Swagger Documentation"},{"location":"weep/credential_process/","text":"Set Weep as the AWS CLI Credential Process \u00b6 You may configure a local AWS profile so that CLI commands and AWS SDKs source credentials from an external process. Use the weep credential_process command in your AWS configuration file to source credentials from Noq using this method. Note See the AWS documentation for more information on sourcing AWS credentials from an external process . Configuration \u00b6 To set Weep as the AWS CLI credential process, update your ~/.aws/config file to specify the profile you want to configure and role you want Weep to assume. You may specify the role using either the role name or ARN. [profile develop_1] credential_process = weep credential_process arn:aws:iam::012345678901:role/develop_1_test_admin [profile staging_1] credential_process = weep credential_process staging_1_test_admin [profile test_account_user] credential_process = weep credential_process test_account_user The AWS CLI will run the command specified for credential_process for each profile. It will rerun credential_process commands for temporary credentials before they expire. Usage \u00b6 To make use of the credentials provided by weep credential_process , run your application or AWS CLI command with the appropriate profile as illustrated in examples below. Shell \u00b6 AWS_PROFILE = test_account_user aws sts get-caller-identity # you can also use the --profile flag aws --profile test_account_user sts get-caller-identity SDK \u00b6 import boto3 session = boto3 . Session ( profile_name = \"test_account_user\" ) client = session . client ( \"sts\" ) print ( client . get_caller_identity ()) Update AWS Configuration File Automatically \u00b6 Weep can automatically update your AWS configuration file with profiles for each of your available roles. These profiles are named with the full ARN of the role. Warning AWS SDKs analyze your ~/.aws/config file on each API call. Depending on the number of roles you have available, using Weep to automatically create credential_process entries for all roles can drastically degrade performance. If you have read and understand the warning above, you may automatically update your AWS configuration file by running the following command. weep credential_process --generate","title":"Set as Credential Process"},{"location":"weep/credential_process/#set-weep-as-the-aws-cli-credential-process","text":"You may configure a local AWS profile so that CLI commands and AWS SDKs source credentials from an external process. Use the weep credential_process command in your AWS configuration file to source credentials from Noq using this method. Note See the AWS documentation for more information on sourcing AWS credentials from an external process .","title":"Set Weep as the AWS CLI Credential Process"},{"location":"weep/credential_process/#configuration","text":"To set Weep as the AWS CLI credential process, update your ~/.aws/config file to specify the profile you want to configure and role you want Weep to assume. You may specify the role using either the role name or ARN. [profile develop_1] credential_process = weep credential_process arn:aws:iam::012345678901:role/develop_1_test_admin [profile staging_1] credential_process = weep credential_process staging_1_test_admin [profile test_account_user] credential_process = weep credential_process test_account_user The AWS CLI will run the command specified for credential_process for each profile. It will rerun credential_process commands for temporary credentials before they expire.","title":"Configuration"},{"location":"weep/credential_process/#usage","text":"To make use of the credentials provided by weep credential_process , run your application or AWS CLI command with the appropriate profile as illustrated in examples below.","title":"Usage"},{"location":"weep/credential_process/#shell","text":"AWS_PROFILE = test_account_user aws sts get-caller-identity # you can also use the --profile flag aws --profile test_account_user sts get-caller-identity","title":"Shell"},{"location":"weep/credential_process/#sdk","text":"import boto3 session = boto3 . Session ( profile_name = \"test_account_user\" ) client = session . client ( \"sts\" ) print ( client . get_caller_identity ())","title":"SDK"},{"location":"weep/credential_process/#update-aws-configuration-file-automatically","text":"Weep can automatically update your AWS configuration file with profiles for each of your available roles. These profiles are named with the full ARN of the role. Warning AWS SDKs analyze your ~/.aws/config file on each API call. Depending on the number of roles you have available, using Weep to automatically create credential_process entries for all roles can drastically degrade performance. If you have read and understand the warning above, you may automatically update your AWS configuration file by running the following command. weep credential_process --generate","title":"Update AWS Configuration File Automatically"},{"location":"weep/emulate_imds/","text":"Emulate EC2 IMDS \u00b6 Weep supports emulating the EC2 Instance Metadata Service (IMDS) and the to provide credentials to your AWS SDK. This is the recommended way to use Weep for the best experience. IMDS Emulation \u00b6 This is a more advanced feature. It's more involved to get set up, but it lets you avoid setting an environment variable to use Weep. {% hint style=\"warning\" %} AWS SDKs expect IMDS to be served at http://169.254.169.254 . You will need to set up routing for this functionality to work. Instructions can be found in Advanced Configuration . To serve the IMDS endpoints, use the serve command along with a role identifier or search string: weep serve arn:aws:iam::012345678901:role/coolApp INFO [ 0000 ] Starting weep meta-data service... INFO [ 0000 ] Server started on: 127 .0.0.1:9090 curl http://169.254.169.254/latest/meta-data/iam/security-credentials/coolApp { \"Code\" : \"Success\" , \"LastUpdated\" : \"2018-08-01T15:26:14Z\" , \"Type\" : \"AWS-HMAC\" , \"AccessKeyId\" : \"ASIA ...","title":"Emulate EC2 IMDS"},{"location":"weep/emulate_imds/#emulate-ec2-imds","text":"Weep supports emulating the EC2 Instance Metadata Service (IMDS) and the to provide credentials to your AWS SDK. This is the recommended way to use Weep for the best experience.","title":"Emulate EC2 IMDS"},{"location":"weep/emulate_imds/#imds-emulation","text":"This is a more advanced feature. It's more involved to get set up, but it lets you avoid setting an environment variable to use Weep. {% hint style=\"warning\" %} AWS SDKs expect IMDS to be served at http://169.254.169.254 . You will need to set up routing for this functionality to work. Instructions can be found in Advanced Configuration . To serve the IMDS endpoints, use the serve command along with a role identifier or search string: weep serve arn:aws:iam::012345678901:role/coolApp INFO [ 0000 ] Starting weep meta-data service... INFO [ 0000 ] Server started on: 127 .0.0.1:9090 curl http://169.254.169.254/latest/meta-data/iam/security-credentials/coolApp { \"Code\" : \"Success\" , \"LastUpdated\" : \"2018-08-01T15:26:14Z\" , \"Type\" : \"AWS-HMAC\" , \"AccessKeyId\" : \"ASIA ...","title":"IMDS Emulation"},{"location":"weep/export_credentials_to_file/","text":"Export to AWS Shared Credentials File \u00b6 Use weep file to write credentials to the AWS shared credentials file in your home directory. The AWS CLI and SDKs retrieve credentials from this file if there is no other means of getting credentials that have higher precedence. See AWS configuration settings and precedence for information about precedence of credential sources. Export Credentials \u00b6 You may export credentials for the default profile or other profiles. Default Profile \u00b6 To export credentials for a role named example-aws-role , run the following command in a shell. weep file example-aws-role The will write to shared credentials file for the default profile, i.e. ~/.aws/credentials . cat ~/.aws/credentials [default] aws_access_key_id = ASIA4JEFLERSJZDM7YOH aws_secret_access_key = ..... aws_session_token = ..... Other Profiles \u00b6 To export credentials for an AWS profile other than the default, use the --profile flag. For example to export credentials for the role example-aws-role to the profile, test_account_user , run the following command. weep file example-aws-role --profile test_account_user Use Exported Credentials \u00b6 You may use exported credentials from a shell or SDK. Shell \u00b6 You may run your application or AWS CLI command from a shell with the appropriate profile as illustrated in the examples below. AWS_PROFILE = test_account_user aws sts get-caller-identity or # you can also use the --profile flag aws --profile test_account_user sts get-caller-identity SDK \u00b6 You may use also specify profiles and use exported credentials from an AWS SDK as illustrated in the Boto3 example below import boto3 session = boto3 . Session ( profile_name = \"test_account_user\" ) client = session . client ( \"sts\" ) print ( client . get_caller_identity ())","title":"Export to AWS Shared Credentials File"},{"location":"weep/export_credentials_to_file/#export-to-aws-shared-credentials-file","text":"Use weep file to write credentials to the AWS shared credentials file in your home directory. The AWS CLI and SDKs retrieve credentials from this file if there is no other means of getting credentials that have higher precedence. See AWS configuration settings and precedence for information about precedence of credential sources.","title":"Export to AWS Shared Credentials File"},{"location":"weep/export_credentials_to_file/#export-credentials","text":"You may export credentials for the default profile or other profiles.","title":"Export Credentials"},{"location":"weep/export_credentials_to_file/#default-profile","text":"To export credentials for a role named example-aws-role , run the following command in a shell. weep file example-aws-role The will write to shared credentials file for the default profile, i.e. ~/.aws/credentials . cat ~/.aws/credentials [default] aws_access_key_id = ASIA4JEFLERSJZDM7YOH aws_secret_access_key = ..... aws_session_token = .....","title":"Default Profile"},{"location":"weep/export_credentials_to_file/#other-profiles","text":"To export credentials for an AWS profile other than the default, use the --profile flag. For example to export credentials for the role example-aws-role to the profile, test_account_user , run the following command. weep file example-aws-role --profile test_account_user","title":"Other Profiles"},{"location":"weep/export_credentials_to_file/#use-exported-credentials","text":"You may use exported credentials from a shell or SDK.","title":"Use Exported Credentials"},{"location":"weep/export_credentials_to_file/#shell","text":"You may run your application or AWS CLI command from a shell with the appropriate profile as illustrated in the examples below. AWS_PROFILE = test_account_user aws sts get-caller-identity or # you can also use the --profile flag aws --profile test_account_user sts get-caller-identity","title":"Shell"},{"location":"weep/export_credentials_to_file/#sdk","text":"You may use also specify profiles and use exported credentials from an AWS SDK as illustrated in the Boto3 example below import boto3 session = boto3 . Session ( profile_name = \"test_account_user\" ) client = session . client ( \"sts\" ) print ( client . get_caller_identity ())","title":"SDK"},{"location":"weep/precedence_of_credential_sources/","text":"Credential Source Precedence \u00b6 It is possible to configure more than method of serving credentials using Weep and other tools. See AWS configuration settings and precedence for information about precedence of credential sources.","title":"Credential Source Precedence"},{"location":"weep/precedence_of_credential_sources/#credential-source-precedence","text":"It is possible to configure more than method of serving credentials using Weep and other tools. See AWS configuration settings and precedence for information about precedence of credential sources.","title":"Credential Source Precedence"},{"location":"weep/weep_emulate_ecs_credential_provider/","text":"Emulate ECS Credential Provider \u00b6 Use weep serve to serve AWS credentials by emulating the ECS credential provider . You may use this method to serve credentials to an AWS SDK or CLI. We recommend this method of using Weep to provide the best development experience. Configuration \u00b6 To configure this solution, set the AWS_CONTAINER_CREDENTIALS_FULL_URI environment variable in your shell or IDE. Each distinct shell or IDE can use Weep to request credentials for different roles. Weep will cache the credentials you request in-memory and refresh them when they are within 10 minutes of expiring. Note You do not need to configure IP tables or routing rules with this approach. Values for the AWS_CONTAINER_CREDENTIALS_FULL_URI should be structured as illustrated in the example below. AWS_CONTAINER_CREDENTIALS_FULL_URI = http://localhost:9091/ecs/example_role_1 \u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594 \u2594\u2594\u2594\u2594 \u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594 \u2502 \u2502 \u2514\u2500 Role name/search string \u2502 \u2514\u2500 Weep port ( probably 9091 ) \u2514\u2500 Weep hostname ( probably localhost ) Note You may specify either the full name of a role in the value for this environment variable or a search string against which to match roles. Weep will serve credentials for all matching roles and will refresh those roles as needed. Usage \u00b6 To use ECS credential provider emulation, in a shell, run Weep as illustrated in the example below. weep serve Then execute commands in the environment where AWS_CONTAINER_CREDENTIALS_FULL_URI is set (a shell or IDE). Shell \u00b6 With AWS_CONTAINER_CREDENTIALS_FULL_URI configured in your shell, you can run aws commands such as the following and Weep will broker the credentials you need. $ aws sts get-caller-identity { \"UserId\" : \"AROA4JEFLERSKVPFT4INI:alex@example.com\" , \"Account\" : \"123456789012\" , \"Arn\" : \"arn:aws:sts::123456789012:assumed-role/example_role_1/alex@example.com\" } IDE \u00b6 With AWS_CONTAINER_CREDENTIALS_FULL_URI configured in your IDE, you can execute statements such as the following and Weep will broker the necessary credentials. response = client . get_caller_identity () print ( response ) Example output { \"UserId\" : \"AROA6KW3MOV2F7J6AT4PC:user@example.com\" , \"Account\" : \"223456789012\" , \"Arn\" : \"arn:aws:sts::123456789012:assumed-role/example_role_1/alex@example.com\" }","title":"Emulate ECS Credential Provider"},{"location":"weep/weep_emulate_ecs_credential_provider/#emulate-ecs-credential-provider","text":"Use weep serve to serve AWS credentials by emulating the ECS credential provider . You may use this method to serve credentials to an AWS SDK or CLI. We recommend this method of using Weep to provide the best development experience.","title":"Emulate ECS Credential Provider"},{"location":"weep/weep_emulate_ecs_credential_provider/#configuration","text":"To configure this solution, set the AWS_CONTAINER_CREDENTIALS_FULL_URI environment variable in your shell or IDE. Each distinct shell or IDE can use Weep to request credentials for different roles. Weep will cache the credentials you request in-memory and refresh them when they are within 10 minutes of expiring. Note You do not need to configure IP tables or routing rules with this approach. Values for the AWS_CONTAINER_CREDENTIALS_FULL_URI should be structured as illustrated in the example below. AWS_CONTAINER_CREDENTIALS_FULL_URI = http://localhost:9091/ecs/example_role_1 \u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594 \u2594\u2594\u2594\u2594 \u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594 \u2502 \u2502 \u2514\u2500 Role name/search string \u2502 \u2514\u2500 Weep port ( probably 9091 ) \u2514\u2500 Weep hostname ( probably localhost ) Note You may specify either the full name of a role in the value for this environment variable or a search string against which to match roles. Weep will serve credentials for all matching roles and will refresh those roles as needed.","title":"Configuration"},{"location":"weep/weep_emulate_ecs_credential_provider/#usage","text":"To use ECS credential provider emulation, in a shell, run Weep as illustrated in the example below. weep serve Then execute commands in the environment where AWS_CONTAINER_CREDENTIALS_FULL_URI is set (a shell or IDE).","title":"Usage"},{"location":"weep/weep_emulate_ecs_credential_provider/#shell","text":"With AWS_CONTAINER_CREDENTIALS_FULL_URI configured in your shell, you can run aws commands such as the following and Weep will broker the credentials you need. $ aws sts get-caller-identity { \"UserId\" : \"AROA4JEFLERSKVPFT4INI:alex@example.com\" , \"Account\" : \"123456789012\" , \"Arn\" : \"arn:aws:sts::123456789012:assumed-role/example_role_1/alex@example.com\" }","title":"Shell"},{"location":"weep/weep_emulate_ecs_credential_provider/#ide","text":"With AWS_CONTAINER_CREDENTIALS_FULL_URI configured in your IDE, you can execute statements such as the following and Weep will broker the necessary credentials. response = client . get_caller_identity () print ( response ) Example output { \"UserId\" : \"AROA6KW3MOV2F7J6AT4PC:user@example.com\" , \"Account\" : \"223456789012\" , \"Arn\" : \"arn:aws:sts::123456789012:assumed-role/example_role_1/alex@example.com\" }","title":"IDE"},{"location":"weep/weep_export_credentials_to_environment_variables/","text":"Export Credentials to Environment Variables \u00b6 Use weep export to export credentials to environment variables . Weep will do its best to detect your shell and generate the correct export command for your system. Tip The Emulate ECS credential provider method is the recommended option for serving credentials with Weep. It provides the best development experience. Export Credentials \u00b6 You must specify a single role for which you want to export credentials as the argument to weep export . For example, to export the credentials for the role example-aws-role , you would issue the following command in the Bash shell. weep export example-aws-role This will produce a command for the Bash shell that, when run, will export the credentials for this role. To export credentials, eval the command produced by weep export for your shell. Weep currently supports Bash, Zsh, and Fish. Select your shell from the tabs below and copy/paste the command to export your credentials. Bash Zsh Fish eval $( weep export example-aws-role ) eval $( weep export example-aws-role ) eval ( weep export example-aws-role ) Verify \u00b6 Verify that credentials are set in your environment using the env command. env | grep AWS","title":"Export Credentials to Environment Variables"},{"location":"weep/weep_export_credentials_to_environment_variables/#export-credentials-to-environment-variables","text":"Use weep export to export credentials to environment variables . Weep will do its best to detect your shell and generate the correct export command for your system. Tip The Emulate ECS credential provider method is the recommended option for serving credentials with Weep. It provides the best development experience.","title":"Export Credentials to Environment Variables"},{"location":"weep/weep_export_credentials_to_environment_variables/#export-credentials","text":"You must specify a single role for which you want to export credentials as the argument to weep export . For example, to export the credentials for the role example-aws-role , you would issue the following command in the Bash shell. weep export example-aws-role This will produce a command for the Bash shell that, when run, will export the credentials for this role. To export credentials, eval the command produced by weep export for your shell. Weep currently supports Bash, Zsh, and Fish. Select your shell from the tabs below and copy/paste the command to export your credentials. Bash Zsh Fish eval $( weep export example-aws-role ) eval $( weep export example-aws-role ) eval ( weep export example-aws-role )","title":"Export Credentials"},{"location":"weep/weep_export_credentials_to_environment_variables/#verify","text":"Verify that credentials are set in your environment using the env command. env | grep AWS","title":"Verify"},{"location":"weep/weep_features/","text":"Credential Serving Options \u00b6 Weep is a CLI utility that makes it easy to use credentials from Noq for local development. Weep gets AWS credentials from Noq and serves them to your AWS CLI or SDKs. Weep caches credentials and, in many cases, can refresh credentials automatically. Weep offers five methods to serve credentials. See the sections below for details on each method. Emulate the ECS credential provider \u00b6 This provides a convenient way to get credentials on-demand, without the need to set up networking rules. Using this method, each of your shells or IDEs can use a different role. Weep will cache these credentials and refresh them on demand. See the Amazon AWS documentation for details on the ECS credentials provider . Tip Emulating the ECS credential provider is the recommended option for serving credentials with Weep. It provides the best development experience. Emulate the EC2 instance metadata service \u00b6 See the Amazon AWS documentation for details on the EC2 instance metadata service . Set Weep as the AWS CLI credential_process \u00b6 See the AWS documentation for details on the CLI credential_process config setting Warning If you have a large number of roles, using this method to serve credentials might introduce performance problems. Export credentials to environment variables \u00b6 See the AWS documentation for details on using environment variables Write credentials to your AWS credentials file \u00b6 See the AWS documentation for details on configuration and credential file settings Role chaining with Weep \u00b6 You may use Weep to perform nested assume-role calls on your behalf and serve the assumed role credentials. The example below shows this flow when using Weep to emulate the ECS credential provider. You may also perform role chaining with most of Weep's other methods of serving credentials.","title":"Credential Serving Options"},{"location":"weep/weep_features/#credential-serving-options","text":"Weep is a CLI utility that makes it easy to use credentials from Noq for local development. Weep gets AWS credentials from Noq and serves them to your AWS CLI or SDKs. Weep caches credentials and, in many cases, can refresh credentials automatically. Weep offers five methods to serve credentials. See the sections below for details on each method.","title":"Credential Serving Options"},{"location":"weep/weep_features/#emulate-the-ecs-credential-provider","text":"This provides a convenient way to get credentials on-demand, without the need to set up networking rules. Using this method, each of your shells or IDEs can use a different role. Weep will cache these credentials and refresh them on demand. See the Amazon AWS documentation for details on the ECS credentials provider . Tip Emulating the ECS credential provider is the recommended option for serving credentials with Weep. It provides the best development experience.","title":"Emulate the ECS credential provider"},{"location":"weep/weep_features/#emulate-the-ec2-instance-metadata-service","text":"See the Amazon AWS documentation for details on the EC2 instance metadata service .","title":"Emulate the EC2 instance metadata service"},{"location":"weep/weep_features/#set-weep-as-the-aws-cli-credential_process","text":"See the AWS documentation for details on the CLI credential_process config setting Warning If you have a large number of roles, using this method to serve credentials might introduce performance problems.","title":"Set Weep as the AWS CLI credential_process"},{"location":"weep/weep_features/#export-credentials-to-environment-variables","text":"See the AWS documentation for details on using environment variables","title":"Export credentials to environment variables"},{"location":"weep/weep_features/#write-credentials-to-your-aws-credentials-file","text":"See the AWS documentation for details on configuration and credential file settings","title":"Write credentials to your AWS credentials file"},{"location":"weep/weep_features/#role-chaining-with-weep","text":"You may use Weep to perform nested assume-role calls on your behalf and serve the assumed role credentials. The example below shows this flow when using Weep to emulate the ECS credential provider. You may also perform role chaining with most of Weep's other methods of serving credentials.","title":"Role chaining with Weep"},{"location":"weep/weep_list_roles/","text":"List Roles \u00b6 The Weep list command shows you the roles you have access to via Noq. Note By default, list shows only your console roles. weep list Roles: arn:aws:iam::012345678901:role/admin arn:aws:iam::112345678901:role/poweruser arn:aws:iam::212345678901:role/readonly arn:aws:iam::312345678901:role/admin ... Use the -a or --all flag to include application roles. weep list -a Roles: arn:aws:iam::012345678901:role/admin arn:aws:iam::112345678901:role/poweruser arn:aws:iam::212345678901:role/readonly arn:aws:iam::312345678901:role/admin arn:aws:iam::240032848297:role/amplify-lambda-e74ff59d ...","title":"List Roles"},{"location":"weep/weep_list_roles/#list-roles","text":"The Weep list command shows you the roles you have access to via Noq. Note By default, list shows only your console roles. weep list Roles: arn:aws:iam::012345678901:role/admin arn:aws:iam::112345678901:role/poweruser arn:aws:iam::212345678901:role/readonly arn:aws:iam::312345678901:role/admin ... Use the -a or --all flag to include application roles. weep list -a Roles: arn:aws:iam::012345678901:role/admin arn:aws:iam::112345678901:role/poweruser arn:aws:iam::212345678901:role/readonly arn:aws:iam::312345678901:role/admin arn:aws:iam::240032848297:role/amplify-lambda-e74ff59d ...","title":"List Roles"}]}