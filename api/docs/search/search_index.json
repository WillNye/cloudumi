{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"The Noq Platform \u00b6 What is it, and how does it work? \u00b6 The Noq platform is based on ConsoleMe , an open source project created and maintained by Noq's cofounder. Noq is a SaaS-based platform that enables cloud administrators and developers to manage AWS access and fine-grained permissions without requiring prior permissions knowledge or expertise. Noq provides the following features: Permissions Management and Request Framework An IAM Self-Service Wizard that lets users request IAM permissions in plain English, simplifying all AWS actions into CRUD operations that you can customize Generates cross-account resource policies automatically for supported resource types (Currently: IAM, S3, SQS, and SNS) Typeaheads on all known cloud resources, across your entire multi-account environment Automatically approves and applies low-risk permission requests, according to rules that you create Cloud administrators can create/clone IAM roles and natively manage IAM roles, users, inline/managed policies, S3 Buckets, SQS queues, and SNS topics across hundreds of accounts in a single interface. Coming Soon! View a minimized effective policy for a role, without needing to view all inline and managed policies Remove unused permissions from a role View and roll back any IAM resource to its previous state within the past 90 days, as it was recorded in AWS Config Request policy changes for multiple roles in a single request Role recommendations: Noq will help you break up your over-privileged roles to least-privileged roles based on a user or group of users Credential Management Broker temporary, 1 hour credentials to any role within your AWS environment Worried about credentials expiring during a long-lived operation? Don't be! Weep (The CLI utility for ConsoleMe) is compatible with Noq. Weep emulates the ECS credential provider and EC2 instance metadata service on a user's system. Force 2-factor step-up authentication to protect sensitive roles or accounts IP restrict all brokered credentials based on your VPN IP space, and/or to the user's IP address 1-Click access to most cloud resources across your environment Role tags define which users and/or groups can have credentials for a role","title":"Home"},{"location":"#the-noq-platform","text":"","title":"The Noq Platform"},{"location":"#what-is-it-and-how-does-it-work","text":"The Noq platform is based on ConsoleMe , an open source project created and maintained by Noq's cofounder. Noq is a SaaS-based platform that enables cloud administrators and developers to manage AWS access and fine-grained permissions without requiring prior permissions knowledge or expertise. Noq provides the following features: Permissions Management and Request Framework An IAM Self-Service Wizard that lets users request IAM permissions in plain English, simplifying all AWS actions into CRUD operations that you can customize Generates cross-account resource policies automatically for supported resource types (Currently: IAM, S3, SQS, and SNS) Typeaheads on all known cloud resources, across your entire multi-account environment Automatically approves and applies low-risk permission requests, according to rules that you create Cloud administrators can create/clone IAM roles and natively manage IAM roles, users, inline/managed policies, S3 Buckets, SQS queues, and SNS topics across hundreds of accounts in a single interface. Coming Soon! View a minimized effective policy for a role, without needing to view all inline and managed policies Remove unused permissions from a role View and roll back any IAM resource to its previous state within the past 90 days, as it was recorded in AWS Config Request policy changes for multiple roles in a single request Role recommendations: Noq will help you break up your over-privileged roles to least-privileged roles based on a user or group of users Credential Management Broker temporary, 1 hour credentials to any role within your AWS environment Worried about credentials expiring during a long-lived operation? Don't be! Weep (The CLI utility for ConsoleMe) is compatible with Noq. Weep emulates the ECS credential provider and EC2 instance metadata service on a user's system. Force 2-factor step-up authentication to protect sensitive roles or accounts IP restrict all brokered credentials based on your VPN IP space, and/or to the user's IP address 1-Click access to most cloud resources across your environment Role tags define which users and/or groups can have credentials for a role","title":"What is it, and how does it work?"},{"location":"iam/","text":"Central Account Role Permissions Noq will always assume in to your central account role in order to access your environment. This is Noq's entrypoint in to your environment. As a security precaution, Noq assigns a random ExternalID to your tenant on Noq. We will always pass this ExternalId when assuming a role. If the ExternalId does not match, the assume role connection will not be permitted. Noq also has the capability to broker credentials to authorized users or groups for all other roles within your environment. To allow this, please enable credential brokering in the Settings page, and specify tags that Noq can use to identify the authorized users and groups allowed to access each role. The Central Role requires the following permissions: Permission Resource Purpose sts:AssumeRole ** Assume all Noq spoke roles across the customer's accounts. Assume all roles for the purpose of credential brokering (Note: This only works if the target roles allow the Central Role to call sts:AssumeRole and sts:TagSession within their Trust Policy.) sts:TagSession ** Allow Noq to pass session tags when performing a role assumption. Spoke Role Account Permissions Noq's spoke roles are assumed by the Noq central role to cache information about your accounts and cloud resources, and to update identity and resource policies. One spoke role should exist on each of your accounts, including the account that your central role resides on. Noq performs the following steps to cache IAM resources across your account: Assume Central Role with unique ExternalID Assume Spoke Role on the target account Use Spoke Role credentials to call IAM APIs to determine resources Permission Resource Purpose config:BatchGet* ** Retrieve AWS Config details for your resources ; Will allow policy rollback config:List* ** Retrieve information about AWS resources to list in a single source of truth config:Select* ** Query AWS Config ec2:describeregions ** Retrieve active regions for your AWS environment iam:AttachRolePolicy ** Attach managed policies to IAM roles iam:AttachUserPolicy ** Attach managed policies to IAM users iam:CreateInstanceProfile ** Create an instance profile (We do this when creating or cloning roles) iam:CreateRole ** Create or clone an IAM role iam:DeleteAccessKey ** Delete an IAM access key during IAM user deletion iam:DeleteInstanceProfile ** Delete instance profiles during role deletion iam:DeleteRole ** Allows Noq to delete roles iam:DeletePolicy ** Delete managed policies iam:DeletePolicyVersion ** Delete a managed policy version, used when updating managed policies iam:DeleteRolePermissionsBoundary ** Remove a permissions boundary from a role iam:DeleteRolePolicy ** Remove an inline policy from a role iam:DeleteUser ** Allows Noq to delete users iam:DeleteUserPermissionsBoundary ** Allows Noq to remove a user's permission boundary iam:DeleteUserPolicy ** Allow Noq to delete User inline policies iam:DeleteVirtualMFADevice ** Used by Noq when deleting IAM users iam:DetachRolePolicy ** Allow Noq to remove managed policies from IAM roles iam:DetachUserPolicy ** Allow Noq to remove managed policies from IAM users iam:GenerateCredentialReport ** Generate credential usage report iam:GenerateOrganizationsAccessReport ** Generates a report for service last accessed data for Organizations. iam:GenerateServiceLastAccessedDetails ** Use Access Advisor to determine unused services for IAM roles and users iam:GetAccessKeyLastUsed ** Determine when an IAM access key was last used iam:GetAccountAuthorizationDetails ** Retrieve context about all IAM resources on the account. iam:GetAccountSummary ** Retrieves account status and quota details iam:GetCredentialReport ** Determine status of IAM credentials on an account iam:GetGroup ** Get an IAM group iam:GetGroupPolicy ** Get the policy for an IAM group iam:GetInstanceProfile ** Get details about an instance profile iam:GetPolicy ** Retrieve information about a manged policy iam:GetPolicyVersion ** Retrieve a specific version of an IAM managed policy iam:GetRole ** Get a role (Used for policy editing and self-service) iam:GetRolePolicy ** Get a role's inline policy (Used for policy editing and self-service) iam:GetServiceLastAccessedDetails ** Used for removing unused service permissions iam:GetServiceLastAccessedDetailsWithEntities ** Used for removing unused service permissions iam:GetUser ** Retrieve an IAM user for policy editing and self-service iam:GetUserPolicy ** Retrieve an IAM user inline policy for policy editing and self-service iam:ListAccessKeys ** List IAM user access keys iam:ListAccountAliases ** List account aliases for determining account name iam:ListAttachedRolePolicies ** Used for policy editing / self-service iam:ListAttachedUserPolicies ** Used for policy editing / self-service iam:ListEntitiesForPolicy ** Used for policy editing / self-service iam:ListGroupPolicies ** Used for policy editing / self-service iam:ListGroups ** Used for policy editing / self-service iam:ListGroupsForUser ** Used for policy editing / self-service iam:ListInstanceProfileTags ** Used for policy editing / self-service iam:ListInstanceProfiles ** Used for policy editing / self-service iam:ListInstanceProfilesForRole ** Used for policy editing / self-service iam:ListPolicies ** Used to cache managed policy names iam:ListPolicyTags ** Used for policy editing / self-service iam:ListPolicyVersions ** Used for policy editing / self-service iam:ListRolePolicies ** Used for policy editing / self-service iam:ListRoleTags ** Used for policy editing / self-service iam:ListRoles ** Used for policy editing / self-service iam:ListUserPolicies ** Used for policy editing / self-service iam:ListUserTags ** Used for policy editing / self-service iam:ListUsers ** Used for policy editing / self-service iam:PutRolePermissionsBoundary ** Used for policy editing / self-service iam:PutRolePolicy ** Used for policy editing / self-service iam:PutUserPermissionsBoundary ** Used for policy editing / self-service iam:PutUserPolicy ** Used for policy editing / self-service iam:RemoveRoleFromInstanceProfile ** Used when deleting roles iam:RemoveUserFromGroup ** Used when deleting users iam:SetDefaultPolicyVersion ** Used when updating managed policies iam:SimulateCustomPolicy ** Used when determining if an action is allowed iam:SimulatePrincipalPolicy ** Used when determining if an action is allowed iam:TagInstanceProfile ** Used when creating a role iam:TagPolicy ** Used for policy editing / self-service iam:TagRole ** Used for policy editing / self-service iam:TagUser ** Used for policy editing / self-service iam:UntagInstanceProfile ** Used when deleting a role iam:UntagPolicy ** Used for policy editing / self-service iam:UntagRole ** Used for policy editing / self-service iam:UntagUser ** Used for policy editing / self-service iam:UpdateAssumeRolePolicy ** Used for policy editing / self-service iam:UpdateRole ** Used for policy editing / self-service iam:UpdateRoleDescription ** Used for policy editing / self-service iam:UpdateUser ** Used for policy editing / self-service s3:GetBucketPolicy ** Retrieve information about your S3 buckets ; Enable modifying buckets s3:GetBucketTagging ** Used for policy editing / self-service s3:ListAllMyBuckets ** Cache all bucket ARNs for typeahead and policy editing s3:ListBucket ** Used for policy editing / self-service s3:PutBucketPolicy ** Used for policy editing / self-service s3:PutBucketTagging ** Used for policy editing / self-service sns:GetTopicAttributes ** Retrieve information about your SNS topics ; Enable modifying topics sns:ListTagsForResource ** Used for policy editing / self-service sns:ListTopics ** Policy editing, and global view of all SNs topics sns:SetTopicAttributes ** Used for policy editing / self-service sns:TagResource ** Used for policy editing / self-service sns:UnTagResource ** Used for policy editing / self-service sqs:GetQueueAttributes ** Retrieve information about your SQS queues ; Enable modifying queues sqs:GetQueueUrl ** Used in SNS policy editor sqs:ListQueues ** Used to provide global view of all SQS queues sqs:ListQueueTags ** Used for policy editing / self-service sqs:SetQueueAttributes ** Used for policy editing / self-service sqs:TagQueue ** Used for policy editing / self-service sqs:UntagQueue ** Used for policy editing / self-service","title":"IAM Permissions"},{"location":"tasks/","text":"Noq runs jobs periodically in your environment to cache your roles and cloud resources. Below is a list of tasks we run, their schedule, and description: Task Schedule Description Cache IAM Resources Every 45 Minutes Refreshes Noq's cache of all of your IAM resources across all accounts Cache Resources Table Every 30 Minutes Refreshes the /policies table Cache S3 buckets Every 45 Minutes Refreshes Noq's cache of all of your S3 buckets across all accounts Cache SQS queues Every 45 Minutes Refreshes Noq's cache of all of your SQS queues across all accounts Cache SNS Topics Eery 45 Minutes Refreshes Noq's cache of all of your SNS topics across all accounts Cache Resources from AWS Config Every 1 Hour Refreshes Noq's cache of all various AWS resource types from AWS Config Cache Cloudtrail Errors Every 1 Hour Refreshes Noq's cache of all recently Cloudtrail errors Cache Cloud Accounts Every 1 Hour/On Demand Refreshes Noq's database of all cloud accounts in your environment Generate and cache Credential Authorization Mapping Every 5 Minutes Generates a mapping of usernames/groups to IAM roles they are authorized to retrieve credentials for Cache SCPs Every 1 Hour Refreshes Noq's database of all service control policies across all configured AWS orgnazations in your environment Cache Resource Templates Every 30 Minutes Refreshes Noq's database of all Terraform templates from configured repos Cache Self-Service Typeahead Every 30 Minutes Refreshes Noq's cache of all resource typeaheads across the environment","title":"Tasks"},{"location":"features/credential_management/alfred_integration/","text":"For ease of role login, you can integrate Noq with Alfred, Albert, or other productivity tools by setting up a custom search engine. In Alfred: Go to Web Search -> \"Add Custom Search\" Fill in the appropriate attributes seen below. Replace with your noq tenant URL prefix.","title":"Alfred Integration"},{"location":"features/credential_management/aws_cli_credentials/","text":"Weep offers a number of ways to manage CLI credentials from Noq. Check out the open-source Weep documentation for more details. Challenge Authentication \u00b6 Weep authenticates to the Noq backend through a standalone challenge authentication response. The challenge authentication flow is as follows: Client sends a GET request to the Noq tenant's challenge endpoint. The server generates and stores a temporary token for the authentication request. A token is scoped to the username sent in the request and expires after a couple of minutes. Noq tells the client where the user should authenticate it in their browser (challenge_url), and where to poll (polling_url). Client starts polling the unauthenticated polling_url every couple of seconds until the token expires after a couple of minutes. The user is redirected to the Challenge Validator endpoint, which will authenticate them. After they've been successfully authenticated, the Noq tenant's backend will mark the user's request as successful in its cache. After the user has authenticated, the client (which is polling the challenge_poller endpoint every couple of seconds) should receive a success status with the super secret encoded JWT that it can use to authenticate the user for credential requests to the Noq tenant.","title":"AWS CLI Credentials"},{"location":"features/credential_management/aws_cli_credentials/#challenge-authentication","text":"Weep authenticates to the Noq backend through a standalone challenge authentication response. The challenge authentication flow is as follows: Client sends a GET request to the Noq tenant's challenge endpoint. The server generates and stores a temporary token for the authentication request. A token is scoped to the username sent in the request and expires after a couple of minutes. Noq tells the client where the user should authenticate it in their browser (challenge_url), and where to poll (polling_url). Client starts polling the unauthenticated polling_url every couple of seconds until the token expires after a couple of minutes. The user is redirected to the Challenge Validator endpoint, which will authenticate them. After they've been successfully authenticated, the Noq tenant's backend will mark the user's request as successful in its cache. After the user has authenticated, the client (which is polling the challenge_poller endpoint every couple of seconds) should receive a success status with the super secret encoded JWT that it can use to authenticate the user for credential requests to the Noq tenant.","title":"Challenge Authentication"},{"location":"features/credential_management/aws_console_temporary_credentials/","text":"Overview \u00b6 Noq can broker temporary sessions to the AWS console. After a user authenticates, Noq determines their users and groups from the configured Identity Provider. This could be Okta, Azure AD, Google, or any other OIDC/SAML compatible Identity Provider. These attributes are used to determine which roles the user is authorized to access. Noq can be used in a few different ways to determine what roles a user is allowed to access: Tag the IAM role with the names of the users or groups allowed to access the role (See getting_started/5_enable_credentail_brokering.md for more details. Specify a manual mapping of group/users -> roles in the /config endpoint. Here's an example configuration: group_mapping: groupa@example.com: roles: - arn:aws:iam::123456789012:role/roleA - arn:aws:iam::123456789012:role/roleB userb@example.com: roles: - arn:aws:iam::123456789012:role/roleA (TBD) Specify a Lambda function to invoke, which should return a mapping of roles -> group/users. (Let us know if you want this feature added!) Role Selection \u00b6 Noq's index page shows a list of roles that the current user is allowed to access across all of the organization's accounts. This could be hundreds or thousands of roles for a given user. Recent Roles \u00b6 On the left side of the page, we store the 5 most recent roles a user has logged in to. This enables them to quickly select the role they want to use if they are commonly logging in to the same roles.","title":"Overview"},{"location":"features/credential_management/aws_console_temporary_credentials/#overview","text":"Noq can broker temporary sessions to the AWS console. After a user authenticates, Noq determines their users and groups from the configured Identity Provider. This could be Okta, Azure AD, Google, or any other OIDC/SAML compatible Identity Provider. These attributes are used to determine which roles the user is authorized to access. Noq can be used in a few different ways to determine what roles a user is allowed to access: Tag the IAM role with the names of the users or groups allowed to access the role (See getting_started/5_enable_credentail_brokering.md for more details. Specify a manual mapping of group/users -> roles in the /config endpoint. Here's an example configuration: group_mapping: groupa@example.com: roles: - arn:aws:iam::123456789012:role/roleA - arn:aws:iam::123456789012:role/roleB userb@example.com: roles: - arn:aws:iam::123456789012:role/roleA (TBD) Specify a Lambda function to invoke, which should return a mapping of roles -> group/users. (Let us know if you want this feature added!)","title":"Overview"},{"location":"features/credential_management/aws_console_temporary_credentials/#role-selection","text":"Noq's index page shows a list of roles that the current user is allowed to access across all of the organization's accounts. This could be hundreds or thousands of roles for a given user.","title":"Role Selection"},{"location":"features/credential_management/aws_console_temporary_credentials/#recent-roles","text":"On the left side of the page, we store the 5 most recent roles a user has logged in to. This enables them to quickly select the role they want to use if they are commonly logging in to the same roles.","title":"Recent Roles"},{"location":"features/credential_management/chrome_integration/","text":"For ease of role login, you can integrate Noq with Chrome, Firefox, or other browsers tools by setting up a custom search engine. In Chrome: Go to Settings -> Manage search engines and site search Under \"Site Search\", click \"Add\" Fill in the appropriate attributes seen below. Replace with your noq tenant URL prefix.","title":"Chrome Integration"},{"location":"features/credential_management/ip_restricted_credentials/","text":"Credentials brokered by Noq can be IP-restricted, so they would only work from the Organization's network for VPN environment. To configure IP-restricted credentials, visit Settings -> Restrict brokered credentials to a set of IP ranges . Specify the desired IP ranges on the table.","title":"IP Restrictions"},{"location":"features/permissions_management_and_request_framework/autogenerate_x_account_permissions/","text":"Noq supports cross-account permissions for IAM Assume Role, S3, SQS, and SNS today. To see this in action, add two accounts to Noq and run through the self-service wizard. Select a role on one account, and an SQS/SNS/S3 or IAM resource on the second account, and run through the self-service review flow. After submitting your request, a cross-account resource policy should have been generated and added to the request.","title":"Autogenerate Cross Account Requests"},{"location":"features/permissions_management_and_request_framework/automatically_approve_low_risk_requests/","text":"Automatically approve and apply low-risk permission requests Example 1: Automatically approve all requests made by the networking team that are related to VPC, VPC Endpoints, or IPv6 Example 2: Automatically approve all READ requests that any employee makes to a list of S3 buckets. Example 3: Automatically approve all requests for new IAM roles as long as they don\u2019t mutate IAM Instructions are TBD.","title":"Automatically Approve Low-Risk Requests"},{"location":"features/permissions_management_and_request_framework/customizable_policy_requests/","text":"Cloud administrators can customize policy requests before approving and applying them","title":"Customize Policy Requests Before Approving"},{"location":"features/permissions_management_and_request_framework/permissions_are_crud/","text":"Simplifies permissions into CRUD operations. Don\u2019t like our defaults? Customize them to your needs. Example: Don\u2019t want your users to have sensitive permissions, like s3:PutObjectAcl when they request S3 Write Access? That\u2019s easy with Noq.","title":"Customizable CRUD Mapping for Permissions"},{"location":"features/permissions_management_and_request_framework/self_service_permissions/","text":"The Self-Service Permissions Wizard walks your users through the process of requesting permissions https://www.youtube.com/watch?v=fXNRYcNyw0c&t=830s","title":"Self-Service Permissions"},{"location":"features/permissions_management_and_request_framework/temporary_policy_requests/","text":"Noq supports requesting temporary IAM policies during a Self-Service request with the granularity of one day. All generated policies within a request will be expired on the date specified for expiration.","title":"Temporary Policy Requests"},{"location":"features/permissions_management_and_request_framework/typeaheads_across_known_resources/","text":"Noq leverages data from AWS Config to provide typeaheads on all known resources, across your entire AWS environment","title":"Typeaheads across all known resources"},{"location":"features/planned/2fa_step_up/","text":"Noq can perform 2-factor step-up authentication when a user attempts to retrieve credentials to a sensitive AWS account or a sensitive role. This is a security feature that helps prevent unauthorized access to AWS resources. Noq uses the Duo API to push a 2-factor step-up challenge to your user.","title":"2-Factor Step-Up"},{"location":"features/planned/automatic_permissions_generation/","text":"Noq plans to leverage Cloudtrail data to automatically generate policies based on access denied errors seen in Cloudtrail. Noq will then notify the user about the generated policy and give them the ability to request the policy. Stage two of this approach involves using Weep on the user's laptop to intercept AWS calls and automatically request policies to rectify access denied errors with more accuracy than what Cloudtrail provides.","title":"Automatic Permissions Generation"},{"location":"features/planned/breakglass_role_access/","text":"Breakglass role access would allow an organization to specify a set of groups that are allowed to \"break-glass\" in to a role. Users will be able to filter for \"Break-Glass\" roles in Noq's Role Selection page. When performing break-glass, the organization can require validation through a Duo-push, or approval via custom code invoked via a Lambda function.","title":"Breakglass Role Access"},{"location":"features/planned/decentralized_request_management/","text":"Different owners and policy approvers can be specified for different accounts within your environment. The application admin in Noq will be able to approve all policy requests. Otherwise, account owners can be specified for each account. They will receive policy requests and be responsible for approving them.","title":"Decentralized Request Management"},{"location":"features/planned/multi_role_wizard_selection/","text":"Request policy changes across multiple roles with a single request","title":"Multi-Role Self-Service"},{"location":"features/planned/multi_tag_wizard_request/","text":"Noq will support creating, deleting, or updating tags across multiple resources","title":"Self-Service Wizard for Tagging"},{"location":"features/planned/unused_permissions_removal/","text":"Noq leverages Access Advisor and Cloudtrail Logs (via Athena) to determine which resources have used which permissions. Noq will provide a least-privilege policy, along with instructions for applying the policy to end-users and cloud administrators.","title":"Unused Permissions Removal"},{"location":"features/resource_management/clone_role/","text":"Clone a role \u00b6 To clone a role as an administrator, visit Resources > Create Role , select Clone from existing role and fill out the required parameters.","title":"Clone Role"},{"location":"features/resource_management/clone_role/#clone-a-role","text":"To clone a role as an administrator, visit Resources > Create Role , select Clone from existing role and fill out the required parameters.","title":"Clone a role"},{"location":"features/resource_management/create_role/","text":"Create a blank role \u00b6","title":"Create Role"},{"location":"features/resource_management/create_role/#create-a-blank-role","text":"","title":"Create a blank role"},{"location":"getting_started/","text":"This section will walk you through the process of configuring and customizing Noq for your environment.","title":"Overview"},{"location":"getting_started/1_connect_central_account/","text":"Connect your AWS Central/Hub Account \u00b6 Noq uses a Hub and Spoke approach to connect to your AWS environment in order to cache cloud resources, make policy changes, and provide credential brokering features. Your hub role, or \"central role\", is Noq's entrypoint in to your environment. Noq assumes this role with an external ID that is unique to your environment. Each AWS account with Noq enabled should also have a spoke role that the central role can assume. To onboard on to Noq, please create or choose an AWS account to serve as the account where Noq's Central Role is deployed. This can be any account in your environment. Then follow the steps outlined below. Log in to the AWS Console of the account where you would like to deploy Noq's Central Role Visit Advanced -> Settings Click Connect Hub Role Click Execute CloudFormation Run the CloudFormation Stack on the account. This will create a Hub Role and a Spoke Role on the account, then notify Noq when it has completed. Wait a few minutes. Noq will verify the connection, add the Hub and Spoke roles to your account, and begin to cache resources on the account by invoking the appropriate tasks . After about 10 minutes, you should see cloud resources in your account. After your resources have been cached, this is a good opportunity to try out the self-service features.","title":"Connect your AWS Central Account"},{"location":"getting_started/1_connect_central_account/#connect-your-aws-centralhub-account","text":"Noq uses a Hub and Spoke approach to connect to your AWS environment in order to cache cloud resources, make policy changes, and provide credential brokering features. Your hub role, or \"central role\", is Noq's entrypoint in to your environment. Noq assumes this role with an external ID that is unique to your environment. Each AWS account with Noq enabled should also have a spoke role that the central role can assume. To onboard on to Noq, please create or choose an AWS account to serve as the account where Noq's Central Role is deployed. This can be any account in your environment. Then follow the steps outlined below. Log in to the AWS Console of the account where you would like to deploy Noq's Central Role Visit Advanced -> Settings Click Connect Hub Role Click Execute CloudFormation Run the CloudFormation Stack on the account. This will create a Hub Role and a Spoke Role on the account, then notify Noq when it has completed. Wait a few minutes. Noq will verify the connection, add the Hub and Spoke roles to your account, and begin to cache resources on the account by invoking the appropriate tasks . After about 10 minutes, you should see cloud resources in your account. After your resources have been cached, this is a good opportunity to try out the self-service features.","title":"Connect your AWS Central/Hub Account"},{"location":"getting_started/2_self_service_wizard/","text":"Go through the Self-Service Wizard \u00b6 Optionally give the Self-Service Wizard a whirl once your resources have been cached. You can skip this step, add a few more steps, and revisit it later if you'd prefer. Visit Resources -> Self-Service Permissions Start typing the name of a role within your environment, select one, and click Next . If no roles appear in the typeahead, Noq may not have finished caching resources from your account. Add one or more permissions to your request by filling out the required parameters. You may view and edit the generated policy by clicking on Advanced Editor . After you are finished, click Next . You may also edit your generated policy in Step 3. Type in a justification and click Submit . Administrators see a green \"Submit and apply without approval\" button that isn't visible to normal end-users. This lets you bypass the approval process, and it will attempt to apply the request you generated. Review the policy you submitted, and Cancel or Reject it if you do not wish to apply it. View all historic policy requests under Resources -> All Policy Requests .","title":"(Optional) Step Through Self-Service Wizard"},{"location":"getting_started/2_self_service_wizard/#go-through-the-self-service-wizard","text":"Optionally give the Self-Service Wizard a whirl once your resources have been cached. You can skip this step, add a few more steps, and revisit it later if you'd prefer. Visit Resources -> Self-Service Permissions Start typing the name of a role within your environment, select one, and click Next . If no roles appear in the typeahead, Noq may not have finished caching resources from your account. Add one or more permissions to your request by filling out the required parameters. You may view and edit the generated policy by clicking on Advanced Editor . After you are finished, click Next . You may also edit your generated policy in Step 3. Type in a justification and click Submit . Administrators see a green \"Submit and apply without approval\" button that isn't visible to normal end-users. This lets you bypass the approval process, and it will attempt to apply the request you generated. Review the policy you submitted, and Cancel or Reject it if you do not wish to apply it. View all historic policy requests under Resources -> All Policy Requests .","title":"Go through the Self-Service Wizard"},{"location":"getting_started/3_connect_spoke_accounts/","text":"Connect additional AWS Accounts \u00b6 After playing with self-service, you might want to connect additional accounts to Noq. Your spoke accounts consist of every account that you want to manage through Noq. Noq will access your spoke accounts through your hub account role. To add a spoke account, please follow the steps or video gudance below: Log in to the AWS Console of an account that you'd like Noq to be able to access. Visit Advanced -> Settings Click Connect Spoke Role Click Execute CloudFormation Run the CloudFormation Stack on the account. This will create a Spoke Role on the account, then notify Noq when it has completed. Wait a few minutes. Noq will verify the connection, add the Spoke role to your account, and begin to cache resources on the account by invoking the appropriate tasks . After about 10 minutes, you should see cloud resources in your account.","title":"Connect Spoke Accounts"},{"location":"getting_started/3_connect_spoke_accounts/#connect-additional-aws-accounts","text":"After playing with self-service, you might want to connect additional accounts to Noq. Your spoke accounts consist of every account that you want to manage through Noq. Noq will access your spoke accounts through your hub account role. To add a spoke account, please follow the steps or video gudance below: Log in to the AWS Console of an account that you'd like Noq to be able to access. Visit Advanced -> Settings Click Connect Spoke Role Click Execute CloudFormation Run the CloudFormation Stack on the account. This will create a Spoke Role on the account, then notify Noq when it has completed. Wait a few minutes. Noq will verify the connection, add the Spoke role to your account, and begin to cache resources on the account by invoking the appropriate tasks . After about 10 minutes, you should see cloud resources in your account.","title":"Connect additional AWS Accounts"},{"location":"getting_started/4_update_account_names/","text":"Updating AWS Account Names \u00b6 Updating AWS Account names is a manual operation if Noq is not configured for your AWS Organizations master account. In order to update your Account Names, please follow the guidance below: Visit Advanced -> Config Find the account_ids_to_name configuration key Update the value of the account IDs to the appropriate name Wait a while (30 minutes to 1 hour) for your resource cache to update with the new names.","title":"Update Account Names"},{"location":"getting_started/4_update_account_names/#updating-aws-account-names","text":"Updating AWS Account names is a manual operation if Noq is not configured for your AWS Organizations master account. In order to update your Account Names, please follow the guidance below: Visit Advanced -> Config Find the account_ids_to_name configuration key Update the value of the account IDs to the appropriate name Wait a while (30 minutes to 1 hour) for your resource cache to update with the new names.","title":"Updating AWS Account Names"},{"location":"getting_started/5_enable_credential_brokering/","text":"Set up AWS Credential Brokering through Noq \u00b6 Allow Noq to broker AWS credentials to authorized users within your organization. Visit Advanced -> Settings Scroll down to Role Access Authorization and enable the toggle switch Specify which IAM role tag keys to authoratatively determine which users or groups can retrieve credentials for a role. For example, if your authorized tags are noq-authorized (With \"Allow Web Access\" checked) and noq_authorized_cli_only (With \"Allow Web Access\" unchecked), users/groups included in the noq_authorized tag of a given IAM role will see the role in Noq's \"Role Access\" page, and they will be able to use Weep to retrieve credentials for the role. Conversely, users/groups included in the noq_authorized_cli_only tag will be able to retrieve role credentials via the CLI utility (Weep), but will not see the role listed on the Noq \"Role Access\" page. You may update role tags through Noq's self-service to enable access. After a role tag is updated, please wait a few minutes for the role allowance to be available to users.","title":"Enable Credential Brokering"},{"location":"getting_started/5_enable_credential_brokering/#set-up-aws-credential-brokering-through-noq","text":"Allow Noq to broker AWS credentials to authorized users within your organization. Visit Advanced -> Settings Scroll down to Role Access Authorization and enable the toggle switch Specify which IAM role tag keys to authoratatively determine which users or groups can retrieve credentials for a role. For example, if your authorized tags are noq-authorized (With \"Allow Web Access\" checked) and noq_authorized_cli_only (With \"Allow Web Access\" unchecked), users/groups included in the noq_authorized tag of a given IAM role will see the role in Noq's \"Role Access\" page, and they will be able to use Weep to retrieve credentials for the role. Conversely, users/groups included in the noq_authorized_cli_only tag will be able to retrieve role credentials via the CLI utility (Weep), but will not see the role listed on the Noq \"Role Access\" page. You may update role tags through Noq's self-service to enable access. After a role tag is updated, please wait a few minutes for the role allowance to be available to users.","title":"Set up AWS Credential Brokering through Noq"},{"location":"getting_started/6_automatically_update_trust_policies/","text":"Allow Noq to automatically update trust relationships for role access \u00b6 When a user attempts to retrieve credentials for one of their authorized roles through Noq, Noq will assume your Hub Role with an external ID that is unique to your company. From your Hub role, Noq will attempt to assume the role requested by the user, and it will then return the assumed credentials to the user. If Noq is unable to assume this role because your Hub Role is not authorized to perform sts:AssumeRole and/or sts:TagSession in the target role's Trust Policy, Noq can attempt to automatically update the trust policy of the role when it initially receives an Access Denied error. This is convenient because you don't need to update all of your roles automatically. However, if you are using Infrastructure as Code to templatize your roles, we recommend that you update your IaC to give your Noq Hub role the ability to perform these actions. To enable this option, please perform the following steps: Visit Advanced -> Config Set the configuration key for aws.automatically_update_role_trust_policies to true . The final statement should look like this: aws: automatically_update_role_trust_policies: true Take care to avoid duplicate keys. If the top-level aws configuration key already exists, add or update automatically_update_role_trust_policies: true under that key.","title":"Automatically Update Trust Policies"},{"location":"getting_started/6_automatically_update_trust_policies/#allow-noq-to-automatically-update-trust-relationships-for-role-access","text":"When a user attempts to retrieve credentials for one of their authorized roles through Noq, Noq will assume your Hub Role with an external ID that is unique to your company. From your Hub role, Noq will attempt to assume the role requested by the user, and it will then return the assumed credentials to the user. If Noq is unable to assume this role because your Hub Role is not authorized to perform sts:AssumeRole and/or sts:TagSession in the target role's Trust Policy, Noq can attempt to automatically update the trust policy of the role when it initially receives an Access Denied error. This is convenient because you don't need to update all of your roles automatically. However, if you are using Infrastructure as Code to templatize your roles, we recommend that you update your IaC to give your Noq Hub role the ability to perform these actions. To enable this option, please perform the following steps: Visit Advanced -> Config Set the configuration key for aws.automatically_update_role_trust_policies to true . The final statement should look like this: aws: automatically_update_role_trust_policies: true Take care to avoid duplicate keys. If the top-level aws configuration key already exists, add or update automatically_update_role_trust_policies: true under that key.","title":"Allow Noq to automatically update trust relationships for role access"},{"location":"getting_started/7_enable_ip_restrictions/","text":"Set up IP Restrictions \u00b6 Do you want all credentials brokered by Noq to be IP-restricted, such that they only work within your corporate VPN IP space? If so, this option is for you. To configure IP restrictions, follow the steps below: Visit Advanced -> Settings Enable Restrict brokered credentials to a set of IP ranges Click Add CIDR Type in a CIDR to use for credential restriction, and click Submit Repeat this process for additional CIDRs. All credentials brokered by Noq for end-users will be IP restricted while retaining the ability for AWS to use the credentials on your behalf (I.E. CloudFormation, and a few other bespoke use cases).","title":"Enable IP Restrictions"},{"location":"getting_started/7_enable_ip_restrictions/#set-up-ip-restrictions","text":"Do you want all credentials brokered by Noq to be IP-restricted, such that they only work within your corporate VPN IP space? If so, this option is for you. To configure IP restrictions, follow the steps below: Visit Advanced -> Settings Enable Restrict brokered credentials to a set of IP ranges Click Add CIDR Type in a CIDR to use for credential restriction, and click Submit Repeat this process for additional CIDRs. All credentials brokered by Noq for end-users will be IP restricted while retaining the ability for AWS to use the credentials on your behalf (I.E. CloudFormation, and a few other bespoke use cases).","title":"Set up IP Restrictions"},{"location":"getting_started/8_configure_weep/","text":"Set up Weep \u00b6 Weep is the open source CLI utility used for ConsoleMe. It's also compatible with Noq. Weep offers a number of convenient ways to work with temporary AWS credentials, such as emulating the ECS credential provider, the instance metadata service, and providing a credential_process endpoint. Weep enables developers so they can work with multiple sets of temporary credentials in parallel, and perform long-lived operations that outlast the expiration time of the credentials. See the open source documentation for more information. Enable Challenge Authentication Mode \u00b6 Challenge Authentication Mode must be enabled in order to use Weep with Noq Challenge authentication allows Weep to securely authenticate to your tenant on Noq. See Challenge URL Authentication for more details. To enable Challenge Authentication, follow the steps below (This is a one-time configuration): Visit Advanced -> Config Ensure auth.challenge_url.enabled is set to true . auth: challenge_url: enabled: true Download and Configure Weep \u00b6 To download and configure Weep, follow the steps outlined below: Visit the Downloads page in Noq Download Weep for your operating system. If you downloaded a Linux/Mac binary, copy Weep to your $PATH. cd ~/Downloads cp ./weep /usr/local/bin/weep Run the commands specified on the Downloads page Run weep list to authenticate.","title":"Configure Weep (CLI)"},{"location":"getting_started/8_configure_weep/#set-up-weep","text":"Weep is the open source CLI utility used for ConsoleMe. It's also compatible with Noq. Weep offers a number of convenient ways to work with temporary AWS credentials, such as emulating the ECS credential provider, the instance metadata service, and providing a credential_process endpoint. Weep enables developers so they can work with multiple sets of temporary credentials in parallel, and perform long-lived operations that outlast the expiration time of the credentials. See the open source documentation for more information.","title":"Set up Weep"},{"location":"getting_started/8_configure_weep/#enable-challenge-authentication-mode","text":"Challenge Authentication Mode must be enabled in order to use Weep with Noq Challenge authentication allows Weep to securely authenticate to your tenant on Noq. See Challenge URL Authentication for more details. To enable Challenge Authentication, follow the steps below (This is a one-time configuration): Visit Advanced -> Config Ensure auth.challenge_url.enabled is set to true . auth: challenge_url: enabled: true","title":"Enable Challenge Authentication Mode"},{"location":"getting_started/8_configure_weep/#download-and-configure-weep","text":"To download and configure Weep, follow the steps outlined below: Visit the Downloads page in Noq Download Weep for your operating system. If you downloaded a Linux/Mac binary, copy Weep to your $PATH. cd ~/Downloads cp ./weep /usr/local/bin/weep Run the commands specified on the Downloads page Run weep list to authenticate.","title":"Download and Configure Weep"},{"location":"getting_started/9_connect_eventbridge/","text":"UNDER CONSTRUCTION \u00b6 Noq can integrate with AWS CloudTrail via Event Bridge. It can generate naive policies from CloudTrail Access Deny errors, and update IAM role cache based IAM create / update events. If you're running Noq in a multi-account environment in a single AWS Organization, we recommend that you create an Event Bridge rule in each region of each of your accounts that will forward your CloudTrail data to a single region in a single account. The account that you choose to send this data to should be locked down, and only accessible by your cloud administrators. The Event Bus on your central account (The one where all of these logs will go to) should have a resource-based policy allowing all accounts within your organization to send events to it. Here's what that might look like: The rule on each region of each of your accounts should look similar to the below: As previously mentioned, Noq only processes Access Deny and Role Update log messages. On your central account, we need two different rules. One for each scenario. This first Event Bridge rule will help Noq to process AccessDenied / UnauthorizedOperation errors from CloudTrail by sending them to an SNS topic. An SQS queue is subscribed to this topic, and Noq has the ability to read this SQS queue. Alternatively, the target for the event bridge rule could just be an SQS queue that Noq has access to. Setting this up is an exercise for the reader. The second Event Bridge rule is needed for Noq to cache new or updated roles, as well as role authorization changes through tag updates, much quicker. The target can be an SNS topic, or an SQS queue. After the rules are configured and you are seeing messages in your SQS queues, we need to modify Noq's configuration and restart Noq's celery scheduler / worker. Add the following configuration, replacing the queue ARNs as appropriate. celery: cache_cloudtrail_denies: enabled: true trigger_credential_mapping_refresh_from_role_changes: enabled: true event_bridge: detect_role_changes_and_update_cache: queue_arn: arn:aws:sqs:{region}:{account_id}:noq-cloudtrail-role-events # assume_role: null <--- Optional role to assume to access the queue detect_cloudtrail_denies_and_update_cache: queue_arn: arn:aws:sqs:{region}:{account_id}:noq-cloudtrail-access-deny-events # assume_role: null <--- Optional role to assume to access the queue You should begin to see role updates much quicker, and will also see access denied messaging for your IAM principals","title":"Configure AWS Event Bridge"},{"location":"getting_started/9_connect_eventbridge/#under-construction","text":"Noq can integrate with AWS CloudTrail via Event Bridge. It can generate naive policies from CloudTrail Access Deny errors, and update IAM role cache based IAM create / update events. If you're running Noq in a multi-account environment in a single AWS Organization, we recommend that you create an Event Bridge rule in each region of each of your accounts that will forward your CloudTrail data to a single region in a single account. The account that you choose to send this data to should be locked down, and only accessible by your cloud administrators. The Event Bus on your central account (The one where all of these logs will go to) should have a resource-based policy allowing all accounts within your organization to send events to it. Here's what that might look like: The rule on each region of each of your accounts should look similar to the below: As previously mentioned, Noq only processes Access Deny and Role Update log messages. On your central account, we need two different rules. One for each scenario. This first Event Bridge rule will help Noq to process AccessDenied / UnauthorizedOperation errors from CloudTrail by sending them to an SNS topic. An SQS queue is subscribed to this topic, and Noq has the ability to read this SQS queue. Alternatively, the target for the event bridge rule could just be an SQS queue that Noq has access to. Setting this up is an exercise for the reader. The second Event Bridge rule is needed for Noq to cache new or updated roles, as well as role authorization changes through tag updates, much quicker. The target can be an SNS topic, or an SQS queue. After the rules are configured and you are seeing messages in your SQS queues, we need to modify Noq's configuration and restart Noq's celery scheduler / worker. Add the following configuration, replacing the queue ARNs as appropriate. celery: cache_cloudtrail_denies: enabled: true trigger_credential_mapping_refresh_from_role_changes: enabled: true event_bridge: detect_role_changes_and_update_cache: queue_arn: arn:aws:sqs:{region}:{account_id}:noq-cloudtrail-role-events # assume_role: null <--- Optional role to assume to access the queue detect_cloudtrail_denies_and_update_cache: queue_arn: arn:aws:sqs:{region}:{account_id}:noq-cloudtrail-access-deny-events # assume_role: null <--- Optional role to assume to access the queue You should begin to see role updates much quicker, and will also see access denied messaging for your IAM principals","title":"UNDER CONSTRUCTION"},{"location":"swagger/swagger/","text":"const ui = SwaggerUIBundle({ url: 'https://noq-docs-public.s3.us-west-2.amazonaws.com/swagger/swagger.yaml', dom_id: '#swagger-ui', })","title":"Swagger Documentation"}]}