"""migration

Revision ID: ea58c8598995
Revises: 3b751f90a520
Create Date: 2023-01-24 14:22:50.984075

"""
import sqlalchemy as sa
from alembic import op
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = "ea58c8598995"
down_revision = "3b751f90a520"
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "aws_account",
        sa.Column("created_by", sa.String(), nullable=True),
        sa.Column("created_at", sa.DateTime(), nullable=True),
        sa.Column("deleted", sa.Boolean(), nullable=True),
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("name", sa.String(), nullable=True),
        sa.Column("number", sa.String(), nullable=True),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_aws_account_number"), "aws_account", ["number"], unique=False
    )
    op.create_table(
        "identity_role",
        sa.Column("created_by", sa.String(), nullable=True),
        sa.Column("created_at", sa.DateTime(), nullable=True),
        sa.Column("deleted", sa.Boolean(), nullable=True),
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("role_name", sa.String(), nullable=True),
        sa.Column("role_arn", sa.String(), nullable=True),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_identity_role_role_arn"), "identity_role", ["role_arn"], unique=False
    )
    op.create_table(
        "tenant",
        sa.Column("created_by", sa.String(), nullable=True),
        sa.Column("created_at", sa.DateTime(), nullable=True),
        sa.Column("deleted", sa.Boolean(), nullable=True),
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("name", sa.String(), nullable=True),
        sa.Column("organization_id", sa.String(), nullable=True),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_tenant_name"), "tenant", ["name"], unique=False)
    op.create_table(
        "role_access",
        sa.Column("created_by", sa.String(), nullable=True),
        sa.Column("created_at", sa.DateTime(), nullable=True),
        sa.Column("deleted", sa.Boolean(), nullable=True),
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("tenant_id", sa.Integer(), nullable=True),
        sa.Column(
            "type",
            sa.Enum(
                "credential_access",
                "tra_supported_group",
                "tra_active_user",
                name="roleaccesstypes",
            ),
            nullable=True,
        ),
        sa.Column("user_id", postgresql.UUID(as_uuid=True), nullable=True),
        sa.Column("group_id", postgresql.UUID(as_uuid=True), nullable=True),
        sa.Column("identity_role_id", sa.Integer(), nullable=True),
        sa.Column("cli_only", sa.Boolean(), nullable=True),
        sa.Column("expiration", sa.DateTime(), nullable=True),
        sa.Column("request_id", sa.String(), nullable=True),
        sa.Column("cloud_provider", sa.String(), nullable=True),
        sa.Column("signature", sa.String(), nullable=True),
        sa.ForeignKeyConstraint(["group_id"], ["groups.id"], ondelete="CASCADE"),
        sa.ForeignKeyConstraint(
            ["identity_role_id"],
            ["identity_role.id"],
        ),
        sa.ForeignKeyConstraint(
            ["tenant_id"],
            ["tenant.id"],
        ),
        sa.ForeignKeyConstraint(["user_id"], ["users.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
    )
    op.add_column("groups", sa.Column("tenant_id", sa.Integer(), nullable=True))
    op.drop_constraint("uq_group_tenant_email", "groups", type_="unique")
    op.create_unique_constraint(
        "uq_group_tenant_email", "groups", ["tenant_id", "email"]
    )
    op.drop_constraint("uq_tenant_name", "groups", type_="unique")
    op.create_unique_constraint("uq_tenant_name", "groups", ["tenant_id", "name"])
    op.create_index(op.f("ix_groups_name"), "groups", ["name"], unique=False)
    op.create_foreign_key(None, "groups", "tenant", ["tenant_id"], ["id"])
    op.drop_column("groups", "tenant")
    op.add_column("request", sa.Column("tenant_id", sa.Integer(), nullable=True))
    op.drop_index("request_created_by_created_at_idx", table_name="request")
    op.create_index(
        "request_created_by_created_at_idx",
        "request",
        ["tenant_id", "deleted", "created_by", "created_at"],
        unique=False,
    )
    op.drop_index("request_created_by_with_status_created_at_idx", table_name="request")
    op.create_index(
        "request_created_by_with_status_created_at_idx",
        "request",
        ["tenant_id", "status", "deleted", "created_by", "created_at"],
        unique=False,
    )
    op.drop_index("request_tenant_created_at_idx", table_name="request")
    op.create_index(
        "request_tenant_created_at_idx",
        "request",
        ["tenant_id", "deleted", "created_at"],
        unique=False,
    )
    op.drop_index("request_tenant_with_status_created_at_idx", table_name="request")
    op.create_index(
        "request_tenant_with_status_created_at_idx",
        "request",
        ["tenant_id", "status", "deleted", "created_at"],
        unique=False,
    )
    op.create_foreign_key(None, "request", "tenant", ["tenant_id"], ["id"])
    op.drop_column("request", "tenant")
    op.add_column("users", sa.Column("tenant_id", sa.Integer(), nullable=False))
    op.drop_constraint("uq_tenant_email", "users", type_="unique")
    op.create_unique_constraint("uq_tenant_email", "users", ["tenant_id", "email"])
    op.drop_constraint("uq_tenant_username", "users", type_="unique")
    op.create_unique_constraint(
        "uq_tenant_username", "users", ["tenant_id", "username"]
    )
    op.create_index(op.f("ix_users_email"), "users", ["email"], unique=False)
    op.create_index(op.f("ix_users_username"), "users", ["username"], unique=False)
    op.create_foreign_key(None, "users", "tenant", ["tenant_id"], ["id"])
    op.drop_column("users", "tenant")
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column(
        "users", sa.Column("tenant", sa.VARCHAR(), autoincrement=False, nullable=False)
    )
    op.drop_constraint(None, "users", type_="foreignkey")
    op.drop_index(op.f("ix_users_username"), table_name="users")
    op.drop_index(op.f("ix_users_email"), table_name="users")
    op.drop_constraint("uq_tenant_username", "users", type_="unique")
    op.create_unique_constraint("uq_tenant_username", "users", ["tenant", "username"])
    op.drop_constraint("uq_tenant_email", "users", type_="unique")
    op.create_unique_constraint("uq_tenant_email", "users", ["tenant", "email"])
    op.drop_column("users", "tenant_id")
    op.add_column(
        "request", sa.Column("tenant", sa.VARCHAR(), autoincrement=False, nullable=True)
    )
    op.drop_constraint(None, "request", type_="foreignkey")
    op.drop_index("request_tenant_with_status_created_at_idx", table_name="request")
    op.create_index(
        "request_tenant_with_status_created_at_idx",
        "request",
        ["tenant", "status", "deleted", "created_at"],
        unique=False,
    )
    op.drop_index("request_tenant_created_at_idx", table_name="request")
    op.create_index(
        "request_tenant_created_at_idx",
        "request",
        ["tenant", "deleted", "created_at"],
        unique=False,
    )
    op.drop_index("request_created_by_with_status_created_at_idx", table_name="request")
    op.create_index(
        "request_created_by_with_status_created_at_idx",
        "request",
        ["tenant", "status", "deleted", "created_by", "created_at"],
        unique=False,
    )
    op.drop_index("request_created_by_created_at_idx", table_name="request")
    op.create_index(
        "request_created_by_created_at_idx",
        "request",
        ["tenant", "deleted", "created_by", "created_at"],
        unique=False,
    )
    op.drop_column("request", "tenant_id")
    op.add_column(
        "groups", sa.Column("tenant", sa.VARCHAR(), autoincrement=False, nullable=False)
    )
    op.drop_constraint(None, "groups", type_="foreignkey")
    op.drop_index(op.f("ix_groups_name"), table_name="groups")
    op.drop_constraint("uq_tenant_name", "groups", type_="unique")
    op.create_unique_constraint("uq_tenant_name", "groups", ["tenant", "name"])
    op.drop_constraint("uq_group_tenant_email", "groups", type_="unique")
    op.create_unique_constraint("uq_group_tenant_email", "groups", ["tenant", "email"])
    op.drop_column("groups", "tenant_id")
    op.drop_table("role_access")
    op.drop_index(op.f("ix_tenant_name"), table_name="tenant")
    op.drop_table("tenant")
    op.drop_index(op.f("ix_identity_role_role_arn"), table_name="identity_role")
    op.drop_table("identity_role")
    op.drop_index(op.f("ix_aws_account_number"), table_name="aws_account")
    op.drop_table("aws_account")
    # ### end Alembic commands ###
