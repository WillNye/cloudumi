"""migration

Revision ID: 82d249e52311
Revises:
Create Date: 2022-12-13 08:01:45.371382

"""
import sqlalchemy as sa
from alembic import op
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = "82d249e52311"
down_revision = None
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "request",
        sa.Column("created_by", sa.String(), nullable=True),
        sa.Column("created_at", sa.DateTime(), nullable=True),
        sa.Column("deleted", sa.Boolean(), nullable=True),
        sa.Column("id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column("repo_name", sa.String(), nullable=True),
        sa.Column("pull_request_id", sa.Integer(), nullable=True),
        sa.Column("tenant", sa.String(), nullable=True),
        sa.Column(
            "status",
            postgresql.ENUM(
                "Pending", "Approved", "Rejected", "Expired", name="RequestStatusEnum"
            ),
            nullable=True,
        ),
        sa.Column("allowed_approvers", postgresql.ARRAY(sa.String()), nullable=True),
        sa.Column("approved_by", postgresql.ARRAY(sa.String()), nullable=True),
        sa.Column("rejected_by", sa.String(), nullable=True),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        "request_created_by_created_at_idx",
        "request",
        ["tenant", "deleted", "created_by", "created_at"],
        unique=False,
    )
    op.create_index(
        "request_created_by_with_status_created_at_idx",
        "request",
        ["tenant", "status", "deleted", "created_by", "created_at"],
        unique=False,
    )
    op.create_index(
        "request_tenant_created_at_idx",
        "request",
        ["tenant", "deleted", "created_at"],
        unique=False,
    )
    op.create_index(
        "request_tenant_with_status_created_at_idx",
        "request",
        ["tenant", "status", "deleted", "created_at"],
        unique=False,
    )
    op.create_table(
        "request_comment",
        sa.Column("created_by", sa.String(), nullable=True),
        sa.Column("created_at", sa.DateTime(), nullable=True),
        sa.Column("deleted", sa.Boolean(), nullable=True),
        sa.Column("id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column("body", sa.String(), nullable=True),
        sa.Column("request_id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.ForeignKeyConstraint(
            ["request_id"],
            ["request.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        "request_comment_created_at_idx",
        "request_comment",
        ["request_id", "deleted", "created_at"],
        unique=False,
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index("request_comment_created_at_idx", table_name="request_comment")
    op.drop_table("request_comment")
    op.drop_index("request_tenant_with_status_created_at_idx", table_name="request")
    op.drop_index("request_tenant_created_at_idx", table_name="request")
    op.drop_index("request_created_by_with_status_created_at_idx", table_name="request")
    op.drop_index("request_created_by_created_at_idx", table_name="request")
    op.drop_table("request")
    # ### end Alembic commands ###
