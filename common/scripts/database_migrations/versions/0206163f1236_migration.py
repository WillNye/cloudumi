"""migration

Revision ID: 0206163f1236
Revises: 28c4ecde93e1
Create Date: 2023-07-21 09:26:14.127052

"""
import sqlalchemy as sa
from alembic import op
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = "0206163f1236"
down_revision = "28c4ecde93e1"
branch_labels = None
depends_on = None


def upgrade() -> None:
    # This will remove EVERYTHING
    # We need to immediately resync request types for all templates after migration
    op.execute("""DELETE FROM change_field;""")
    op.execute("""DELETE FROM change_type_template;""")
    op.execute("""DELETE FROM change_type;""")
    op.execute("""DELETE FROM request_type;""")

    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index("uix_change_type_request_name", table_name="change_type")
    op.create_table(
        "change_type_group_association",
        sa.Column("change_type_id", sa.UUID(), nullable=True),
        sa.Column("group_id", sa.UUID(), nullable=True),
        sa.ForeignKeyConstraint(
            ["change_type_id"],
            ["change_type.id"],
        ),
        sa.ForeignKeyConstraint(
            ["group_id"],
            ["groups.id"],
        ),
    )
    op.create_table(
        "change_type_iambic_template_provider_definition_association",
        sa.Column("change_type_id", sa.UUID(), nullable=True),
        sa.Column("iambic_template_provider_definition_id", sa.UUID(), nullable=True),
        sa.ForeignKeyConstraint(
            ["change_type_id"],
            ["change_type.id"],
        ),
        sa.ForeignKeyConstraint(
            ["iambic_template_provider_definition_id"],
            ["iambic_template_provider_definition.id"],
        ),
    )
    op.create_table(
        "change_type_user_association",
        sa.Column("change_type_id", sa.UUID(), nullable=True),
        sa.Column("user_id", sa.UUID(), nullable=True),
        sa.ForeignKeyConstraint(
            ["change_type_id"],
            ["change_type.id"],
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["users.id"],
        ),
    )
    op.create_table(
        "express_access_request",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("change_type_id", sa.UUID(), nullable=False),
        sa.Column("tenant_id", sa.Integer(), nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("description", sa.String(), nullable=False),
        sa.Column(
            "field_values", postgresql.JSONB(astext_type=sa.Text()), nullable=False
        ),
        sa.Column("suggest_to_all", sa.Boolean(), nullable=True),
        sa.Column("deleted", sa.Boolean(), nullable=True),
        sa.Column("deleted_at", sa.DateTime(), nullable=True),
        sa.Column("created_by", sa.String(), nullable=True),
        sa.Column("created_at", sa.DateTime(), nullable=True),
        sa.Column("updated_by", sa.String(), nullable=True),
        sa.Column("updated_at", sa.DateTime(), nullable=True),
        sa.ForeignKeyConstraint(
            ["change_type_id"],
            ["change_type.id"],
        ),
        sa.ForeignKeyConstraint(
            ["tenant_id"],
            ["tenant.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        "ear_change_type_idx",
        "express_access_request",
        ["tenant_id", "change_type_id"],
        unique=False,
    )
    op.create_index(
        "ear_suggest_to_all_idx",
        "express_access_request",
        ["tenant_id", "suggest_to_all", "name", "change_type_id"],
        unique=False,
    )
    op.create_table(
        "user_favorited_change_type_association",
        sa.Column("user_id", sa.UUID(), nullable=True),
        sa.Column("change_type_id", sa.UUID(), nullable=True),
        sa.ForeignKeyConstraint(
            ["change_type_id"],
            ["change_type.id"],
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["users.id"],
        ),
    )
    op.create_index(
        "ufcta_user_favorite_idx",
        "user_favorited_change_type_association",
        ["user_id", "change_type_id"],
        unique=False,
    )
    op.create_table(
        "user_favorited_express_access_request_association",
        sa.Column("user_id", sa.UUID(), nullable=True),
        sa.Column("express_access_request_id", sa.UUID(), nullable=True),
        sa.ForeignKeyConstraint(
            ["express_access_request_id"],
            ["express_access_request.id"],
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["users.id"],
        ),
    )
    op.create_index(
        "ufeara_user_favorite_idx",
        "user_favorited_express_access_request_association",
        ["user_id", "express_access_request_id"],
        unique=False,
    )
    op.add_column(
        "change_type", sa.Column("suggest_to_all", sa.Boolean(), nullable=True)
    )
    op.add_column(
        "change_type",
        sa.Column(
            "supported_template_types", postgresql.ARRAY(sa.String()), nullable=False
        ),
    )
    op.add_column(
        "change_type",
        sa.Column("template_types", postgresql.ARRAY(sa.String()), nullable=False),
    )
    op.create_index(
        "ct_suggested_change_type_idx",
        "change_type",
        ["id", "tenant_id", "name", "suggest_to_all"],
        unique=False,
    )
    op.drop_column("request_type", "supported_template_types")
    op.drop_column("request_type", "template_types")
    # ### end Alembic commands ###


def downgrade() -> None:
    # A downgrade will result in bad data, so it will be erased and recreated
    # We need to immediately resync request types for all templates after migration
    op.execute("""DELETE FROM change_field;""")
    op.execute("""DELETE FROM change_type_template;""")
    op.execute("""DELETE FROM change_type;""")
    op.execute("""DELETE FROM request_type;""")

    # ### commands auto generated by Alembic - please adjust! ###
    op.create_index(
        "uix_change_type_request_name",
        "change_type",
        ["request_type_id", "name"],
        unique=False,
    )
    op.add_column(
        "request_type",
        sa.Column(
            "template_types",
            postgresql.ARRAY(sa.VARCHAR()),
            autoincrement=False,
            nullable=False,
        ),
    )
    op.add_column(
        "request_type",
        sa.Column(
            "supported_template_types",
            postgresql.ARRAY(sa.VARCHAR()),
            autoincrement=False,
            nullable=False,
        ),
    )
    op.drop_index("ct_suggested_change_type_idx", table_name="change_type")
    op.drop_column("change_type", "template_types")
    op.drop_column("change_type", "supported_template_types")
    op.drop_column("change_type", "suggest_to_all")
    op.drop_index(
        "ufeara_user_favorite_idx",
        table_name="user_favorited_express_access_request_association",
    )
    op.drop_table("user_favorited_express_access_request_association")
    op.drop_index(
        "ufcta_user_favorite_idx", table_name="user_favorited_change_type_association"
    )
    op.drop_table("user_favorited_change_type_association")
    op.drop_index("ear_suggest_to_all_idx", table_name="express_access_request")
    op.drop_index("ear_change_type_idx", table_name="express_access_request")
    op.drop_table("express_access_request")
    op.drop_table("change_type_user_association")
    op.drop_table("change_type_iambic_template_provider_definition_association")
    op.drop_table("change_type_group_association")
    # ### end Alembic commands ###
