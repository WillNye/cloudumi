# First time? run `docker network create microservices`

version: "3.8"
services:
  cloudumi_healthcheck:
    build:
      context: .
      dockerfile: cloudumi_healthcheck/Dockerfile
    image: cloudumi_healthcheck
    depends_on:
      - localstack1
      - localstack2
      - localstack3
      - redis-cluster
      - cloudumi-dynamodb
    links:
      - localstack1
      - localstack2
      - localstack3
      - redis-cluster
      - cloudumi-dynamodb
    ports:
      - 8090:8090
    labels:
      - "traefik.enable=true"
      - traefik.http.routers.cloudumi_healthcheck.rule=Path(`/healthcheck`)
      - traefik.http.services.cloudumi_healthcheck.loadbalancer.server.port=8090
      - "traefik.port=80"
  cloudumi_saml:
    build:
      context: .
      dockerfile: cloudumi_saml/Dockerfile
    image: cloudumi_saml
    volumes:
      - ~/.aws:/root/.aws:cached
    ports:
      - 8091:8091
    labels:
      - traefik.http.routers.cloudumi_saml.rule=PathPrefix(`/saml`)
      - "traefik.http.routers.cloudumi_saml.entrypoints=websecure"
      - "traefik.http.routers.cloudumi_saml.tls.certresolver=letsencrypt"
      #- traefik.http.routers.home.rule=Host(`cloudumi.localhost`)
      - traefik.http.services.cloudumi_saml.loadbalancer.server.port=8091
      - "traefik.enable=true"
      - "traefik.port=80"
    depends_on:
      - localstack1
      - localstack2
      - localstack3
      - redis-cluster
      - cloudumi-dynamodb
    links:
      - localstack1
      - localstack2
      - localstack3
      - redis-cluster
      - cloudumi-dynamodb
    # Sleep to give localstack time to start
    command: >
      bash -c '
      sleep 20;
      python /apps/cloudumi_saml/cloudumi_saml/__main__.py'
  cloudumi_api:
    build:
      context: .
      dockerfile: cloudumi_api/Dockerfile
    image: cloudumi_api
    volumes:
      - ~/.aws:/root/.aws:cached
    #        secrets:
    #            - source: aws_credentials
    #              target: /home/appuser/.aws/credentials
    #              uid: '1111'
    #              gid: '1111'
    #              mode: 0440
    #            - source: aws_config
    #              target: /home/appuser/.aws/config
    #              uid: '1111'
    #              gid: '1111'
    #              mode: 0440
    ports:
      - 8092:8092
    labels:
      - "traefik.http.routers.cloudumi_api.rule=PathPrefix(`/api`) || PathPrefix(`/auth`)"
      - "traefik.http.routers.cloudumi_api.entrypoints=websecure"
      - "traefik.http.routers.cloudumi_api.tls.certresolver=letsencrypt"
      #- traefik.http.routers.home.rule=Host(`cloudumi.localhost`)
      - traefik.http.services.cloudumi_api.loadbalancer.server.port=8092
      - "traefik.enable=true"
      - "traefik.port=80"
    depends_on:
      - localstack1
      - localstack2
      - localstack3
      - redis-cluster
      - cloudumi-dynamodb
    links:
      - localstack1
      - localstack2
      - localstack3
      - redis-cluster
      - cloudumi-dynamodb
    # Sleep to give localstack time to start
    command: >
      bash -c '
      python /apps/cloudumi_api/cloudumi_api/__main__.py'
  #    cloudumi_router:
  #        build:
  #            context: .
  #            dockerfile: cloudumi_router/Dockerfile
  #        image: cloudumi_router
  #        networks:
  #            - cloudumi
  #        ports:
  #            - 8080:8080
  #        labels:
  #            - traefik.http.routers.home.rule=Host(`cloudumi.localhost`)
  #            - traefik.http.services.home.loadbalancer.server.port=8080
  #            - "traefik.enable=true"
  #            - "traefik.port=80"

  cloudumi_frontend:
    build:
      context: .
      dockerfile: cloudumi_frontend/Dockerfile
    image: cloudumi_frontend
    ports:
      - 8081:8081
    labels:
      - traefik.http.routers.cloudumi_frontend.rule=PathPrefix(`/`)
      - "traefik.http.routers.cloudumi_frontend.entrypoints=websecure"
      - "traefik.http.routers.cloudumi_frontend.tls.certresolver=letsencrypt"
      - traefik.http.services.cloudumi_frontend.loadbalancer.server.port=8081
      - "traefik.enable=true"
      - "traefik.port=80"
      - "traefik.frontend.priority=1" # lowest priority, the last thing to be matched

volumes:
  certs:
#secrets:
#    aws_credentials:
#      file: ~/.aws/credentials
#    aws_config:
#      file: ~/.aws/config
