extends:
  - AWS_SECRETS_MANAGER:{{ aws_secrets_manager_arn }}
_global_:
  landing_page_domains: {{landing_page_domains}}
  metrics:
    cloudwatch:
      namespace: {{ cluster_id_safed }}
    fluent-bit:
      namespace: {{ cluster_id_safed }}
      max_threads: 10
      enabled: true
      log_file: "/var/log/saas_output.log"
      max_log_file_size: 6291456 # 6 megabyte
      config: /etc/fluent-bit/fluent-bit.conf
      exe: /opt/fluent-bit/bin/fluent-bit
  auth:
    challenge_url:
      request_ip_must_match_challenge_creation_ip: false
    remote_ip:
      # trusted_remote_ip_header should only be configured when behind an ALB, otherwise the header can be forged.
      trusted_remote_ip_header: X-Forwarded-For
  integrations:
    aws:
      account_id: "{{ account_id }}"
      central_role_name: NoqCentralRole
      spoke_role_name: NoqSpokeRole
      node_role: {{ ecs_task_role_arn }}
      stage: {{ stage }}
      region: {{ region }}
      attributes: {{ attributes }}
      registration_topic_arn: {{ sns_registration_topic_arn }}
      registration_queue_arn: {{ sqs_registration_queue_arn }}
      registration_queue_url: "{{ sqs_registration_queue_url }}"
      {% if aws_marketplace_subscription_queue_arn %}
      aws_marketplace_subscription_queue_arn: {{ aws_marketplace_subscription_queue_arn }}
      aws_marketplace_subscription_queue_url: "{{ aws_marketplace_subscription_queue_url }}"
      {% endif %}
      {% if aws_marketplace_product_code %}
      aws_marketplace_product_code: {{ aws_marketplace_product_code }}
      aws_marketplace_region: {{ aws_marketplace_region }}
      {% endif %}
      registration_central_role_cf_template: "https://s3.us-east-1.amazonaws.com/cloudumi-cf-templates/cloudumi_central_role.yaml"
      registration_spoke_role_cf_template: "https://s3.us-east-1.amazonaws.com/cloudumi-cf-templates/cloudumi_spoke_role.yaml"
    github:
      webhook_event_buffer:
        queue_arn: {{ sqs_github_app_noq_webhook_queue_arn }}
        queue_url: "{{ sqs_github_app_noq_webhook_queue_url }}"
  accounts:
    tenant_data:
      name: NoqServiceConnRole
      account_id: "{{ global_tenant_data_account_id }}"
      role_arn: arn:aws:iam::{{ global_tenant_data_account_id }}:role/{{ global_tenant_data_role_name }}
      external_id: 018e23e8-9b41-4d66-85f2-3d60cb2b3c43
      region: us-west-2
    zelkova:
      name: ZelkovaAnalysisRole
      account_id: "894599878328"
      account_name: "zelkova"
      role_arn: arn:aws:iam::894599878328:role/ZelkovaAnalysisRole
  s3_buckets:
    legal_docs: {{ legal_docs_bucket_name }}
    temp_files: {{ temp_files_bucket_name }}
  slack_webhook_url: "https://hooks.slack.com/services/..."  # Replace with your slack webhook url
  deployment:
    domain_name: "{{ domain_name }}"
    namespace: {{ namespace }}
    zone: {{ zone }}
    cluster_id: {{ cluster_id_safed }}
  web:
    path: "/app/frontend/dist"
  docs:
    path: "/app/api/docs"
  s3_cache_bucket: {{ bucket_name }}
  development: false
  environment: {{ stage }}
  tornado:
  {% if stage == "staging" %}
    debug: true
  {% else   %}
    debug: false
  {% endif  %}
    port: 8092
    xsrf: true
    xsrf_cookie_kwargs:
      samesite: strict
      secure: true
  plugins:
    auth: cmsaas_auth
    aws: cmsaas_aws
    group_mapping: cmsaas_group_mapping
    internal_celery_tasks: cmsaas_celery_tasks
    metrics: fluent_bit
    internal_config: cmsaas_config
    internal_routes: cmsaas_internal_routes
    internal_policies: cmsaas_policies
  celery:
    clear_tasks_for_development: false
    purge: false
    broker:
      us-east-1: rediss://:{password}@{{ elasticache_address }}:{{ elasticache_port }}/1?ssl_ca_certs={ssl_ca_certs}&ssl_cert_reqs=required
      us-west-2: rediss://:{password}@{{ elasticache_address }}:{{ elasticache_port }}/1?ssl_ca_certs={ssl_ca_certs}&ssl_cert_reqs=required
      global: rediss://:{password}@{{ elasticache_address }}:{{ elasticache_port }}/1?ssl_ca_certs={ssl_ca_certs}&ssl_cert_reqs=required
    backend:
      us-east-1: rediss://:{password}@{{ elasticache_address }}:{{ elasticache_port }}/2?ssl_ca_certs={ssl_ca_certs}&ssl_cert_reqs=required
      us-west-2: rediss://:{password}@{{ elasticache_address }}:{{ elasticache_port }}/2?ssl_ca_certs={ssl_ca_certs}&ssl_cert_reqs=required
      global: rediss://:{password}@{{ elasticache_address }}:{{ elasticache_port }}/2?ssl_ca_certs={ssl_ca_certs}&ssl_cert_reqs=required
    debug: true
  # Saas Configuration
  ses_notifications_sender_identity: {{ notifications_sender_identity }}
  dax_endpoints:
    - {{ dax_configuration_endpoint }}
  redis:
    host:
      global: {{ elasticache_address }}
    port: {{ elasticache_port }}
    ssl: true
    cluster_mode:
      enabled: false
      nodes:
        global:
          - host: {{ elasticache_address }}
            port: {{ elasticache_port }}
  noq_db:
    endpoint: {{ noq_db_endpoint }}
    port: {{ noq_db_port }}
    database: {{ noq_db_database_name }}
  sentry:
    dsn: {{ sentry_dsn }}
  google_analytics:
    tracking_id: {{ google_analytics_tracking_id }}
  tenant_storage:
    base_path: /data/tenant_data/
