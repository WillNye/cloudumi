executionRoleArn: {{ ecs_task_execution_role_arn }}
containerDefinitions:
  - dnsSearchDomains: [ ]
    logConfiguration:
      logDriver: awslogs
      options:
        awslogs-group: {{ ecs_cluster_name }}
        awslogs-region: {{ region }}
        awslogs-stream-prefix: celery-scheduler
    portMappings:
      - hostPort: 7071
        protocol: tcp
        containerPort: 7071
    entryPoint:
      - /bin/sh
      - "-c"
      - |
         python /app/common/celery_tasks/run.py --profile CELERY_SCHEDULER && \
         python /app/common/celery_tasks/run.py --profile CELERY_FLOWER && \
         python /app/common/celery_tasks/run.py --profile CELERY_WORKER
    linuxParameters:
      devices: [ ]
      initProcessEnabled: true
    cpu: 0
    environment:
      - name: CONFIG_LOCATION
        value: {{ config_path_with_bucket }}
      - name: SETUPTOOLS_USE_DISTUTILS
        value: stdlib
      - name: RUNTIME_PROFILE
        value: CELERY_SCHEDULER
      - name: STAGE
        value: {{ stage }}
    dnsServers: [ ]
    mountPoints:
      - containerPath: /data
        sourceVolume: efs-server-AP
    dockerSecurityOptions: [ ]
    volumesFrom: [ ]
    image: {{ registry_repository_url_api }}:latest
    essential: true
    links: [ ]
    extraHosts: [ ]
    pseudoTerminal: false
    readonlyRootFilesystem: false
    privileged: false
    name: {{ ecs_cluster_name }}-celery-scheduler
placementConstraints: [ ]
memory: '8192'
taskRoleArn: {{ ecs_task_role_arn }}
family: {{ ecs_cluster_name }}-celery-scheduler
requiresCompatibilities:
  - FARGATE
networkMode: awsvpc
cpu: '2048'
runtimePlatform:
  operatingSystemFamily: LINUX
  cpuArchitecture: ARM64
volumes:
 - name: efs-server-AP
   efsVolumeConfiguration:
    fileSystemId: {{ aws_efs_data_storage_file_system_id }}
    transitEncryption: ENABLED
    authorizationConfig:
      accessPointId: {{ aws_efs_data_storage_access_point_id }}
      iam: ENABLED