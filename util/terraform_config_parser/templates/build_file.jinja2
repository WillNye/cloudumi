load("@io_bazel_rules_docker//container:container.bzl", "container_push")

filegroup(
    name = "{{ stage }}-{{ attributes }}-files",
    srcs = glob([
        "*.yaml",
    ]),
    visibility = ["//visibility:public"],
)

container_push(
    name = "api-container-deploy-{{ stage }}",
    format = "Docker",
    repository = "{{ namespace }}-{{ stage }}-registry-api",
    image = "//api:container",
    registry = "{{ registry_repository_url }}",
    tag = "{{ stage }}",
    visibility = ["//visibility:public"],
)

container_push(
    name = "celery-container-deploy-{{ stage }}",
    format = "Docker",
    repository = "{{ namespace }}-{{ stage }}-registry-celery",
    image = "//common/celery_tasks:container",
    registry = "{{ registry_repository_url }}",
    tag = "{{ stage }}",
    visibility = ["//visibility:public"],
)

genrule(
    name = "{{ stage }}-{{ attributes }}",
    srcs = [
        ":api-container-deploy-{{ stage }}",
        ":celery-container-deploy-{{ stage }}",
        ":{{ stage }}-{{ attributes }}-files",
    ],
    executable = True,
    exec_tools = [
        ":api-container-deploy-{{ stage }}",
        ":celery-container-deploy-{{ stage }}",
    ],
    outs = ["run_deploy_{{ stage }}"],
    message = "Deploying CloudUmi to {{ stage }}...",
    cmd = "echo 'echo \"NOTE: This script makes certain assumptions: most have {{ aws_profile }} as a section in your ~/.aws/credentials (see READMEs), must have awscli installed pip install awscli\"; \
           \
           export AWS_PROFILE={{ aws_profile }}; \
           \
           aws ecr get-login-password --region {{ region }} | docker login --username AWS --password-stdin {{ registry_repository_url }}; \
           \
           aws ecs create-cluster --cluster-name {{ ecs_cluster_name }}; \
           \
           aws ecs register-task-definition --cli-input-yaml file://deploy/infrastructure/live/{{ namespace }}/{{ stage }}-{{ attributes }}/task_definition.yaml; \
           \
           aws ecs create-service --cluster {{ ecs_cluster_name }} --service-name {{ ecs_cluster_name }} \
            --task-definition sample-fargate:1 --desired-count 1 --launch-type "FARGATE" --network-configuration \
            "awsvpcConfiguration={subnets=[subnet-abcd1234],securityGroups=[sg-abcd1234]}"; \
           \
           ecs-cli configure --cluster {{ ecs_cluster_name }} --default-launch-type FARGATE \
           --config-name {{ ecs_cluster_name }} --region {{ region }}; \
           \
           ecs-cli up --cluster-config {{ ecs_cluster_name }}; \
           \
           ecs-cli compose -f deploy/infrastructure/live/{{ namespace }}/{{ stage }}-{{ attributes }}/compose.yaml \
           --cluster-config {{ ecs_cluster_name }} \
           --ecs-params deploy/infrastructure/live/{{ namespace }}/{{ stage }}-{{ attributes }}/ecs.yaml \
           -p {{ ecs_cluster_name }} \
           --task-role-arn {{ ecs_task_role_arn }} \
           --region {{ region }} service up --deployment-max-percent 200 --deployment-min-healthy-percent 50 --create-log-groups --timeout 15 \
           --target-groups targetGroupArn={{ target_group_arn }},containerName={{ cluster_id_safed }}-api,containerPort=8092' >$@",
    tags = ["manual"],
)

genrule(
    name = "destroy",
    srcs = [
        ":{{ stage }}-{{ attributes }}-files",
    ],
    executable = True,
    outs = ["run_destroy_{{ stage }}"],
    message = "Destroying CloudUmi in {{ stage }}...",
    cmd = "ecs-cli compose -f deploy/infrastructure/live/{{ namespace }}/{{ stage }}-{{ attributes }}/compose.yaml \
           -p {{ ecs_cluster_name }} service rm \
           \
           ecs-cli down --cluster-config {{ ecs_cluster_name }}; >$@",
    tags = ["manual"],
)