# This configuration is used for unit tests.

_global_:
  metrics:
    cloudwatch:
      enabled: false
  development: true
  environment: test
  deployment:
    cluster_id: test
  tenant_storage:
    base_path: /tmp/tenant_data/
  tornado:
    debug: true
    port: 8081
    xsrf: false
  celery:
    broker:
      global: filesystem://.pytest_cache/0
    broker_transport_options:
      data_folder_in: .pytest_cache/celery_data_folder_in
      data_folder_out: .pytest_cache/celery_data_folder_out
      data_folder_processed: .pytest_cache/celery_data_folder_processed
  secrets:
    postgresql:
      username: postgres
      password: local_dev
  noq_db:
    endpoint: "localhost"
    port: 5432
    database: "noq"

site_configs:
  example_com:
    hub_account:
      name: NoqCentralRoleLocalDev
      account_id: "123456789012"
      role_arn: arn:aws:iam::123456789012:role/NoqCentralRoleLocalDev
      external_id: 018e23e8-9b41-4d66-85f2-3d60cb2b3c43
    spoke_accounts:
      - name: NoqSpokeRoleLocalDev
        account_id: "123456789012"
        account_name: default_account_2
        role_arn: arn:aws:iam::123456789012:role/NoqSpokeRoleLocalDev
        external_id: 018e23e8-9b41-4d66-85f2-3d60cb2b3c43
        hub_account_arn: arn:aws:iam::123456789012:role/NoqCentralRoleLocalDev
        org_management_account: false
      - name: NoqSpokeRoleLocalDev
        account_id: "123456789013"
        account_name: default_account_1
        role_arn: arn:aws:iam::123456789013:role/NoqSpokeRoleLocalDev
        external_id: 018e23e8-9b41-4d66-85f2-3d60cb2b3c43
        hub_account_arn: arn:aws:iam::123456789013:role/NoqCentralRoleLocalDev
        org_management_account: false
      - name: NoqSpokeRoleLocalDev
        account_id: "012345678901"
        account_name: default_account_0
        role_arn: arn:aws:iam::012345678901:role/NoqSpokeRoleLocalDev
        external_id: 018e23e8-9b41-4d66-85f2-3d60cb2b3c43
        hub_account_arn: arn:aws:iam::012345678901:role/NoqCentralRoleLocalDev
        org_management_account: false
    org_accounts:
      - org_id: test_org
        account_id: "123456789012"
        account_name: test_account
        owner: user
    groups:
      can_delete_iam_principals:
        - test_delete_user_allowed
    application_admin: consoleme_admins@example.com
    secrets:
      jwt_secret: T3sts3cr3t
    s3_cache_bucket: fakebucket
    celery:
      active_region: us-east-1
      test_account_ids:
        - "123456789012"
      sync_regions:
        - us-east-1
        - us-west-2
        - eu-west-1
      trigger_credential_mapping_refresh_from_role_changes:
        enabled: true
      cache_cloudtrail_denies:
        enabled: true

    cloudtrail:
      enabled: true
      account_id: "123456789012"
      queue_arn: "arn:aws:sqs:us-east-1:123456789012:consoleme-cloudtrail-access-deny-events-test"

    # TODO: This is used by testing but we do not support BYO mtls in a SaaS environment
    cli_auth:
      certificate_header: certificate_header
      required_headers:
        - RequiredMTLSHeader: RequiredMTLSHeaderValue

    url: http://127.0.0.1:8081

    account_ids_to_name:
      "123456789012":
        - default_account

    auth:
      get_groups_by_header: true
      get_user_by_header: true
      groups_header_name: group_header
      user_header_name: user_header
      require_mtls: true
      require_jwt: false
      password_policy:
        strength: null

    event_bridge:
      detect_role_changes_and_update_cache:
        queue_arn: arn:aws:sqs:{region}:123456789012:consoleme-cloudtrail-role-events-test
      detect_cloudtrail_denies_and_update_cache:
        queue_arn: arn:aws:sqs:{region}:123456789012:consoleme-cloudtrail-access-deny-events-test
    redis:
      host:
        us-east-1: null
        us-west-2: null
        eu-west-1: null
      port: null
    dynamic_config:
      group_mapping:
        someuser@example.com:
          roles:
            - arn:aws:iam::123456789012:role/userrolename
        group1@example.com:
          roles:
            - arn:aws:iam::123456789012:role/rolename
          cli_only_roles:
            - arn:aws:iam::123456789012:role/rolename2
        groupa@example.com:
          roles:
            - arn:aws:iam::123456789012:role/roleA
            - arn:aws:iam::123456789012:role/roleB

    aws:
      account_number: "123456789012"
      region: us-east-1
      issuer: YourCompany

    ses:
      consoleme:
        sender: consoleme_test@example.com
        name: Consoleme
      accessui:
        sender: access_ui_test@example.com
        name: Access UI

    user_role_creator:
      default_trust_policy: {}

    policies:
      temp_policy_support: true
      supported_resource_types_for_policy_application:
        - s3
        - sns
        - sqs

    cloud_credential_authorization_mapping:
      role_tags:
        enabled: true
        required_trust_policy_entity: ConsoleMeInstanceProfile
        authorized_groups_tags:
          - authorized_groups
        authorized_groups_cli_only_tags:
          - authorized_groups_cli_only
      dynamic_config:
        enabled: true
      internal_plugin:
        enabled: true

    logging:
      json_formatter:
        indent: 2

    # You'll probably want to override FUNCTION to generate this data with your own business logic.
    application_settings:
      application_1:
        owner: groupa@example.com
        owner_url: https://www.example.com/groupa@example.com
        app_url: https://www.example.com/ci_cd_pipeline/application_1
        roles:
          - arn:aws:iam::123456789012:role/application_1InstanceProfile
          - arn:aws:iam::123456789013:role/application_1InstanceProfile
      application_2:
        owner: groupa@example.com
        roles:
          - arn:aws:iam::123456789012:role/application_2InstanceProfile

    api_auth:
      valid_entities:
        - user@example.com

    cache_self_service_typeahead:
      cache_resource_templates: true

    bitbucket:
      url: https://fakerepo.example.com

    cache_resource_templates:
      repositories:
        - type: git
          code_repository_provider: bitbucket
          name: honeybee_templates
          project_key: project_name
          repo_url: ssh://git@fakerepo.example.com:7999/project_name/honeybee_templates.git
          web_path: https://fakerepo.example.com/projects/project_name/repos/honeybee_templates/browse/{relative_path}
          create_pr_api: https://fakerepo.example.com/rest/api/1.0/projects/project_name/repos/honeybee_templates/pull-requests
          main_branch_name: master
          authentication_settings:
            email: consoleme_admins@example.com
          commit_settings:
            create_pr: false # If true, ConsoleMe will show you the PR location and not allow policy review within consoleme
            commit_to_branch_on_approval: master # If set, will push to this branch on approval
          resource_formats:
            - honeybee
          resource_type_parser:
            honeybee:
              iam_role:
                - path_prefix: honeybee_templates/iamrole/ # must begin with
                  path_suffix: ".yaml" # must end with
                  file_content:
                    includes:
                      - AssumeRolePolicyDocument
              managed_policy:
                - path_prefix: honeybee_templates/iammanagedpolicy/
                  path_suffix: ".yaml"
              service_control_policy:
                - path_prefix: honeybee_templates/servicecontrolpolicy/
                  path_suffix: ".yaml"
              other:
                - path_suffix: ".yaml"
  cloudumidev_com:
    hub_account:
      name: NoqCentralRoleLocalDev
      account_id: "123456789012"
      role_arn: arn:aws:iam::123456789012:role/NoqCentralRoleLocalDev
      external_id: 018e23e8-9b41-4d66-85f2-3d60cb2b3c43
    spoke_accounts:
      - name: NoqSpokeRoleLocalDev
        account_id: "123456789012"
        account_name: default_account
        role_arn: arn:aws:iam::123456789012:role/NoqSpokeRoleLocalDev
        external_id: 018e23e8-9b41-4d66-85f2-3d60cb2b3c43
        hub_account_arn: arn:aws:iam::123456789012:role/NoqCentralRoleLocalDev
        master_for_account: false
      - name: NoqSpokeRoleLocalDev
        account_id: "123456789013"
        account_name: default_account
        role_arn: arn:aws:iam::123456789013:role/NoqSpokeRoleLocalDev
        external_id: 018e23e8-9b41-4d66-85f2-3d60cb2b3c43
        hub_account_arn: arn:aws:iam::123456789013:role/NoqCentralRoleLocalDev
        master_for_account: false
      - name: NoqSpokeRoleLocalDev
        account_id: "012345678901"
        account_name: default_account
        role_arn: arn:aws:iam::012345678901:role/NoqSpokeRoleLocalDev
        external_id: 018e23e8-9b41-4d66-85f2-3d60cb2b3c43
        hub_account_arn: arn:aws:iam::012345678901:role/NoqCentralRoleLocalDev
        master_for_account: false
    org_accounts:
      - org_id: test_org
        account_id: "123456789012"
        account_name: test_account
        owner: user
    groups:
      can_delete_iam_principals:
        - test_delete_user_allowed
    application_admin: consoleme_admins@example.com
    secrets:
      jwt_secret: T3sts3cr3t
    s3_cache_bucket: fakebucket
    celery:
      active_region: us-east-1
      test_account_ids:
        - "123456789012"
      sync_regions:
        - us-east-1
        - us-west-2
        - eu-west-1
      trigger_credential_mapping_refresh_from_role_changes:
        enabled: true
      cache_cloudtrail_denies:
        enabled: true

    cloudtrail:
      enabled: true
      account_id: "123456789012"
      queue_arn: "arn:aws:sqs:us-east-1:123456789012:consoleme-cloudtrail-access-deny-events-test"

    auth:
      challenge_url:
        enabled: true
      get_user_by_oidc: true
    get_user_by_oidc_settings:
      custom_role_attributes:
        - name: "custom:role_arns"
          delimiter: ","
          regex: "(.*)"
          role_match: '\1'
      client_scopes:
        - email
        - openid
        - profile

    # TODO: This is used by testing but we do not support BYO mtls in a SaaS environment
    cli_auth:
      certificate_header: certificate_header
      required_headers:
        - RequiredMTLSHeader: RequiredMTLSHeaderValue

    url: http://127.0.0.1:8081

    account_ids_to_name:
      "123456789012":
        - default_account

    event_bridge:
      detect_role_changes_and_update_cache:
        queue_arn: arn:aws:sqs:{region}:123456789012:consoleme-cloudtrail-role-events-test
      detect_cloudtrail_denies_and_update_cache:
        queue_arn: arn:aws:sqs:{region}:123456789012:consoleme-cloudtrail-access-deny-events-test
    redis:
      host:
        us-east-1: null
        us-west-2: null
        eu-west-1: null
      port: null

    dynamic_config:
      group_mapping:
        someuser@example.com:
          roles:
            - arn:aws:iam::123456789012:role/userrolename
        group1@example.com:
          roles:
            - arn:aws:iam::123456789012:role/rolename
          cli_only_roles:
            - arn:aws:iam::123456789012:role/rolename2
        groupa@example.com:
          roles:
            - arn:aws:iam::123456789012:role/roleA
            - arn:aws:iam::123456789012:role/roleB

    aws:
      account_number: "123456789012"
      region: us-east-1
      issuer: YourCompany

    ses:
      consoleme:
        sender: consoleme_test@example.com
        name: Consoleme
      accessui:
        sender: access_ui_test@example.com
        name: Access UI

    user_role_creator:
      default_trust_policy: {}

    policies:
      temp_policy_support: true
      supported_resource_types_for_policy_application:
        - s3
        - sns
        - sqs

    cloud_credential_authorization_mapping:
      role_tags:
        enabled: true
        required_trust_policy_entity: ConsoleMeInstanceProfile
        authorized_groups_tags:
          - authorized_groups
        authorized_groups_cli_only_tags:
          - authorized_groups_cli_only
      dynamic_config:
        enabled: true
      internal_plugin:
        enabled: true

    logging:
      json_formatter:
        indent: 2

    # You'll probably want to override FUNCTION to generate this data with your own business logic.
    application_settings:
      application_1:
        owner: groupa@example.com
        owner_url: https://www.example.com/groupa@example.com
        app_url: https://www.example.com/ci_cd_pipeline/application_1
        roles:
          - arn:aws:iam::123456789012:role/application_1InstanceProfile
          - arn:aws:iam::123456789013:role/application_1InstanceProfile
      application_2:
        owner: groupa@example.com
        roles:
          - arn:aws:iam::123456789012:role/application_2InstanceProfile

    api_auth:
      valid_entities:
        - user@example.com

    cache_self_service_typeahead:
      cache_resource_templates: true

    bitbucket:
      url: https://fakerepo.example.com

    cache_resource_templates:
      repositories:
        - type: git
          code_repository_provider: bitbucket
          name: honeybee_templates
          project_key: project_name
          repo_url: ssh://git@fakerepo.example.com:7999/project_name/honeybee_templates.git
          web_path: https://fakerepo.example.com/projects/project_name/repos/honeybee_templates/browse/{relative_path}
          create_pr_api: https://fakerepo.example.com/rest/api/1.0/projects/project_name/repos/honeybee_templates/pull-requests
          main_branch_name: master
          authentication_settings:
            email: consoleme_admins@example.com
          commit_settings:
            create_pr: false # If true, NOq will show you the PR location and not allow policy review within NOQ
            commit_to_branch_on_approval: master # If set, will push to this branch on approval
          resource_formats:
            - honeybee
          resource_type_parser:
            honeybee:
              iam_role:
                - path_prefix: honeybee_templates/iamrole/ # must begin with
                  path_suffix: ".yaml" # must end with
                  file_content:
                    includes:
                      - AssumeRolePolicyDocument
              managed_policy:
                - path_prefix: honeybee_templates/iammanagedpolicy/
                  path_suffix: ".yaml"
              service_control_policy:
                - path_prefix: honeybee_templates/servicecontrolpolicy/
                  path_suffix: ".yaml"
              other:
                - path_suffix: ".yaml"
  localhost:
    hub_account:
      name: NoqCentralRoleLocalDev
      account_id: "123456789012"
      role_arn: arn:aws:iam::123456789012:role/NoqCentralRoleLocalDev
      external_id: 018e23e8-9b41-4d66-85f2-3d60cb2b3c43
    spoke_accounts:
      - name: NoqSpokeRoleLocalDev
        account_id: "123456789012"
        account_name: default_account
        role_arn: arn:aws:iam::123456789012:role/NoqSpokeRoleLocalDev
        external_id: 018e23e8-9b41-4d66-85f2-3d60cb2b3c43
        hub_account_arn: arn:aws:iam::123456789012:role/NoqCentralRoleLocalDev
        master_for_account: false
      - name: NoqSpokeRoleLocalDev
        account_id: "123456789013"
        account_name: default_account
        role_arn: arn:aws:iam::123456789013:role/NoqSpokeRoleLocalDev
        external_id: 018e23e8-9b41-4d66-85f2-3d60cb2b3c43
        hub_account_arn: arn:aws:iam::123456789013:role/NoqCentralRoleLocalDev
        master_for_account: false
      - name: NoqSpokeRoleLocalDev
        account_id: "012345678901"
        account_name: default_account
        role_arn: arn:aws:iam::012345678901:role/NoqSpokeRoleLocalDev
        external_id: 018e23e8-9b41-4d66-85f2-3d60cb2b3c43
        hub_account_arn: arn:aws:iam::012345678901:role/NoqCentralRoleLocalDev
        master_for_account: false
    org_accounts:
      - org_id: test_org
        account_id: "123456789012"
        account_name: test_account
        owner: user
    groups:
      can_delete_iam_principals:
        - test_delete_user_allowed
    application_admin: consoleme_admins@example.com
    secrets:
      jwt_secret: T3sts3cr3t
    s3_cache_bucket: fakebucket
    celery:
      active_region: us-east-1
      test_account_ids:
        - "123456789012"
      sync_regions:
        - us-east-1
        - us-west-2
        - eu-west-1
      trigger_credential_mapping_refresh_from_role_changes:
        enabled: true
      cache_cloudtrail_denies:
        enabled: true

    cloudtrail:
      enabled: true
      account_id: "123456789012"
      queue_arn: "arn:aws:sqs:us-east-1:123456789012:consoleme-cloudtrail-access-deny-events-test"

    auth:
      challenge_url:
        enabled: true
      get_user_by_oidc: true
    get_user_by_oidc_settings:
      custom_role_attributes:
        - name: "custom:role_arns"
          delimiter: ","
          regex: "(.*)"
          role_match: '\1'
      client_scopes:
        - email
        - openid
        - profile

    # TODO: This is used by testing but we do not support BYO mtls in a SaaS environment
    cli_auth:
      certificate_header: certificate_header
      required_headers:
        - RequiredMTLSHeader: RequiredMTLSHeaderValue

    url: http://127.0.0.1:8081

    account_ids_to_name:
      "123456789012":
        - default_account

    event_bridge:
      detect_role_changes_and_update_cache:
        queue_arn: arn:aws:sqs:{region}:123456789012:consoleme-cloudtrail-role-events-test
      detect_cloudtrail_denies_and_update_cache:
        queue_arn: arn:aws:sqs:{region}:123456789012:consoleme-cloudtrail-access-deny-events-test
    redis:
      host:
        global: cloudumi-redis
      ssl: true
      ssl_ca_certs: ./deploy/local/redis/tests/tls/ca.crt
      password: s2dKdXxjHeCQwoYZ
      cluster_mode:
        enabled: false
        nodes:
          global:
            - host: cloudumi-redis
              port: 6379
    dynamic_config:
      group_mapping:
        someuser@example.com:
          roles:
            - arn:aws:iam::123456789012:role/userrolename
        group1@example.com:
          roles:
            - arn:aws:iam::123456789012:role/rolename
          cli_only_roles:
            - arn:aws:iam::123456789012:role/rolename2
        groupa@example.com:
          roles:
            - arn:aws:iam::123456789012:role/roleA
            - arn:aws:iam::123456789012:role/roleB

    aws:
      account_number: "123456789012"
      region: us-east-1
      issuer: YourCompany

    ses:
      consoleme:
        sender: consoleme_test@example.com
        name: Consoleme
      accessui:
        sender: access_ui_test@example.com
        name: Access UI

    user_role_creator:
      default_trust_policy: {}

    policies:
      temp_policy_support: true
      supported_resource_types_for_policy_application:
        - s3
        - sns
        - sqs

    cloud_credential_authorization_mapping:
      role_tags:
        enabled: true
        required_trust_policy_entity: ConsoleMeInstanceProfile
        authorized_groups_tags:
          - authorized_groups
        authorized_groups_cli_only_tags:
          - authorized_groups_cli_only
      dynamic_config:
        enabled: true
      internal_plugin:
        enabled: true

    logging:
      json_formatter:
        indent: 2

    # You'll probably want to override FUNCTION to generate this data with your own business logic.
    application_settings:
      application_1:
        owner: groupa@example.com
        owner_url: https://www.example.com/groupa@example.com
        app_url: https://www.example.com/ci_cd_pipeline/application_1
        roles:
          - arn:aws:iam::123456789012:role/application_1InstanceProfile
          - arn:aws:iam::123456789013:role/application_1InstanceProfile
      application_2:
        owner: groupa@example.com
        roles:
          - arn:aws:iam::123456789012:role/application_2InstanceProfile

    api_auth:
      valid_entities:
        - user@example.com

    cache_self_service_typeahead:
      cache_resource_templates: true

    bitbucket:
      url: https://fakerepo.example.com

    cache_resource_templates:
      repositories:
        - type: git
          code_repository_provider: bitbucket
          name: honeybee_templates
          project_key: project_name
          repo_url: ssh://git@fakerepo.example.com:7999/project_name/honeybee_templates.git
          web_path: https://fakerepo.example.com/projects/project_name/repos/honeybee_templates/browse/{relative_path}
          create_pr_api: https://fakerepo.example.com/rest/api/1.0/projects/project_name/repos/honeybee_templates/pull-requests
          main_branch_name: master
          authentication_settings:
            email: consoleme_admins@example.com
          commit_settings:
            create_pr: false # If true, NOq will show you the PR location and not allow policy review within NOQ
            commit_to_branch_on_approval: master # If set, will push to this branch on approval
          resource_formats:
            - honeybee
          resource_type_parser:
            honeybee:
              iam_role:
                - path_prefix: honeybee_templates/iamrole/ # must begin with
                  path_suffix: ".yaml" # must end with
                  file_content:
                    includes:
                      - AssumeRolePolicyDocument
              managed_policy:
                - path_prefix: honeybee_templates/iammanagedpolicy/
                  path_suffix: ".yaml"
              service_control_policy:
                - path_prefix: honeybee_templates/servicecontrolpolicy/
                  path_suffix: ".yaml"
              other:
                - path_suffix: ".yaml"
