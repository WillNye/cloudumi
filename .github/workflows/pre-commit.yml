# To test, locally, reference deploy/README.md#github-actions

name: pre-commit

on:
  push:
    branches: [main]
    tags: ["*"]
  pull_request:
    # The branches below must be a subset of the branches above
    branches: [main]

jobs:
  build:
    runs-on: self-hosted
    env:
      AWS_REGION: us-west-2
    steps:
      - name: Cancel Previous Runs # Cancels github action runs if the PR/branch is updated
        uses: styfle/cancel-workflow-action@0.9.1
        with:
          access_token: ${{ github.token }}
      - uses: actions/checkout@v2
      - uses: actions/setup-go@v2
        with:
          go-version: "^1.17.7"
      # setup-python won't work with self-hosted runners. Python3.10 should be pre-installed
      #      - name: Set up Python 3.10
      #        uses: actions/setup-python@v1
      #        with:
      #          python-version: 3.10
      - name: Install dependencies
        env:
          IAMBIC_REPO_USER: ${{ secrets.IAMBIC_REPO_USER }}
          IAMBIC_REPO_TOKEN: ${{ secrets.IAMBIC_REPO_TOKEN }}
        run: |
          set -x
          export AWS_ACCESS_KEY_ID=${{ secrets.NOQ_ECR_USER_ACCESS_KEY_ID }}
          export AWS_SECRET_ACCESS_KEY=${{ secrets.NOQ_ECR_USER_SECRET_ACCESS_KEY }}
          export PATH="$PATH:/home/linuxbrew/.linuxbrew/bin:/home/linuxbrew/.linuxbrew/sbin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin"
          curl -sL https://deb.nodesource.com/setup_18.x | sudo bash
          curl -sL https://dl.yarnpkg.com/debian/pubkey.gpg | sudo apt-key add -
          curl -fsSL https://apt.releases.hashicorp.com/gpg | sudo apt-key add -
          echo "deb https://dl.yarnpkg.com/debian/ stable main" | sudo tee /etc/apt/sources.list.d/yarn.list
          sudo apt-add-repository "deb [arch=$(dpkg --print-architecture)] https://apt.releases.hashicorp.com $(lsb_release -cs) main"
          sudo apt-get update
          sudo apt-get install \
            libssl-dev \
            libcurl4-openssl-dev \
            software-properties-common \
            python3.10-dev \
            build-essential \
            libpq-dev \
            libxml2-dev \
            libxmlsec1-dev \
            libxmlsec1-openssl \
            pkg-config \
            musl-dev \
            yarn \
            unzip \
            gnupg \
            python3-pip \
            python3.10-venv \
            terraform \
            clang \
            nodejs -y
          mkdir -p /tmp/env
          python3.10 -m venv /tmp/env
          source /tmp/env/bin/activate
          pip install setuptools_rust numpy wheel
          pip install pre-commit
          pip install \
            -r requirements.lock
          pip install .
          yarn --cwd ui install
          yarn --cwd frontend install
          yarn --cwd frontend build_template

          # Checkov for Terraform security vulnerability checking
          pip install checkov

          # tfsec - Terraform security scanning
          go install github.com/aquasecurity/tfsec/cmd/tfsec@v1.15.4

          # terrascan - Moar Terraform security scanning
          curl -L "$(curl -s https://api.github.com/repos/tenable/terrascan/releases/latest | grep -o -E "https://.+?_Linux_x86_64.tar.gz")" > terrascan.tar.gz
          tar -xf terrascan.tar.gz terrascan && rm terrascan.tar.gz
          sudo install terrascan /usr/local/bin && rm terrascan
          # Set up terraform workspace in a subshell
          (cd deploy/infrastructure/ ; terraform init)
          # terraform -chdir=deploy/infrastructure/ workspace select shared-staging-1
          # terraform -chdir=deploy/infrastructure/ init --var-file=deploy/infrastructure/live/shared/staging-1/noq.dev-staging.tfvars
          # terraform -chdir=deploy/infrastructure/ workspace select shared-prod-1
          # terraform -chdir=deploy/infrastructure/ init --var-file=deploy/infrastructure/live/shared/prod-1/noq.dev-prod.tfvars
          # terraform -chdir=deploy/infrastructure/ workspace select cyberdyne-prod-1
          # terraform -chdir=deploy/infrastructure/ init --var-file=deploy/infrastructure/live/cyberdyne/prod-1/cyberdyne.noq.dev-prod.tfvars
          pre-commit install
          set +x
      - name: Run pre-commit
        run: |
          source /tmp/env/bin/activate
          pre-commit run -a

      - name: Run tests
        run: |
          source /tmp/env/bin/activate
          rm -rf deploy/infrastructure/modules/services/dynamo/.tfsec
          make test
